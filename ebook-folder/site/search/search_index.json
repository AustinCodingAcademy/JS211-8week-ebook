{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to JS211 - Foundations in Programming Objective Statement Through this course students will learn to program by building simple and basic applications. The focus of this course is programmatic logic with a secondary focus on syntax. This course uses JavaScript as a language/syntax and Node.js as an environment to run JavaScript outside of a web browser. The skills learned in this course directly translate to other programming languages. While client-facing G raphical U ser I nterfaces (GUIs) are recommended as extended practice, there is no need for a student to worry if they are unable to build a GUI for every one of their terminal-based applications(CLI). In this course, students get a real chance to develop their own problem-solving strategies. There is no one right way to do any of them. In addition, the skills learned in this course directly translate to the skills learned in the 311 and 411 courses in a more practical and realistic sense. Instead of learning various methods, programming patterns, and data manipulation in isolation, students will spread their understanding and familiarity with programming over the development of their graduation app in the following 311 and 411 courses. Our philosophy is \"learn by doing\". We engage our students in the problem solving process as opposed to relying heavily on lectures. Our instructors, who are real developers, facilitate learning through guiding your progress as you work through projects on your own. To be successful in this course, you must spend 10-15 hours outside of class completing Pre-Class Lessons before each Class Lesson. Our class structure follows the flipped classroom model where students learn on their own outside of class and bring their questions with them to class. Class begins by discussing the \"Questions for Discussion & Terms to Know\", and the majority of class time is spent working on projects. READ ON, start with Pre-Course Pt 1: How to Succeed and work through all 5 sections BEFORE you come to class on the first day! Class Structure and Expectations This class will follow a Flipped-Classroom methodology. This means you, the student, are required to complete the assigned Pre-Homework before each day of class. You will not succeed in this course if you don't complete the Pre-Homework. Working on the Pre-Homework during class takes away from other students, ruins your chance to deeply understand the material, and ask import questions! Don't be the guy! Due dates : Homework is due the Sunday after it is assigned. (unless otherwise specified). Please have your assignment turned in by the end of Sunday night. Due dates are scheduled on Sunday for you to attend Study Sessions on the weekend. GET IT DONE! Both Daily and Checkpoint Assignments are due the Sunday after they are assigned, the Submission Due Day , i.e. Ticket-Counter is assigned Wednesday and will be due for submission 4 days later on Sunday. Assignments turned in after the Submission Due Day will be penalized with -20 points, in other words, only a maximum grade of 80 is possible. The third Checkpoint for each course, (101 - 411) will be due the Sunday following the last day of the course. Work turned in after this will be subject to -20 penalty. The Final Submission Day for any late assignments is the Second Sunday after each course ends. Assignments turned in after the Final Submission Day will receive an automatic grade of 50. Homework submission : Turn in your homework on Campus Manager. Copy/paste a link to your completed assignment(GitHub Pull Request or repo URL) in the designated spot for the assignment. For assignments that cannot be accessed via link, we'll make other arrangements on a case-by-case basis. Homework guidelines : Your work should be thorough and demonstrate an understanding of the topic and tasks set forth. Please make sure that your assignments are detailed with comments, inclusive of all specifications, and complete. Grading : You Instructor will be grading your assignments based on their functionality and completion of the specifications laid out for each assignment. Late policy : You may receive up to a 70 for an assignment that is turned in late. It is up to you, the student, to request the instructor grade the assignment after you have submitted it. Additionally, if you have 3 late or missing assignments in a row, you'll be asked to read a programming-related article of your choice and make a 3-minute presentation about it to the class. Exceptions : If you need to turn in an assignment late or will be tardy/absent to a class please email your Instructor and Campus Director ahead of time to make appropriate arrangements. To Pass This Class (and all others) Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, Present to the class specs for the app you are planning to build for your Capstone Project. How To Use This Textbook Video","title":"Home"},{"location":"#welcome-to-js211-foundations-in-programming","text":"","title":"Welcome to JS211 - Foundations in Programming"},{"location":"#objective-statement","text":"Through this course students will learn to program by building simple and basic applications. The focus of this course is programmatic logic with a secondary focus on syntax. This course uses JavaScript as a language/syntax and Node.js as an environment to run JavaScript outside of a web browser. The skills learned in this course directly translate to other programming languages. While client-facing G raphical U ser I nterfaces (GUIs) are recommended as extended practice, there is no need for a student to worry if they are unable to build a GUI for every one of their terminal-based applications(CLI). In this course, students get a real chance to develop their own problem-solving strategies. There is no one right way to do any of them. In addition, the skills learned in this course directly translate to the skills learned in the 311 and 411 courses in a more practical and realistic sense. Instead of learning various methods, programming patterns, and data manipulation in isolation, students will spread their understanding and familiarity with programming over the development of their graduation app in the following 311 and 411 courses. Our philosophy is \"learn by doing\". We engage our students in the problem solving process as opposed to relying heavily on lectures. Our instructors, who are real developers, facilitate learning through guiding your progress as you work through projects on your own. To be successful in this course, you must spend 10-15 hours outside of class completing Pre-Class Lessons before each Class Lesson. Our class structure follows the flipped classroom model where students learn on their own outside of class and bring their questions with them to class. Class begins by discussing the \"Questions for Discussion & Terms to Know\", and the majority of class time is spent working on projects. READ ON, start with Pre-Course Pt 1: How to Succeed and work through all 5 sections BEFORE you come to class on the first day!","title":"Objective Statement"},{"location":"#class-structure-and-expectations","text":"This class will follow a Flipped-Classroom methodology. This means you, the student, are required to complete the assigned Pre-Homework before each day of class. You will not succeed in this course if you don't complete the Pre-Homework. Working on the Pre-Homework during class takes away from other students, ruins your chance to deeply understand the material, and ask import questions! Don't be the guy! Due dates : Homework is due the Sunday after it is assigned. (unless otherwise specified). Please have your assignment turned in by the end of Sunday night. Due dates are scheduled on Sunday for you to attend Study Sessions on the weekend. GET IT DONE! Both Daily and Checkpoint Assignments are due the Sunday after they are assigned, the Submission Due Day , i.e. Ticket-Counter is assigned Wednesday and will be due for submission 4 days later on Sunday. Assignments turned in after the Submission Due Day will be penalized with -20 points, in other words, only a maximum grade of 80 is possible. The third Checkpoint for each course, (101 - 411) will be due the Sunday following the last day of the course. Work turned in after this will be subject to -20 penalty. The Final Submission Day for any late assignments is the Second Sunday after each course ends. Assignments turned in after the Final Submission Day will receive an automatic grade of 50. Homework submission : Turn in your homework on Campus Manager. Copy/paste a link to your completed assignment(GitHub Pull Request or repo URL) in the designated spot for the assignment. For assignments that cannot be accessed via link, we'll make other arrangements on a case-by-case basis. Homework guidelines : Your work should be thorough and demonstrate an understanding of the topic and tasks set forth. Please make sure that your assignments are detailed with comments, inclusive of all specifications, and complete. Grading : You Instructor will be grading your assignments based on their functionality and completion of the specifications laid out for each assignment. Late policy : You may receive up to a 70 for an assignment that is turned in late. It is up to you, the student, to request the instructor grade the assignment after you have submitted it. Additionally, if you have 3 late or missing assignments in a row, you'll be asked to read a programming-related article of your choice and make a 3-minute presentation about it to the class. Exceptions : If you need to turn in an assignment late or will be tardy/absent to a class please email your Instructor and Campus Director ahead of time to make appropriate arrangements.","title":"Class Structure and Expectations"},{"location":"#to-pass-this-class-and-all-others","text":"Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, Present to the class specs for the app you are planning to build for your Capstone Project.","title":"To Pass This Class (and all others)"},{"location":"#how-to-use-this-textbook-video","text":"","title":"How To Use This Textbook Video"},{"location":"additionalResources/developSeries/","text":"Develop Series The Prison of Your Mind | Sean Stephenson | TEDxIronwoodStatePrison Its NOT O.K. to Be WEAK - Jordan Peterson Growth Mindset vs Fixed Mindset The Power of Believing - Carol Dweck What if you Stopped Thinking All the Time? Wim Hof Speaking Up Without Freaking Out - Matt Abrahams","title":"Develop Series Collection"},{"location":"additionalResources/developSeries/#develop-series","text":"The Prison of Your Mind | Sean Stephenson | TEDxIronwoodStatePrison Its NOT O.K. to Be WEAK - Jordan Peterson Growth Mindset vs Fixed Mindset The Power of Believing - Carol Dweck What if you Stopped Thinking All the Time? Wim Hof Speaking Up Without Freaking Out - Matt Abrahams","title":"Develop Series"},{"location":"additionalResources/gitCommands/","text":"Git Commands Useful Git Commands git init - initialize a local folder as a git repo to be tracked and push to the cloud git branch branch_name - Create the branch on your local machine called \"branch_name\". git checkout -b branch_name - Create the branch on your local machine and switch into this branch. git checkout branch_name - Switch into this branch. git status - Check the status of tracked/untracked changed files git add fileName.js - Add the file \"fileName.js\" to be tracked for the next commit. git add . - Add all changed files to be tracked. git commit -m \"message\" - Make a commit with the message \"message\". git push - Push the commit to the current working branch git push origin branch_name - Push the commit to the branch \"branch_name\" git pull - Pulls down changes from the repo to bring your local codebase up-to-date","title":"Git Commands"},{"location":"additionalResources/gitCommands/#git-commands","text":"","title":"Git Commands"},{"location":"additionalResources/gitCommands/#useful-git-commands","text":"git init - initialize a local folder as a git repo to be tracked and push to the cloud git branch branch_name - Create the branch on your local machine called \"branch_name\". git checkout -b branch_name - Create the branch on your local machine and switch into this branch. git checkout branch_name - Switch into this branch. git status - Check the status of tracked/untracked changed files git add fileName.js - Add the file \"fileName.js\" to be tracked for the next commit. git add . - Add all changed files to be tracked. git commit -m \"message\" - Make a commit with the message \"message\". git push - Push the commit to the current working branch git push origin branch_name - Push the commit to the branch \"branch_name\" git pull - Pulls down changes from the repo to bring your local codebase up-to-date","title":"Useful Git Commands"},{"location":"additionalResources/graduationPrerequisites/","text":"Graduation Prerequisites A graduate of this program will receive a digital certificate from ACA by: Completing all 4 courses with an overall grade average of >70, Each course must also be completed with a grade average of >70, Build a full-stack web application using the technology learned in these past 4 courses that: Has a SQL Database, Has an rest API to serve the data, Uses an third-party API, Has a sign-in strategy, Has a client-side app for a user to interact with, Deploy and Host the Capstone Project. Is deployed and publicly accessible, Is linked to the ACA website.","title":"Graduation Prerequisites"},{"location":"additionalResources/graduationPrerequisites/#graduation-prerequisites","text":"A graduate of this program will receive a digital certificate from ACA by: Completing all 4 courses with an overall grade average of >70, Each course must also be completed with a grade average of >70, Build a full-stack web application using the technology learned in these past 4 courses that: Has a SQL Database, Has an rest API to serve the data, Uses an third-party API, Has a sign-in strategy, Has a client-side app for a user to interact with, Deploy and Host the Capstone Project. Is deployed and publicly accessible, Is linked to the ACA website.","title":"Graduation Prerequisites"},{"location":"additionalResources/interviewChallenges/","text":"Interview Challenges Train for Interviews? Interviewing for development jobs is tough! To prepare you for the challenges ahead we will practice whiteboarding in front of the class every day. Think of it as a warm-up for the project that awaits. The whiteboarding challenges should be taken seriously and practiced even outside of class. Help yourself by following these steps to attack the problem, work through the problem and collaborate with your interviewer (instructor): Restate the question aloud. Write the question out at the top of the whiteboard. Ask any clarifying questions you need. Invoke the function and write out the expected output given the sample input. If none is given, make it up. Write out a code plan to the side of the whiteboard. Speak aloud every thought you have. THIS IS THE MOST IMPORTANT PART! Build the structure of your function(s). Slowly work through your code plan, building the steps you need. Don't be afraid to mess up and say it aloud. It's not about finding the solution. It's about collaborating and working toward a solution! After you finish, take a picture and transfer it to a Repl.it when you get home. PROMPT: Two Eggs and 100 Floors - The following is a description of this famous puzzle involving 2 eggs and a building with 100 floors. Suppose that we wish to know which stories in a 100-story building are safe to drop eggs from, and which will cause the eggs to break on landing. What strategy should be used to drop eggs such that the total number of drops in the worst case is minimized and we find the required floor? We may make a few assumptions: > - An egg that survives a fall can be used again. > - A broken egg must be discarded. > - The effect of a fall is the same for all eggs. > - If an egg breaks when dropped, then it would break if dropped from a higher floor. > - If an egg survives a fall then it would survive a shorter fall. PROMPT: Hourglasses Puzzle - How do you measure 9 minutes from a 4 minute-glass and a 7 minute-glass? We have only 2 sand timers: 4 minutes and 7 minutes but we need to measure 9 minutes. How do we do it? Class 5: Prompt 1: todo Prompt 2: todo Class 6: Prompt 1: todo Prompt 2: todo Class 7: Prompt 1: todo Prompt 2: todo Class 8: Prompt 1: todo Prompt 2: todo Class 9: Prompt 1: todo Prompt 2: todo Class 10: Prompt 1: todo Prompt 2: todo Class 11: Prompt 1: todo Prompt 2: todo Class 12: Prompt 1: todo Prompt 2: todo Class 13: Prompt 1: todo Prompt 2: todo Class 14: Prompt 1: todo Prompt 2: todo Class 15: Prompt 1: todo Prompt 2: todo Class 16: Prompt 1: todo Prompt 2: todo Class 17: Prompt 1: todo Prompt 2: todo Class 18: Prompt 1: todo Prompt 2: todo Class 19: Prompt 1: todo Prompt 2: todo Class 20: Prompt 1: todo Prompt 2: todo","title":"Interview Training"},{"location":"additionalResources/interviewChallenges/#interview-challenges","text":"","title":"Interview Challenges"},{"location":"additionalResources/interviewChallenges/#train-for-interviews","text":"Interviewing for development jobs is tough! To prepare you for the challenges ahead we will practice whiteboarding in front of the class every day. Think of it as a warm-up for the project that awaits. The whiteboarding challenges should be taken seriously and practiced even outside of class. Help yourself by following these steps to attack the problem, work through the problem and collaborate with your interviewer (instructor): Restate the question aloud. Write the question out at the top of the whiteboard. Ask any clarifying questions you need. Invoke the function and write out the expected output given the sample input. If none is given, make it up. Write out a code plan to the side of the whiteboard. Speak aloud every thought you have. THIS IS THE MOST IMPORTANT PART! Build the structure of your function(s). Slowly work through your code plan, building the steps you need. Don't be afraid to mess up and say it aloud. It's not about finding the solution. It's about collaborating and working toward a solution! After you finish, take a picture and transfer it to a Repl.it when you get home. PROMPT: Two Eggs and 100 Floors - The following is a description of this famous puzzle involving 2 eggs and a building with 100 floors. Suppose that we wish to know which stories in a 100-story building are safe to drop eggs from, and which will cause the eggs to break on landing. What strategy should be used to drop eggs such that the total number of drops in the worst case is minimized and we find the required floor? We may make a few assumptions: > - An egg that survives a fall can be used again. > - A broken egg must be discarded. > - The effect of a fall is the same for all eggs. > - If an egg breaks when dropped, then it would break if dropped from a higher floor. > - If an egg survives a fall then it would survive a shorter fall. PROMPT: Hourglasses Puzzle - How do you measure 9 minutes from a 4 minute-glass and a 7 minute-glass? We have only 2 sand timers: 4 minutes and 7 minutes but we need to measure 9 minutes. How do we do it? Class 5: Prompt 1: todo Prompt 2: todo Class 6: Prompt 1: todo Prompt 2: todo Class 7: Prompt 1: todo Prompt 2: todo Class 8: Prompt 1: todo Prompt 2: todo Class 9: Prompt 1: todo Prompt 2: todo Class 10: Prompt 1: todo Prompt 2: todo Class 11: Prompt 1: todo Prompt 2: todo Class 12: Prompt 1: todo Prompt 2: todo Class 13: Prompt 1: todo Prompt 2: todo Class 14: Prompt 1: todo Prompt 2: todo Class 15: Prompt 1: todo Prompt 2: todo Class 16: Prompt 1: todo Prompt 2: todo Class 17: Prompt 1: todo Prompt 2: todo Class 18: Prompt 1: todo Prompt 2: todo Class 19: Prompt 1: todo Prompt 2: todo Class 20: Prompt 1: todo Prompt 2: todo","title":"Train for Interviews?"},{"location":"additionalResources/keyboardShortcuts/","text":"Keyboard Shortcuts Short-cuts macOS Keyboard Shortcuts Windows Keyboard Shortcuts VS Code Shortcuts","title":"Keyboard Shortcuts"},{"location":"additionalResources/keyboardShortcuts/#keyboard-shortcuts","text":"","title":"Keyboard Shortcuts"},{"location":"additionalResources/keyboardShortcuts/#short-cuts","text":"macOS Keyboard Shortcuts Windows Keyboard Shortcuts VS Code Shortcuts","title":"Short-cuts"},{"location":"additionalResources/learnYourCLI/","text":"Learn Your CLI The Touch Command","title":"Learn Your CLI"},{"location":"additionalResources/learnYourCLI/#learn-your-cli","text":"The Touch Command","title":"Learn Your CLI"},{"location":"additionalResources/presentationsQualifications/","text":"Presentations Qualifications To be eligible to present your Capstone Project to the public, family, friends, and recruiters at the graduation ceremony held after the conclusion of this course the candidate must: Complete the requirements to graduate (see above) Deploy and host your Capstone Project Rehearse the 5-minute presentation with your Job Placement Instructor and Campus Director. Capstone Project Presentation Guidelines The purpose of the presentation is to: Celebrate the graduates new skills, mindset, and confidence. Share with the community the student's ideas and new skills. Practice speaking in-public about technology. A well prepared 3-minute presentation will include: Graduates Name and skills they've been studying The problem the graduate was trying to solve with this app. How the app solves the problem with a demonstration of the app. Where the graduate would like to take the app in the future. Invitation to share the code base with interested patrons after graduation. The presentation should NOT include: An emphasis on sign-on. ( all web apps have a sign-on ) Showing of any code. ( your attendees don't care about code )","title":"Presentations Qualifications"},{"location":"additionalResources/presentationsQualifications/#presentations-qualifications","text":"To be eligible to present your Capstone Project to the public, family, friends, and recruiters at the graduation ceremony held after the conclusion of this course the candidate must: Complete the requirements to graduate (see above) Deploy and host your Capstone Project Rehearse the 5-minute presentation with your Job Placement Instructor and Campus Director.","title":"Presentations Qualifications"},{"location":"additionalResources/presentationsQualifications/#capstone-project-presentation-guidelines","text":"The purpose of the presentation is to: Celebrate the graduates new skills, mindset, and confidence. Share with the community the student's ideas and new skills. Practice speaking in-public about technology. A well prepared 3-minute presentation will include: Graduates Name and skills they've been studying The problem the graduate was trying to solve with this app. How the app solves the problem with a demonstration of the app. Where the graduate would like to take the app in the future. Invitation to share the code base with interested patrons after graduation. The presentation should NOT include: An emphasis on sign-on. ( all web apps have a sign-on ) Showing of any code. ( your attendees don't care about code )","title":"Capstone Project Presentation Guidelines"},{"location":"additionalResources/studentPresentations/","text":"Daily Student Presentations Class 1 - Organize and Coordinate who and when students are presenting. Class 2 - 33% of students: In 4 minutes, pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? Class 3 - 33% of students: In 4 minutes, pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? Class 4 - 33% of students: In 4 minutes, pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? Class 5 - VS Code Short-Cuts - Present to the class 7 short-cuts, why and how to use them. VS Code Packages - Present to the class 3 useful and under utilized packages for VS Code. Class 6 - How do you learn to learn? Teach your class strategies to learn more and faster. Check out ultra-learning for a start. 5 Node commands that haven't been covered so far. Class 7 - Teach the class 3 Useful Git commands that haven't been learned yet. Explain how to use the debugging tool in VS Code and how to debug code with it Class 8 - Explain and demonstrate to your fellow students 1) Template Literals in ES6 and 2) What and how to use Multi-line Strings in ES6 Explain and demonstrate to your classmates 1) what and how to use the Destructuring Assignment in ES6 and 2) what and how to use Classes in ES6 Class 9 - Explain and demonstrate to your fellow classmates 1) the Block-Scoped constructs let and const. Why were they created and how do we use them? As well as, 2) Default Parameters in ES6 Describe to the class 1) what function overloading is in class in JavaScript? 2) How to empty an array in JavaScript? Class 10 - For Mac Users : Introduce to the class, iterm and why it's a fun and useful terminal replacement. Offer to the class 3 beginner friendly tips and 3 beginner friendly configurations. If you've already discussed iterm in class, offer to your classmates 5 new configurations to improve yours and their workflow. For Window Users : Introduce ConEmu and why it's a fun and useful terminal replacement. Offer to the class 3 beginner friendly tips and 3 beginner friendly configurations. If you've already discussed ConEmu in class, offer to your classmates 5 new configurations to improve yours and their workflow. Explain to the class what is Node. What are Node Modules? What is npm used for? Why do we need to use npm and node? How do you import a Node module into a project? Class 11 - Introduce and interest people in the event loop in Javascript.What the heap and stack about? Bring to the class an example of an async function with await variables. What do they do? Why would we use them and how do we use them? Class 12 - All Students: In 2 minutes, pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? Class 13 - Class 14 - Class 15 - Class 16 -","title":"Student Presentations"},{"location":"additionalResources/studentPresentations/#daily-student-presentations","text":"Class 1 - Organize and Coordinate who and when students are presenting. Class 2 - 33% of students: In 4 minutes, pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? Class 3 - 33% of students: In 4 minutes, pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? Class 4 - 33% of students: In 4 minutes, pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? Class 5 - VS Code Short-Cuts - Present to the class 7 short-cuts, why and how to use them. VS Code Packages - Present to the class 3 useful and under utilized packages for VS Code. Class 6 - How do you learn to learn? Teach your class strategies to learn more and faster. Check out ultra-learning for a start. 5 Node commands that haven't been covered so far. Class 7 - Teach the class 3 Useful Git commands that haven't been learned yet. Explain how to use the debugging tool in VS Code and how to debug code with it Class 8 - Explain and demonstrate to your fellow students 1) Template Literals in ES6 and 2) What and how to use Multi-line Strings in ES6 Explain and demonstrate to your classmates 1) what and how to use the Destructuring Assignment in ES6 and 2) what and how to use Classes in ES6 Class 9 - Explain and demonstrate to your fellow classmates 1) the Block-Scoped constructs let and const. Why were they created and how do we use them? As well as, 2) Default Parameters in ES6 Describe to the class 1) what function overloading is in class in JavaScript? 2) How to empty an array in JavaScript? Class 10 - For Mac Users : Introduce to the class, iterm and why it's a fun and useful terminal replacement. Offer to the class 3 beginner friendly tips and 3 beginner friendly configurations. If you've already discussed iterm in class, offer to your classmates 5 new configurations to improve yours and their workflow. For Window Users : Introduce ConEmu and why it's a fun and useful terminal replacement. Offer to the class 3 beginner friendly tips and 3 beginner friendly configurations. If you've already discussed ConEmu in class, offer to your classmates 5 new configurations to improve yours and their workflow. Explain to the class what is Node. What are Node Modules? What is npm used for? Why do we need to use npm and node? How do you import a Node module into a project? Class 11 - Introduce and interest people in the event loop in Javascript.What the heap and stack about? Bring to the class an example of an async function with await variables. What do they do? Why would we use them and how do we use them? Class 12 - All Students: In 2 minutes, pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? Class 13 - Class 14 - Class 15 - Class 16 -","title":"Daily Student Presentations"},{"location":"additionalResources/blogPrompts/blogPrompt-201/","text":"Blog Prompt 201 Describe one thing you're learning in class today. What is the difference between == and === ? What is the value of foo? var foo = 10 + '20'; Describe what a terminal application is. What is the ternary operator? What are some ways to ensure that your website design or web application is accessible and user-friendly? What are your favorite features of HTML5, and how have you implemented them in your front-end development projects? How do you structure your CSS and JavaScript to make it easier for other developers to work with? What's your process for addressing browser-specific rendering problems? Do you find that a certain browser is more challenging to work with than others? Important - Remember, you will be graded for the completion of your blog but also this will be a place you can return to when preparing for interviews in a few months! - When publishing your blogs, make sure you \"@AustinCodingAcademy\" and tag \"Coding\" and \"Web Development\" in your story.","title":"Prompt 201"},{"location":"additionalResources/blogPrompts/blogPrompt-201/#blog-prompt-201","text":"Describe one thing you're learning in class today. What is the difference between == and === ? What is the value of foo? var foo = 10 + '20'; Describe what a terminal application is. What is the ternary operator? What are some ways to ensure that your website design or web application is accessible and user-friendly? What are your favorite features of HTML5, and how have you implemented them in your front-end development projects? How do you structure your CSS and JavaScript to make it easier for other developers to work with? What's your process for addressing browser-specific rendering problems? Do you find that a certain browser is more challenging to work with than others? Important - Remember, you will be graded for the completion of your blog but also this will be a place you can return to when preparing for interviews in a few months! - When publishing your blogs, make sure you \"@AustinCodingAcademy\" and tag \"Coding\" and \"Web Development\" in your story.","title":"Blog Prompt 201"},{"location":"additionalResources/questionsForDiscussion/qfd-class-1/","text":"Class One - Questions for Discussion Explain Flipped classroom vs Traditional classroom? What are the Questions for Discussion meant for? How do you think they should be handled? How would a successful student work through pre-lesson homework? If you\u2019re planning to be a developer after this program, how would you approach class time? Failure to complete the pre-lesson homework outside of class will lead to failure in the class. True or false? When you don\u2019t know a term mentioned in the Pre-Lesson homework what should you do? Explain these tools and how we use them: Browser DevTools The Cloud GUI IDE/Text editor Terminal/CLI/Command line emulator Review. What is a: Data stream Loop Do you know anything about these languages? Dart Erlang Cobol C C++ What do each of these commands do? What are they used for? git clone git status git add -A git commit -m \"fixed auth problem git push ls pwd or echo %cd% cd devFolder touch index.js mkdir pantheon npm i node index.js Are any of these terms confusing? runtime environment Compiled Critical thinking Open-source Dependencies/packages JSON - JavaScript Object Notation Function signatures Function declaration Function invocation Function parameters Function arguments Executed/called/invoked Token Data type Keyword/reserved word Type coercion \"Truthy\" \"Falsey\" Node question.Does anyone know what the package.json is used for? What is a variable? Why is it used? What is a function? How do we declare one in JS? How do we invoke one in JS? What is a conditional statement? What operators can you remember? What data types can you remember? What is a data type? What is a built-in method? How do we use them? Give an example. Why do your variables have to be above your function invocation? Why do we write 'use strict' at the top of every JS project? How and why do we write comments in JS code? Why is JavaScript important for web developers? Are there any alternatives? Write on the board or in chat the symbol for each of these: Modulus Operator Bang Operator Less-Than Operator Greater Than Operator Assignment operator Identity operator And Operator Or operator Object-Literal Syntax Array Syntax How do you: Invoke a function/call a function Declare a function Pass in arguments","title":"Day 1 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-1/#class-one-questions-for-discussion","text":"Explain Flipped classroom vs Traditional classroom? What are the Questions for Discussion meant for? How do you think they should be handled? How would a successful student work through pre-lesson homework? If you\u2019re planning to be a developer after this program, how would you approach class time? Failure to complete the pre-lesson homework outside of class will lead to failure in the class. True or false? When you don\u2019t know a term mentioned in the Pre-Lesson homework what should you do? Explain these tools and how we use them: Browser DevTools The Cloud GUI IDE/Text editor Terminal/CLI/Command line emulator Review. What is a: Data stream Loop Do you know anything about these languages? Dart Erlang Cobol C C++ What do each of these commands do? What are they used for? git clone git status git add -A git commit -m \"fixed auth problem git push ls pwd or echo %cd% cd devFolder touch index.js mkdir pantheon npm i node index.js Are any of these terms confusing? runtime environment Compiled Critical thinking Open-source Dependencies/packages JSON - JavaScript Object Notation Function signatures Function declaration Function invocation Function parameters Function arguments Executed/called/invoked Token Data type Keyword/reserved word Type coercion \"Truthy\" \"Falsey\" Node question.Does anyone know what the package.json is used for? What is a variable? Why is it used? What is a function? How do we declare one in JS? How do we invoke one in JS? What is a conditional statement? What operators can you remember? What data types can you remember? What is a data type? What is a built-in method? How do we use them? Give an example. Why do your variables have to be above your function invocation? Why do we write 'use strict' at the top of every JS project? How and why do we write comments in JS code? Why is JavaScript important for web developers? Are there any alternatives? Write on the board or in chat the symbol for each of these: Modulus Operator Bang Operator Less-Than Operator Greater Than Operator Assignment operator Identity operator And Operator Or operator Object-Literal Syntax Array Syntax How do you: Invoke a function/call a function Declare a function Pass in arguments","title":"Class One - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-2/","text":"Class 2 - Questions For Discussion Double-ampersand Double-pipes Operands Template literals Alternative operation Else statements If evaluation If block Else block Switch statements Ternary operator parseInt() Math.random() What is a conditional and why are they so important? What is the difference between an if/then statement and a switch statement? Explain how to use truthy and falsy. Watch this whiteboarding video . What are we doing before we code?","title":"Day 2 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-2/#class-2-questions-for-discussion","text":"Double-ampersand Double-pipes Operands Template literals Alternative operation Else statements If evaluation If block Else block Switch statements Ternary operator parseInt() Math.random() What is a conditional and why are they so important? What is the difference between an if/then statement and a switch statement? Explain how to use truthy and falsy. Watch this whiteboarding video . What are we doing before we code?","title":"Class 2 - Questions For Discussion"},{"location":"module-1/class-1/","text":"Class 1: JavaScript Review The way to get started is to quit talking and begin doing.\u2003\u2014Walt Disney Greet, Outline, and Objectify Since we don't know each other, at least, not your instructor, everyone should answer these questions aloud: Hi, my name is ... I currently work as a ... but I love to spend my time ... I'm excited about learning to program because ... My best time to do a study group or tutoring is ... (example: Mondays in the afternoon.) Today we're going to: Review and reinforce our understanding of the JavaScript language by building and running an application within the Node runtime environment Introductions - 15 mins Explain and assign Daily Student Presentations - 10 mins Questions for Discussion - 20 mins Instructor led overview of the ebook - 15 mins: Course Objective Course Structure & Expectations Graduation and Presentation Requirements Capstone Project Presentation Guidelines Utility of Git commands Part One: Solutions - 30 mins Part Two: The DOM - 30 mins Push Yourself Further - 15 mins Daily Student Presentations Overview and Organization While learning to code is pretty important if you want to code for work, so is learning to talk about code! To do this, you must first know something about code. Secondly, you have to know something about talking to people in one-on-one chats, group conversations and team presentations. This is a necessary skill and will be a major part of your future interviews. To get us all prepped and ready to talk about our code, we're going to be practicing talking to the class about shortcuts and tool efficiency. It's one thing to know how to code and it's another to know how to use your computer's keyboard, text editor and terminal well. Wow your interviewers with your sharp fingers and grow your class's skill with these presentations! Today we will assign people to the remaining days of class to present for 5-7 minutes ONLY, at the beginning of class, on the pre-assigned topic. All student presentation topics are listed here . Take the time now to select, plan, and record what day you're presenting. Next class one-third of the class will give a four-minute pitch of their planned Capstone App they intend to build by the end of 411. Prompt Pitch your Capstone App to the class. What\u2019s the problem? How does this app solve it? Through the next week the other two-thirds of the class will follow suit and present a four-minute pitch over their Capstone App!! Questions for Student Led Discussion, 10-15 minutes What is a Capstone App? Why do we need one? Why are we starting to pitch about them now? What are you struggling to understand about JavaScript, Node, or anything else? More questions here Creation Time, 60-90 minutes Let's take a look at the JS211-CurrentDate Repo Did anyone not finish it? Let's walk through it one by one starting from the package.json file. Did anyone not get it pushed up to their gitHub account? Use your knowledge of HTML and CSS to bring the functionality of these code blocks to the DOM Go to the index.html file and see how the file is connected to main.js. Follow the pattern to bring your JavaScript solutions to the DOM for a user to see visually. git status git add main.js index.html git status git commit -m \"Solutions are fixed and showing in the DOM\" git push Turn the URL of this this repo in to be graded. Push Yourself Further Try to complete this repl.it Additional Resources Video - How to Display Date and Time Video - JavaScript for Beginners Video - JS211 - Class Work Exit Recap, Attendance, and Reminders, 5 mins Create assignment for \"CurrentDate&Time\" Do your pre-lessons before next class!","title":"Class 1"},{"location":"module-1/class-1/#class-1-javascript-review","text":"The way to get started is to quit talking and begin doing.\u2003\u2014Walt Disney","title":"Class 1: JavaScript Review"},{"location":"module-1/class-1/#greet-outline-and-objectify","text":"Since we don't know each other, at least, not your instructor, everyone should answer these questions aloud: Hi, my name is ... I currently work as a ... but I love to spend my time ... I'm excited about learning to program because ... My best time to do a study group or tutoring is ... (example: Mondays in the afternoon.) Today we're going to: Review and reinforce our understanding of the JavaScript language by building and running an application within the Node runtime environment Introductions - 15 mins Explain and assign Daily Student Presentations - 10 mins Questions for Discussion - 20 mins Instructor led overview of the ebook - 15 mins: Course Objective Course Structure & Expectations Graduation and Presentation Requirements Capstone Project Presentation Guidelines Utility of Git commands Part One: Solutions - 30 mins Part Two: The DOM - 30 mins Push Yourself Further - 15 mins","title":"Greet, Outline, and Objectify"},{"location":"module-1/class-1/#daily-student-presentations-overview-and-organization","text":"While learning to code is pretty important if you want to code for work, so is learning to talk about code! To do this, you must first know something about code. Secondly, you have to know something about talking to people in one-on-one chats, group conversations and team presentations. This is a necessary skill and will be a major part of your future interviews. To get us all prepped and ready to talk about our code, we're going to be practicing talking to the class about shortcuts and tool efficiency. It's one thing to know how to code and it's another to know how to use your computer's keyboard, text editor and terminal well. Wow your interviewers with your sharp fingers and grow your class's skill with these presentations! Today we will assign people to the remaining days of class to present for 5-7 minutes ONLY, at the beginning of class, on the pre-assigned topic. All student presentation topics are listed here . Take the time now to select, plan, and record what day you're presenting. Next class one-third of the class will give a four-minute pitch of their planned Capstone App they intend to build by the end of 411. Prompt Pitch your Capstone App to the class. What\u2019s the problem? How does this app solve it? Through the next week the other two-thirds of the class will follow suit and present a four-minute pitch over their Capstone App!!","title":"Daily Student Presentations Overview and Organization"},{"location":"module-1/class-1/#questions-for-student-led-discussion-10-15-minutes","text":"What is a Capstone App? Why do we need one? Why are we starting to pitch about them now? What are you struggling to understand about JavaScript, Node, or anything else? More questions here","title":"Questions for Student Led Discussion, 10-15 minutes"},{"location":"module-1/class-1/#creation-time-60-90-minutes","text":"Let's take a look at the JS211-CurrentDate Repo Did anyone not finish it? Let's walk through it one by one starting from the package.json file. Did anyone not get it pushed up to their gitHub account? Use your knowledge of HTML and CSS to bring the functionality of these code blocks to the DOM Go to the index.html file and see how the file is connected to main.js. Follow the pattern to bring your JavaScript solutions to the DOM for a user to see visually. git status git add main.js index.html git status git commit -m \"Solutions are fixed and showing in the DOM\" git push Turn the URL of this this repo in to be graded.","title":"Creation Time, 60-90 minutes"},{"location":"module-1/class-1/#push-yourself-further","text":"Try to complete this repl.it","title":"Push Yourself Further"},{"location":"module-1/class-1/#additional-resources","text":"Video - How to Display Date and Time Video - JavaScript for Beginners Video - JS211 - Class Work","title":"Additional Resources"},{"location":"module-1/class-1/#exit-recap-attendance-and-reminders-5-mins","text":"Create assignment for \"CurrentDate&Time\" Do your pre-lessons before next class!","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-1/class-2/","text":"Class 2: Rock, Paper, Scissors The pessimist sees difficulty in every opportunity. The optimist sees opportunity in every difficulty. \u2014Winston Churchill Greet, Outline, and Objectify Today we're going to: GENERIC OBJECTIVE: Understand the use of logic gates by applying their understanding of them to build a Rock, Paper, Scissors game. Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Project: R.P.S. - 70 mins Fork & Clone the RPS Repo Ensure you have installed all dependencies/packages: npm install Instructor covers the package.json and what the \"scripts\": and \"test\": objects are. Ensure you know how to run tests for each program: npm test main.js Whiteboard a solution to building a Rock, Paper, Scissors program Translate the broad ideas to pseudo code Convert the pseudo code to real JavaScript code Type into your text editor the JavaScript code you've come up with one step at a time Work through your bugs Achieve green checks for each of your unit tests Push Yourself Further Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 10-15 minutes Why do we need conditional statements? What are you struggling with so far? More questions to prompt discussion can be found here . Interview Challenge, 10-15 minutes Restate the question aloud. Write the question out at the top of the whiteboard. Ask any clarifying questions you need. Invoke the function and write out the expected output given the sample input. If none is given, make it up. Write out a code plan to the side of the whiteboard. Speak aloud every thought you have. THIS IS THE MOST IMPORTANT PART! Build the structure of your function(s). Slowly work through your code plan building the steps you need. Don't be afraid to mess up and say it aloud. It's not about finding the solution. It's about collaborating and working toward a solution! After you finish, take a picture and transfer it to a Repl.it when you get home. PROMPT: Hourglasses Puzzle - How do you measure 9 minutes from a 4 minute hourglass and a 7 minute hourglass? We have only 2 sand timers: 4 minutes and 7 minutes but we need to measure 9 minutes. How do we do it? Student Presentations, 10-15 minutes See Student Presentations List Creation Time, 60-90 minutes Your first terminal application!! YAY!! Today, you're going to build a function, or two, that will take in an input from a user then another input from another user and compare them against one another to determine the winner of the game! Fork & Clone the RPS Repo then follow the README.md file. User1 input of rock, paper, or scissors. User2 input of rock, paper, or scissors. Compare User1 input to User2 input. If User1 input is 'rock' and User2 input is 'scissors', User1 wins. If User1 input is 'rock' and User2 input is 'paper', User2 wins. If User1 input is 'rock' and User2 input is 'rock', it's a tie. If User1 input is 'paper' and User2 input is 'rock', User1 wins. If User1 input is 'paper' and User2 input is 'scissors', User2 wins. If User1 input is 'paper' and User2 input is 'paper', it's a tie. If User1 input is 'scissors' and User2 input is 'paper', User1 wins. If User1 input is 'scissors' and User2 input is 'rock', User2 wins. If User1 input is 'scissors' and User2 input is 'scissors', it's a tie. Can you think of a simpler way? Where are you going to clone this project to? What directory? Additional Resources Push Yourself Further What should the program return if the user inputs something that isn't \"rock\", \"paper\", or \"scissors\"? Can you use .trim() to solve the problem if a user types in a space with their input? Minimize redundancy: D.R.Y. up your code. Are their ways to not type as much as you've typed? Can you make the code smaller? Compartmentalize your code into individual functions. This game doesn't have to run just one function. Can you pull code blocks out and put them into other functions that can be called from rockPaperScissors ? Blog, to Show You Know Every other class will end with a discussion over these questions. If you have no idea about them, ask your instructor. Nevertheless, you will need to research the topics on your own and record what you learned in a blog. You will then turn in a link with the url of the published blog in Zollege. Feel free to copy/paste the question into google and read about what comes up. These interview questions are meant to broaden your knowledge and cover more ground than we can possibly get to in these few weeks. We want you to be well prepared for the rigors of interviewing for development jobs and knowing the answers to these questions will ensure that you have every tool you need to succeed! Exit Recap, Attendance, and Reminders, 5 mins Create RPS Assignment Create 201 Blog Assignment Prepare for Class 3 by completing all of your pre-class lessons Complete the feedback survey Browser not compatible.","title":"Class 2 RPS"},{"location":"module-1/class-2/#class-2-rock-paper-scissors","text":"The pessimist sees difficulty in every opportunity. The optimist sees opportunity in every difficulty. \u2014Winston Churchill","title":"Class 2: Rock, Paper, Scissors"},{"location":"module-1/class-2/#greet-outline-and-objectify","text":"Today we're going to: GENERIC OBJECTIVE: Understand the use of logic gates by applying their understanding of them to build a Rock, Paper, Scissors game. Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Project: R.P.S. - 70 mins Fork & Clone the RPS Repo Ensure you have installed all dependencies/packages: npm install Instructor covers the package.json and what the \"scripts\": and \"test\": objects are. Ensure you know how to run tests for each program: npm test main.js Whiteboard a solution to building a Rock, Paper, Scissors program Translate the broad ideas to pseudo code Convert the pseudo code to real JavaScript code Type into your text editor the JavaScript code you've come up with one step at a time Work through your bugs Achieve green checks for each of your unit tests Push Yourself Further Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-1/class-2/#questions-for-student-led-discussion-10-15-minutes","text":"Why do we need conditional statements? What are you struggling with so far? More questions to prompt discussion can be found here .","title":"Questions for Student Led Discussion, 10-15 minutes"},{"location":"module-1/class-2/#interview-challenge-10-15-minutes","text":"Restate the question aloud. Write the question out at the top of the whiteboard. Ask any clarifying questions you need. Invoke the function and write out the expected output given the sample input. If none is given, make it up. Write out a code plan to the side of the whiteboard. Speak aloud every thought you have. THIS IS THE MOST IMPORTANT PART! Build the structure of your function(s). Slowly work through your code plan building the steps you need. Don't be afraid to mess up and say it aloud. It's not about finding the solution. It's about collaborating and working toward a solution! After you finish, take a picture and transfer it to a Repl.it when you get home. PROMPT: Hourglasses Puzzle - How do you measure 9 minutes from a 4 minute hourglass and a 7 minute hourglass? We have only 2 sand timers: 4 minutes and 7 minutes but we need to measure 9 minutes. How do we do it?","title":"Interview Challenge, 10-15 minutes"},{"location":"module-1/class-2/#student-presentations-10-15-minutes","text":"See Student Presentations List","title":"Student Presentations, 10-15 minutes"},{"location":"module-1/class-2/#creation-time-60-90-minutes","text":"Your first terminal application!! YAY!! Today, you're going to build a function, or two, that will take in an input from a user then another input from another user and compare them against one another to determine the winner of the game! Fork & Clone the RPS Repo then follow the README.md file. User1 input of rock, paper, or scissors. User2 input of rock, paper, or scissors. Compare User1 input to User2 input. If User1 input is 'rock' and User2 input is 'scissors', User1 wins. If User1 input is 'rock' and User2 input is 'paper', User2 wins. If User1 input is 'rock' and User2 input is 'rock', it's a tie. If User1 input is 'paper' and User2 input is 'rock', User1 wins. If User1 input is 'paper' and User2 input is 'scissors', User2 wins. If User1 input is 'paper' and User2 input is 'paper', it's a tie. If User1 input is 'scissors' and User2 input is 'paper', User1 wins. If User1 input is 'scissors' and User2 input is 'rock', User2 wins. If User1 input is 'scissors' and User2 input is 'scissors', it's a tie. Can you think of a simpler way? Where are you going to clone this project to? What directory?","title":"Creation Time, 60-90 minutes"},{"location":"module-1/class-2/#additional-resources","text":"","title":"Additional Resources"},{"location":"module-1/class-2/#push-yourself-further","text":"What should the program return if the user inputs something that isn't \"rock\", \"paper\", or \"scissors\"? Can you use .trim() to solve the problem if a user types in a space with their input? Minimize redundancy: D.R.Y. up your code. Are their ways to not type as much as you've typed? Can you make the code smaller? Compartmentalize your code into individual functions. This game doesn't have to run just one function. Can you pull code blocks out and put them into other functions that can be called from rockPaperScissors ?","title":"Push Yourself Further"},{"location":"module-1/class-2/#blog-to-show-you-know","text":"Every other class will end with a discussion over these questions. If you have no idea about them, ask your instructor. Nevertheless, you will need to research the topics on your own and record what you learned in a blog. You will then turn in a link with the url of the published blog in Zollege. Feel free to copy/paste the question into google and read about what comes up. These interview questions are meant to broaden your knowledge and cover more ground than we can possibly get to in these few weeks. We want you to be well prepared for the rigors of interviewing for development jobs and knowing the answers to these questions will ensure that you have every tool you need to succeed!","title":"Blog, to Show You Know"},{"location":"module-1/class-2/#exit-recap-attendance-and-reminders-5-mins","text":"Create RPS Assignment Create 201 Blog Assignment Prepare for Class 3 by completing all of your pre-class lessons Complete the feedback survey Browser not compatible.","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-1/conditionals/","text":"Subject Acknowledging the good that you already have in your life is the foundation for all abundance.\u2003\u2014Eckhart Tolle Function Signatures Review Intro to Conditionals Why Conditionals Just like we saw in our pre-work, we can compare data and return the results. Using conditionals within functions we can return or do something entirely different based on the results of the comparison. Check it out! If we asked our friend Dave to check on two buckets that are catching water from a leaky roof: \"Dave, could you check bucket \"x\" and \"y\"? If \"x\" is more full dump it out, else, dump out \"y\" and tell me how much is in each bucket afterwards. Translated into JavaScript it would look like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 const bucketX = 18 const bucketY = 20 // declare a function that takes in two parameters (buckets of water) const checkWater = ( x , y ) => { // compare the two values if ( x > y ) { // if x is greater, set x to equal 0 x = 0 } else { // else, if y is greater, set y to equal 0 y = 0 } // return the values to us. return \"the value of x is: \" + x + \" and the value of y is: \" + y } // invoke the function and pass the two arguments checkWater ( bucketX , bucketY ) RUN IT! Copy/paste this code in a new Repl.it and play with it for yourself! How Conditionals To use conditionals, we simply put them into a conditional statement like an if/else statement that asks \"Is this comparison true or false ?\". Example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 if ( 6 === 6 ) { return \"yes six equals six.\" } else { return \"Nope, those are not equal.\" } // if we ran the code block we would get a return of \"yes six equals six.\" because, of course, 6 does equal 6. if ( 6 === 7 ) { return \"yes six equals six.\" } else { return \"Nope, those are not equal.\" } // But if we ran this code block we would get: \"Nope, those are not equal.\" You see, an if/else statement asks if a condition is true and, if so, do the first thing, else do the second thing. More Conditional Demos An if/else statement will run a block of code if what we evaluate in the evaluation parentheses evaluates to truthy; else do what's in the else statement. Below we see the double-pipes to see if either of the operands is truthy. Literally: is input1 or input2 truthy? 1 2 3 4 5 6 7 8 const input1 = 88 ; // truthy const input2 = 0 ; // falsey if ( input1 || input2 ) { return true } else { return false } // return true And here we see that we can use the double-ampersand to ask if BOTH input1 and input2 are truthy. 1 2 3 4 5 6 7 8 const input1 = 'hello' ; // truthy const input2 = null ; // falsey if ( input1 && input2 ) { return true } else { return false } // returns false Let's use our typeof operator: The if statement performs a specified operation if the condition you provide is \"truthy\" . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 const name = 'jerry' ; const number = 10 if ( typeof name === string ) { console . log ( ` ${ name } is a string.` ); } else { return false } // will return false if ( typeof name === number ) { console . log ( ` ${ name } is a string.` ); } else { return false } Above we see the use of template literals as in: ${name} is a string . This is just a simple way to add values of constants with strings like: \"is a string.\" We could use concatenation like this: name + \" is a string\" , but it's much easier to use template literals. For now, you can do whichever is easier for you. If the condition is \"falsey\" , an alternative operation can be specified with an optional else clause . 1 2 3 4 5 6 7 const name = 'elaine' ; if ( typeof name === string ) { console . log ( `The type of 'name' - ${ name } - is a string.` ); } else { console . log ( `'name' is not a string - it is a ${ typeof name } ` ); } Multiple else statements : You can also provide one or more alternatives that perform conditional evaluations using else if : 1 2 3 4 5 6 7 8 9 10 // this is a handy way to get a random whole number const number = parseInt ( Math . random () * 100 , 10 ); if ( number < 10 ) { console . log ( `The 'number' - ${ number } - is less than 10.` ); } else if ( number > 11 && number < 20 ) { console . log ( `The 'number' - ${ number } - is less than 20, but greater than 11.` ); } else { console . log ( `The 'number' - ${ number } - is greater than 20, but less than 100.` ); } Above we see the use of parseInt() which is a built-in method in JS we can use whenever we need a whole number. We also see Math and .random() which generates a random decimal number. Go to the MDN docs on parseInt() and Math.random() and explain the following: Why do you think we multiply it by 100? Can you explain why number is always going to be less than 100? Also, what does the 10 being passed to parseInt do? Alternatives to Conditional Statements Switch Statement (optional alternative to if/else) Switch statements can sometimes be used to more concisely express conditional operations. A switch statement is used if you are only evaluating the value of one constant. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 const numbers = [ 1 , 2 , 3 , 4 , 5 ]; const randomIndex = parseInt (( Math . random () * 10 / 2 ), 10 ); const randomNumber = numbers [ randomIndex ]; switch ( randomNumber ) { case 1 : console . log ( `The value at randomIndex ${ randomIndex } is 1: ${ randomNumber } ` ); break ; case 2 : console . log ( `The value at randomIndex ${ randomIndex } is 2: ${ randomNumber } ` ); break ; case 3 : console . log ( `The value at randomIndex ${ randomIndex } is 3: ${ randomNumber } ` ); break ; default : // Statements executed when none of the cases match the switch expression console . log ( `The value at randomIndex ${ randomIndex } is 4 or more: ${ randomNumber } ` ) break ; } Ternary (another alternative to if/else) Ternary Operators ? / : can be used as a shorthand for if / else statements: 1 2 3 4 5 6 7 const randomNumber = parseInt ( Math . random () * 10 , 10 ); const isEvenOrOdd = ( number ) => { return number % 2 === 0 ? `even: ${ number } ` : `odd: ${ number } ` } isEvenOrOdd ( randomNumber ) They look a little strange at first, but it helps to think of the entire expression as an oddly-punctuated question-and-answer: 1 2 3 4 5 6 7 8 // is the remainder of 'evenOrOdd' \u00f7 2 equal to Zero ? <--- `if` return number % 2 === 0 // if so, return 'even:' along with the value : <--- `then return` ? `even: ${ number } ` // otherwise, return 'odd:' along with the value. <--- `else return` : `odd: ${ number } ` Note that the placement of the operators ? / : at the beginning or end of the line doesn't affect the validity of the expression\u2014either way, it will be executed. For that matter, you can write it all on the same line. However, for the sake of readability, it is recommended that you break the operations onto separate lines, with the operators at the beginning of each separate line : 1 2 3 4 5 6 7 8 9 const randomNumber = parseInt ( Math . random () * 10 , 10 ); const isEvenOrOdd = ( number ) => { return number % 2 === 0 ? `even: ${ number } ` : `odd: ${ number } ` } isEvenOrOdd ( randomNumber ) Formatted like so, it is easy to quickly scan your eyes along the left side of the code and see a ternary expression . This might sound frivolous and nitpicky, but bear in mind that one stylistic downside of using ternary expressions is readability (or lack thereof). They might be more elegant than if / else statements, but they're not always as recognizable at a glance. So use discretion when using them. Practice It - Conditionals For each of the following, create a new Repl.it called the title you see in bold and also name the function the same as the title. Then copy/paste the prompt at the top with the \"//\" so you'll have the challenge right there for you to reference. //sumOfTwoNums - write a function that returns the sum of two numbers if both arguments are numbers. //bothTrue - write a function that returns 'both are true' if both arguments are true. //checkStrings - write a function that takes 3 parameters and if all 3 parameters are strings, return true //evaluateMonth - write a switch statement that evaluates a variable month, and for each of the 12 months, returns the number of days in that month. 1 2 3 4 5 6 7 8 9 10 11 // starter code const evaluateMonth = ( month ) => { switch ( month ) { case 'day' : case 'Jan' : { return 31 } default : return '45' } } Know Your Docs MDN Docs - ...","title":"Conditionals"},{"location":"module-1/conditionals/#subject","text":"Acknowledging the good that you already have in your life is the foundation for all abundance.\u2003\u2014Eckhart Tolle","title":"Subject"},{"location":"module-1/conditionals/#function-signatures-review","text":"","title":"Function Signatures Review"},{"location":"module-1/conditionals/#intro-to-conditionals","text":"","title":"Intro to Conditionals"},{"location":"module-1/conditionals/#why-conditionals","text":"Just like we saw in our pre-work, we can compare data and return the results. Using conditionals within functions we can return or do something entirely different based on the results of the comparison. Check it out! If we asked our friend Dave to check on two buckets that are catching water from a leaky roof: \"Dave, could you check bucket \"x\" and \"y\"? If \"x\" is more full dump it out, else, dump out \"y\" and tell me how much is in each bucket afterwards. Translated into JavaScript it would look like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 const bucketX = 18 const bucketY = 20 // declare a function that takes in two parameters (buckets of water) const checkWater = ( x , y ) => { // compare the two values if ( x > y ) { // if x is greater, set x to equal 0 x = 0 } else { // else, if y is greater, set y to equal 0 y = 0 } // return the values to us. return \"the value of x is: \" + x + \" and the value of y is: \" + y } // invoke the function and pass the two arguments checkWater ( bucketX , bucketY ) RUN IT! Copy/paste this code in a new Repl.it and play with it for yourself!","title":"Why Conditionals"},{"location":"module-1/conditionals/#how-conditionals","text":"To use conditionals, we simply put them into a conditional statement like an if/else statement that asks \"Is this comparison true or false ?\". Example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 if ( 6 === 6 ) { return \"yes six equals six.\" } else { return \"Nope, those are not equal.\" } // if we ran the code block we would get a return of \"yes six equals six.\" because, of course, 6 does equal 6. if ( 6 === 7 ) { return \"yes six equals six.\" } else { return \"Nope, those are not equal.\" } // But if we ran this code block we would get: \"Nope, those are not equal.\" You see, an if/else statement asks if a condition is true and, if so, do the first thing, else do the second thing.","title":"How Conditionals"},{"location":"module-1/conditionals/#more-conditional-demos","text":"An if/else statement will run a block of code if what we evaluate in the evaluation parentheses evaluates to truthy; else do what's in the else statement. Below we see the double-pipes to see if either of the operands is truthy. Literally: is input1 or input2 truthy? 1 2 3 4 5 6 7 8 const input1 = 88 ; // truthy const input2 = 0 ; // falsey if ( input1 || input2 ) { return true } else { return false } // return true And here we see that we can use the double-ampersand to ask if BOTH input1 and input2 are truthy. 1 2 3 4 5 6 7 8 const input1 = 'hello' ; // truthy const input2 = null ; // falsey if ( input1 && input2 ) { return true } else { return false } // returns false Let's use our typeof operator: The if statement performs a specified operation if the condition you provide is \"truthy\" . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 const name = 'jerry' ; const number = 10 if ( typeof name === string ) { console . log ( ` ${ name } is a string.` ); } else { return false } // will return false if ( typeof name === number ) { console . log ( ` ${ name } is a string.` ); } else { return false } Above we see the use of template literals as in: ${name} is a string . This is just a simple way to add values of constants with strings like: \"is a string.\" We could use concatenation like this: name + \" is a string\" , but it's much easier to use template literals. For now, you can do whichever is easier for you. If the condition is \"falsey\" , an alternative operation can be specified with an optional else clause . 1 2 3 4 5 6 7 const name = 'elaine' ; if ( typeof name === string ) { console . log ( `The type of 'name' - ${ name } - is a string.` ); } else { console . log ( `'name' is not a string - it is a ${ typeof name } ` ); } Multiple else statements : You can also provide one or more alternatives that perform conditional evaluations using else if : 1 2 3 4 5 6 7 8 9 10 // this is a handy way to get a random whole number const number = parseInt ( Math . random () * 100 , 10 ); if ( number < 10 ) { console . log ( `The 'number' - ${ number } - is less than 10.` ); } else if ( number > 11 && number < 20 ) { console . log ( `The 'number' - ${ number } - is less than 20, but greater than 11.` ); } else { console . log ( `The 'number' - ${ number } - is greater than 20, but less than 100.` ); } Above we see the use of parseInt() which is a built-in method in JS we can use whenever we need a whole number. We also see Math and .random() which generates a random decimal number. Go to the MDN docs on parseInt() and Math.random() and explain the following: Why do you think we multiply it by 100? Can you explain why number is always going to be less than 100? Also, what does the 10 being passed to parseInt do?","title":"More Conditional Demos"},{"location":"module-1/conditionals/#alternatives-to-conditional-statements","text":"","title":"Alternatives to Conditional Statements"},{"location":"module-1/conditionals/#switch-statement-optional-alternative-to-ifelse","text":"Switch statements can sometimes be used to more concisely express conditional operations. A switch statement is used if you are only evaluating the value of one constant. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 const numbers = [ 1 , 2 , 3 , 4 , 5 ]; const randomIndex = parseInt (( Math . random () * 10 / 2 ), 10 ); const randomNumber = numbers [ randomIndex ]; switch ( randomNumber ) { case 1 : console . log ( `The value at randomIndex ${ randomIndex } is 1: ${ randomNumber } ` ); break ; case 2 : console . log ( `The value at randomIndex ${ randomIndex } is 2: ${ randomNumber } ` ); break ; case 3 : console . log ( `The value at randomIndex ${ randomIndex } is 3: ${ randomNumber } ` ); break ; default : // Statements executed when none of the cases match the switch expression console . log ( `The value at randomIndex ${ randomIndex } is 4 or more: ${ randomNumber } ` ) break ; }","title":"Switch Statement (optional alternative to if/else)"},{"location":"module-1/conditionals/#ternary-another-alternative-to-ifelse","text":"Ternary Operators ? / : can be used as a shorthand for if / else statements: 1 2 3 4 5 6 7 const randomNumber = parseInt ( Math . random () * 10 , 10 ); const isEvenOrOdd = ( number ) => { return number % 2 === 0 ? `even: ${ number } ` : `odd: ${ number } ` } isEvenOrOdd ( randomNumber ) They look a little strange at first, but it helps to think of the entire expression as an oddly-punctuated question-and-answer: 1 2 3 4 5 6 7 8 // is the remainder of 'evenOrOdd' \u00f7 2 equal to Zero ? <--- `if` return number % 2 === 0 // if so, return 'even:' along with the value : <--- `then return` ? `even: ${ number } ` // otherwise, return 'odd:' along with the value. <--- `else return` : `odd: ${ number } ` Note that the placement of the operators ? / : at the beginning or end of the line doesn't affect the validity of the expression\u2014either way, it will be executed. For that matter, you can write it all on the same line. However, for the sake of readability, it is recommended that you break the operations onto separate lines, with the operators at the beginning of each separate line : 1 2 3 4 5 6 7 8 9 const randomNumber = parseInt ( Math . random () * 10 , 10 ); const isEvenOrOdd = ( number ) => { return number % 2 === 0 ? `even: ${ number } ` : `odd: ${ number } ` } isEvenOrOdd ( randomNumber ) Formatted like so, it is easy to quickly scan your eyes along the left side of the code and see a ternary expression . This might sound frivolous and nitpicky, but bear in mind that one stylistic downside of using ternary expressions is readability (or lack thereof). They might be more elegant than if / else statements, but they're not always as recognizable at a glance. So use discretion when using them.","title":"Ternary (another alternative to if/else)"},{"location":"module-1/conditionals/#practice-it-conditionals","text":"For each of the following, create a new Repl.it called the title you see in bold and also name the function the same as the title. Then copy/paste the prompt at the top with the \"//\" so you'll have the challenge right there for you to reference. //sumOfTwoNums - write a function that returns the sum of two numbers if both arguments are numbers. //bothTrue - write a function that returns 'both are true' if both arguments are true. //checkStrings - write a function that takes 3 parameters and if all 3 parameters are strings, return true //evaluateMonth - write a switch statement that evaluates a variable month, and for each of the 12 months, returns the number of days in that month. 1 2 3 4 5 6 7 8 9 10 11 // starter code const evaluateMonth = ( month ) => { switch ( month ) { case 'day' : case 'Jan' : { return 31 } default : return '45' } }","title":"Practice It - Conditionals"},{"location":"module-1/conditionals/#know-your-docs","text":"MDN Docs - ...","title":"Know Your Docs"},{"location":"module-1/developSeries-SpeakingIsEasy/","text":"Speaking Is Easy","title":"Develop Series - Speaking"},{"location":"module-1/developSeries-SpeakingIsEasy/#speaking-is-easy","text":"","title":"Speaking Is Easy"},{"location":"preCourse/codingAndProgramming/","text":"Coding & Programming Programming is the process of solving a problem. Coding is the process of communicating that solution for the computer to execute. Programming For the sake of the class I want you to think of programming as figuring out the steps of a process(program) and telling the computer in a very detailed, non-ambiguous way how to execute the steps in the process(program). In this way, you're looking at a problem from a higher point-of-view using your vision, hearing and even touch to figure out solutions to the problem and then to implement a process of steps whereby to arrive at the solution. For instance: A Simple Program Example Given a list of numbers: 2, 5, 6, 7 and 9, add 1 to each number and return a list of the new values and the sum of all of those new values Perfect! Let's walk through this step by step to see how we might program a solution to this problem. Our given input is [2, 5, 6, 7, 9] . We have the first action: add 1 to each number in the list. A second action: return the list of new numbers. And we have a third action: return the sum of the new list of numbers! We can even deduce another piece of the puzzle: If our input is a list of numbers like: [2, 5, 6, 7, 9] into our program, our expect output will be [3, 6, 7, 8, 10] with a sum value of 34 . Now that we know what our program's actions(steps) are and what the expected output or our program should be we can begin to reverse-engineer the solution. Action 1: add 1 to each number tell the computer to loop though the list of numbers and for each number add 1 to its value Action 2: return the list of new numbers collect the new values in another list [ ]in the return statement include the new list Action 3: Return the sum of the new list hold the value of the new numbers in a place in the return statement include the place you were holding sum of new numbers Hopefully, you can see now how we can approach any problem. We begin with a bigger view of the problem and work our way down to the small details of it. In this way we use our natural human ability to solve complex problems with mental models and abstraction then list them into short, clear directives to give to the computer. And this, for our purposes, is programming. We have been given a challenge and we found a solution and listed out the steps needed to make it a process. From here we can translate(code) it into any language we want: C, C++, C#, Python, Swift, Rust, Go, Dart, Java, Erlang, or Cobol. In the next section, we're going to translate(code)these steps into Javascript. What is Coding? As you just saw, programming is listing out all the steps a program will need to accomplish a task given by a human so that it can return an expected result. Coding , on the other hand, is the language we use to communicate to other humans our intent for a computer's task while also telling the computer what we expect it to repeat over and over in a precise and predictable way. It is also important to note that no coding language is actually what the computer reads. All languages are compiled down to binary , the language a computer can understand. Therefore, you could use nearly any language you want to accomplish most tasks. There are restrictions, of course (i.e. all front-end apps have to be written in JS), preferences (Python for analytics), and logistical things (full coverage testing, support, open-source, and technical cost) to consider but keep in mind, the characters ( tokens you type into the text editor) are not really read by the computer the same way you see them on the screen. Now we're going to turn those programming steps from the last section into JavaScript code so that a computer can complete the tasks we created for it. Below are the instructions we wrote out while learning to program , next to code that describes the action steps in JavaScript code. You'll see //comments in the code that describe what's happening But, STOP , create a new Repl.it and follow along! ...SERIOUSLY!! Simple Coding Example Before we can perform Action 1, let's build a function (program/process) we can call to do something at some point. Let's call it: addOneWithSum 1 2 3 const addOneWithSum = () => { } Then let's make sure it can take in an array of numbers like the one given to us in the example above: const exampleArray = [2, 5, 6, 7, 9] 1 2 3 const addOneWithSum = ( ourArray ) => { } Now let's do Action 1: add 1 to each number 1 2 3 4 5 6 7 8 9 10 11 12 13 const addOneWithSum = ( ourArray ) => { // tell the computer to loop though the list of numbers and for each number add 1 to its value for ( let i = 0 ; i < ourArray . length ; i ++ ) { ourArray [ i ] + 1 } } // More details: // the for() loop states: // let i = 0; - set i to 0, (i stands for iterator) // i < ourArray.length; - and while i is less than the length of ourArray keep doing what is inside the code block // i++ - and each time you loop through ourArray once add 1 to the value of i so that we keep iterating through all of the numbers in the list. // ourArray[i] + 1 - inside the {} of the for() loop we add 1 to each item in ourArray Action 2: return the list of new numbers 1 2 3 4 5 6 7 8 9 10 11 12 13 const addOneWithSum = ( ourArray ) => { // collect the new values in another list(array) let newList = [] for ( let i = 0 ; i < ourArray . length ; i ++ ) { newList . push ( ourArray [ i ] + 1 ) } // in the return statement include the new list return newList } // let newList = [] - creates a place we can hold the new values of the list // newList.push(ourArray[i] + 1) - the .push() method pushes the new values into the newList array/list // return newList - and then we returned the newList as the output of this program Action 3: Return the sum of the new list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 const addOneWithSum = ( ourArray ) => { let newList = [] // hold the value of the new numbers in a place/variable let sum = 0 for ( let i = 0 ; i < ourArray . length ; i ++ ) { sum += ( ourArray [ i ] + 1 ) newList . push ( ourArray [ i ] + 1 ) } // in the return statement include the place you were holding sum of new numbers return newList + ' ' + sum } // let sum = 0 - Now we create a place to hold the sum of the new numbers: sum // sum += (ourArray[i] + 1) - and inside our for() loop we continually add to the value of sum // then we return sum as part of our output. // in the return we added a space, ' ' , between newList and sum so that the return would be easier to read. The final step to this is to feed our function(program) the input and call our newly built function(program): 1 2 3 4 5 6 7 8 9 10 11 12 13 const exampleArray = [ 2 , 5 , 6 , 7 , 9 ] const addOneWithSum = ( ourArray ) => { let newList = [] let sum = 0 for ( let i = 0 ; i < ourArray . length ; i ++ ) { sum += ( ourArray [ i ] + 1 ) newList . push ( ourArray [ i ] + 1 ) } return newList + ' ' + sum } addOneWithSum ( exampleArray ) Practice It Throw this code into a repl.it and practice for yourself! Solve this problem: given an array of numbers: [2, 4, 6, 8, 10], divide each number by two, return the new array and the product (multiplied all together) of the new array. Continue reading about the differences btw coding vs programming . Summary A deciding factor in your success with programming is your ability to think critically about how to solve problems. After all, that's really what we do as engineers; whether we're building software or designing rocket ships\u2014we solve problems. To ensure your success as a web developer, our hope is not just that you learn how to code, but that you develop the skills necessary to be an effective problem-solver. The latter is arguably more important when it comes down to what will get you hired. With that in mind, consider this section as your first lesson in fundamental programming concepts, as well as a guided tour of the kind of thinking we'd like we need you to practice as you move forward in the course. Programming and problem-solving go hand in hand\u2014so long as you practice, ask questions and seek answers, you'll develop proficiency with both skill sets.","title":"Coding + Programming"},{"location":"preCourse/codingAndProgramming/#coding-programming","text":"Programming is the process of solving a problem. Coding is the process of communicating that solution for the computer to execute.","title":"Coding &amp; Programming"},{"location":"preCourse/codingAndProgramming/#programming","text":"For the sake of the class I want you to think of programming as figuring out the steps of a process(program) and telling the computer in a very detailed, non-ambiguous way how to execute the steps in the process(program). In this way, you're looking at a problem from a higher point-of-view using your vision, hearing and even touch to figure out solutions to the problem and then to implement a process of steps whereby to arrive at the solution. For instance:","title":"Programming"},{"location":"preCourse/codingAndProgramming/#a-simple-program-example","text":"Given a list of numbers: 2, 5, 6, 7 and 9, add 1 to each number and return a list of the new values and the sum of all of those new values Perfect! Let's walk through this step by step to see how we might program a solution to this problem. Our given input is [2, 5, 6, 7, 9] . We have the first action: add 1 to each number in the list. A second action: return the list of new numbers. And we have a third action: return the sum of the new list of numbers! We can even deduce another piece of the puzzle: If our input is a list of numbers like: [2, 5, 6, 7, 9] into our program, our expect output will be [3, 6, 7, 8, 10] with a sum value of 34 . Now that we know what our program's actions(steps) are and what the expected output or our program should be we can begin to reverse-engineer the solution. Action 1: add 1 to each number tell the computer to loop though the list of numbers and for each number add 1 to its value Action 2: return the list of new numbers collect the new values in another list [ ]in the return statement include the new list Action 3: Return the sum of the new list hold the value of the new numbers in a place in the return statement include the place you were holding sum of new numbers Hopefully, you can see now how we can approach any problem. We begin with a bigger view of the problem and work our way down to the small details of it. In this way we use our natural human ability to solve complex problems with mental models and abstraction then list them into short, clear directives to give to the computer. And this, for our purposes, is programming. We have been given a challenge and we found a solution and listed out the steps needed to make it a process. From here we can translate(code) it into any language we want: C, C++, C#, Python, Swift, Rust, Go, Dart, Java, Erlang, or Cobol. In the next section, we're going to translate(code)these steps into Javascript.","title":"A Simple Program Example"},{"location":"preCourse/codingAndProgramming/#what-is-coding","text":"As you just saw, programming is listing out all the steps a program will need to accomplish a task given by a human so that it can return an expected result. Coding , on the other hand, is the language we use to communicate to other humans our intent for a computer's task while also telling the computer what we expect it to repeat over and over in a precise and predictable way. It is also important to note that no coding language is actually what the computer reads. All languages are compiled down to binary , the language a computer can understand. Therefore, you could use nearly any language you want to accomplish most tasks. There are restrictions, of course (i.e. all front-end apps have to be written in JS), preferences (Python for analytics), and logistical things (full coverage testing, support, open-source, and technical cost) to consider but keep in mind, the characters ( tokens you type into the text editor) are not really read by the computer the same way you see them on the screen. Now we're going to turn those programming steps from the last section into JavaScript code so that a computer can complete the tasks we created for it. Below are the instructions we wrote out while learning to program , next to code that describes the action steps in JavaScript code. You'll see //comments in the code that describe what's happening But, STOP , create a new Repl.it and follow along! ...SERIOUSLY!!","title":"What is Coding?"},{"location":"preCourse/codingAndProgramming/#simple-coding-example","text":"Before we can perform Action 1, let's build a function (program/process) we can call to do something at some point. Let's call it: addOneWithSum 1 2 3 const addOneWithSum = () => { } Then let's make sure it can take in an array of numbers like the one given to us in the example above: const exampleArray = [2, 5, 6, 7, 9] 1 2 3 const addOneWithSum = ( ourArray ) => { } Now let's do Action 1: add 1 to each number 1 2 3 4 5 6 7 8 9 10 11 12 13 const addOneWithSum = ( ourArray ) => { // tell the computer to loop though the list of numbers and for each number add 1 to its value for ( let i = 0 ; i < ourArray . length ; i ++ ) { ourArray [ i ] + 1 } } // More details: // the for() loop states: // let i = 0; - set i to 0, (i stands for iterator) // i < ourArray.length; - and while i is less than the length of ourArray keep doing what is inside the code block // i++ - and each time you loop through ourArray once add 1 to the value of i so that we keep iterating through all of the numbers in the list. // ourArray[i] + 1 - inside the {} of the for() loop we add 1 to each item in ourArray Action 2: return the list of new numbers 1 2 3 4 5 6 7 8 9 10 11 12 13 const addOneWithSum = ( ourArray ) => { // collect the new values in another list(array) let newList = [] for ( let i = 0 ; i < ourArray . length ; i ++ ) { newList . push ( ourArray [ i ] + 1 ) } // in the return statement include the new list return newList } // let newList = [] - creates a place we can hold the new values of the list // newList.push(ourArray[i] + 1) - the .push() method pushes the new values into the newList array/list // return newList - and then we returned the newList as the output of this program Action 3: Return the sum of the new list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 const addOneWithSum = ( ourArray ) => { let newList = [] // hold the value of the new numbers in a place/variable let sum = 0 for ( let i = 0 ; i < ourArray . length ; i ++ ) { sum += ( ourArray [ i ] + 1 ) newList . push ( ourArray [ i ] + 1 ) } // in the return statement include the place you were holding sum of new numbers return newList + ' ' + sum } // let sum = 0 - Now we create a place to hold the sum of the new numbers: sum // sum += (ourArray[i] + 1) - and inside our for() loop we continually add to the value of sum // then we return sum as part of our output. // in the return we added a space, ' ' , between newList and sum so that the return would be easier to read. The final step to this is to feed our function(program) the input and call our newly built function(program): 1 2 3 4 5 6 7 8 9 10 11 12 13 const exampleArray = [ 2 , 5 , 6 , 7 , 9 ] const addOneWithSum = ( ourArray ) => { let newList = [] let sum = 0 for ( let i = 0 ; i < ourArray . length ; i ++ ) { sum += ( ourArray [ i ] + 1 ) newList . push ( ourArray [ i ] + 1 ) } return newList + ' ' + sum } addOneWithSum ( exampleArray )","title":"Simple Coding Example"},{"location":"preCourse/codingAndProgramming/#practice-it","text":"Throw this code into a repl.it and practice for yourself! Solve this problem: given an array of numbers: [2, 4, 6, 8, 10], divide each number by two, return the new array and the product (multiplied all together) of the new array. Continue reading about the differences btw coding vs programming .","title":"Practice It"},{"location":"preCourse/codingAndProgramming/#summary","text":"A deciding factor in your success with programming is your ability to think critically about how to solve problems. After all, that's really what we do as engineers; whether we're building software or designing rocket ships\u2014we solve problems. To ensure your success as a web developer, our hope is not just that you learn how to code, but that you develop the skills necessary to be an effective problem-solver. The latter is arguably more important when it comes down to what will get you hired. With that in mind, consider this section as your first lesson in fundamental programming concepts, as well as a guided tour of the kind of thinking we'd like we need you to practice as you move forward in the course. Programming and problem-solving go hand in hand\u2014so long as you practice, ask questions and seek answers, you'll develop proficiency with both skill sets.","title":"Summary"},{"location":"preCourse/comparisonOperators/","text":"Comparison Operators Now that you have the differences between = , == and === , let's look at how to use greater than, less than, bang and the other combinators . Non-Equality Operators Th equality operators == and === are simply checking if both operands are equal to one another. Unlike the single = we saw when we assigned a value to a variable, to check for equality we must use a double == sign or a triple === sign. Both operands on either side must be truthy for the operation to evaluate to true , otherwise, the operation evaluates to false . But what about the opposite? What if we wanted to do something if the evaluation was false? Enter the bang : ! . To evaluate if something is false you can use the bang-equal operators, != / !== . This simply says, \"if these don't equal each other do something\". See the example below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 8 != 7 // => true 90 !== 91 // => true 100 != 100 // => false // -- or -- // evaluates to false ! true // -- or -- const yourVariable = 0 ; // => falsey if ( ! yourVariable ) { console . log ( \"Is not truthy\" ) }; NOTE: This can be literally read: if yourVariable is not truthy then print out \"Is not truthy\". Practice It - Bang Operator !== Copy/paste the following code into a Repl.it. Read the code and try to guess what the console will \"log\" out before you run it . Run it. Replace the \"a\" on line 3 with \"b\" and run it again. What happened? Revert the \"b\" back to an \"a\" but delete \" = 'I am defined'\" from the first line and run the app again. Why do you think that happened? 1 2 3 4 5 6 7 8 9 10 11 let a = \"I am defined\" ; // declared but not defined variable let b ; if ( a !== undefined ) { console . log ( \"'a' is defined, so 'a' is truthy\" ) } else { console . log ( \"'a' isn't truthy\" ) } Greater-Than/Less-Than Operators Just like you learned in 6th grade, < and > are still applicable in comparisons. 1 2 3 6 < 88 // true 88 > 6 // true > means greater than < means less than In combination with == or = the < and > signs can make useful statements: Type first greater than or equal to: >== Type first less than or equal to: <== Greater than or equal to: >= Less than or equal to: <= Try It - Greater-Than/Less-Than Copy/paste the code below into another Repl.it. Assign the value of the variables \"a\" and \"b\" to different values Run the code multiple times to experiment and find out what's going on. Notice the code is using let and not var. Why do you think so? Bring it to class. 1 2 3 4 5 6 7 8 9 10 11 12 13 let a = 5 ; let b = 5 ; if ( a > b ) { // here the \"+\" is being used to concatenate multiple values together console . log ( a + \" is greater than \" + b ) } else if ( a < b ) { console . log ( a + \" is less than b \" + b ) } else if ( a === b ) { console . log ( a + \" is equal to B \" + b ) } else { console . log ( a + \" does not(!) equal \" + b ) } The expressions between parentheses are evaluated for truthiness. JavaScript will try to convert the values inside those parentheses to true or false . Logical Operators && (AND) || (OR) We can also create multiple evaluations to determine if we want to do a specific actions. Using our sign-on procedure we might compare our username and password: 1 2 3 4 5 if ( inputtedUserName === actualUserName && inputtedPassword === actualPassword ) { return logUserIn () } else { return \"Sorry, wrong username or password.\" } The above code says \"If the usernames match AND the passwords match log the user in.\" 1 2 3 4 5 6 const myVariable = 50 ; //truthy const yourVariable = 90 ; // truthy if ( myVariable && yourVariable ) { console . log ( \"Both are truthy\" ) }; This can be literally read as: if myVariable and yourVariable are truthy then print out \"Both are truthy\". && , read as \"And\" is just what it states, 'this and that'. With &&, you can kind of think of your logical operations as, \"If everything in this expression is truthy, then it will evaluate to true\" 1 2 3 4 true && true // true true && false // false false && true // false false && false // false The above statements, like all others are read or evaluated from left to right. If the first expression is true the second expression won't even be evaluated. The \"Or\" Operator - || The double-pipes (||) reads as \"or\" in our comparison statements: 1 2 3 4 5 6 const myVariable = 50 ; // truthy const yourVariable = 0 ; // falsey if ( myVariable || yourVariable ) { console . log ( \"One is truthy\" ) }; The above statement can be literally read: if myVariable or yourVariable are truthy then print out \"One is truthy\". || , read as \"or\": \"If at least one operand in this expression is truthy, it will still evaluate to true\" 1 2 3 4 true || true // true true || false // true false || true // true false || false // false NOTE: An operand is simply a piece of data being evaluated in the expression. Know Your Docs MDN Docs - Logical Operators","title":"Comparison Operator"},{"location":"preCourse/comparisonOperators/#comparison-operators","text":"Now that you have the differences between = , == and === , let's look at how to use greater than, less than, bang and the other combinators .","title":"Comparison Operators"},{"location":"preCourse/comparisonOperators/#non-equality-operators","text":"Th equality operators == and === are simply checking if both operands are equal to one another. Unlike the single = we saw when we assigned a value to a variable, to check for equality we must use a double == sign or a triple === sign. Both operands on either side must be truthy for the operation to evaluate to true , otherwise, the operation evaluates to false . But what about the opposite? What if we wanted to do something if the evaluation was false? Enter the bang : ! . To evaluate if something is false you can use the bang-equal operators, != / !== . This simply says, \"if these don't equal each other do something\". See the example below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 8 != 7 // => true 90 !== 91 // => true 100 != 100 // => false // -- or -- // evaluates to false ! true // -- or -- const yourVariable = 0 ; // => falsey if ( ! yourVariable ) { console . log ( \"Is not truthy\" ) }; NOTE: This can be literally read: if yourVariable is not truthy then print out \"Is not truthy\".","title":"Non-Equality Operators"},{"location":"preCourse/comparisonOperators/#practice-it-bang-operator","text":"Copy/paste the following code into a Repl.it. Read the code and try to guess what the console will \"log\" out before you run it . Run it. Replace the \"a\" on line 3 with \"b\" and run it again. What happened? Revert the \"b\" back to an \"a\" but delete \" = 'I am defined'\" from the first line and run the app again. Why do you think that happened? 1 2 3 4 5 6 7 8 9 10 11 let a = \"I am defined\" ; // declared but not defined variable let b ; if ( a !== undefined ) { console . log ( \"'a' is defined, so 'a' is truthy\" ) } else { console . log ( \"'a' isn't truthy\" ) }","title":"Practice It - Bang Operator !=="},{"location":"preCourse/comparisonOperators/#greater-thanless-than-operators","text":"Just like you learned in 6th grade, < and > are still applicable in comparisons. 1 2 3 6 < 88 // true 88 > 6 // true > means greater than < means less than In combination with == or = the < and > signs can make useful statements: Type first greater than or equal to: >== Type first less than or equal to: <== Greater than or equal to: >= Less than or equal to: <=","title":"Greater-Than/Less-Than Operators"},{"location":"preCourse/comparisonOperators/#try-it-greater-thanless-than","text":"Copy/paste the code below into another Repl.it. Assign the value of the variables \"a\" and \"b\" to different values Run the code multiple times to experiment and find out what's going on. Notice the code is using let and not var. Why do you think so? Bring it to class. 1 2 3 4 5 6 7 8 9 10 11 12 13 let a = 5 ; let b = 5 ; if ( a > b ) { // here the \"+\" is being used to concatenate multiple values together console . log ( a + \" is greater than \" + b ) } else if ( a < b ) { console . log ( a + \" is less than b \" + b ) } else if ( a === b ) { console . log ( a + \" is equal to B \" + b ) } else { console . log ( a + \" does not(!) equal \" + b ) } The expressions between parentheses are evaluated for truthiness. JavaScript will try to convert the values inside those parentheses to true or false .","title":"Try It - Greater-Than/Less-Than"},{"location":"preCourse/comparisonOperators/#logical-operators","text":"&& (AND) || (OR) We can also create multiple evaluations to determine if we want to do a specific actions. Using our sign-on procedure we might compare our username and password: 1 2 3 4 5 if ( inputtedUserName === actualUserName && inputtedPassword === actualPassword ) { return logUserIn () } else { return \"Sorry, wrong username or password.\" } The above code says \"If the usernames match AND the passwords match log the user in.\" 1 2 3 4 5 6 const myVariable = 50 ; //truthy const yourVariable = 90 ; // truthy if ( myVariable && yourVariable ) { console . log ( \"Both are truthy\" ) }; This can be literally read as: if myVariable and yourVariable are truthy then print out \"Both are truthy\". && , read as \"And\" is just what it states, 'this and that'. With &&, you can kind of think of your logical operations as, \"If everything in this expression is truthy, then it will evaluate to true\" 1 2 3 4 true && true // true true && false // false false && true // false false && false // false The above statements, like all others are read or evaluated from left to right. If the first expression is true the second expression won't even be evaluated.","title":"Logical Operators"},{"location":"preCourse/comparisonOperators/#the-or-operator-","text":"The double-pipes (||) reads as \"or\" in our comparison statements: 1 2 3 4 5 6 const myVariable = 50 ; // truthy const yourVariable = 0 ; // falsey if ( myVariable || yourVariable ) { console . log ( \"One is truthy\" ) }; The above statement can be literally read: if myVariable or yourVariable are truthy then print out \"One is truthy\". || , read as \"or\": \"If at least one operand in this expression is truthy, it will still evaluate to true\" 1 2 3 4 true || true // true true || false // true false || true // true false || false // false NOTE: An operand is simply a piece of data being evaluated in the expression.","title":"The \"Or\" Operator - ||"},{"location":"preCourse/comparisonOperators/#know-your-docs","text":"MDN Docs - Logical Operators","title":"Know Your Docs"},{"location":"preCourse/dataTypes/","text":"Data Types in JavaScript Why Different Data Types? When we program, we need to hold values and access them later on. Think about typing into a calculator: 7 + 54 . We first type 7 which gets held into a variable, Then we type + which gets held into a variable, Then we type 54 which also gets held into a variable, When we type = these three variables get passed into the \"calculate\" function which returns the expected value, 61. With this very simple program we can learn quite a bit. First, 7 is a Number, 54 is a Number, and + and = are both functions. This means we're using two different types of data: type Number and type Function. If we gave our \"calculate\" function the values \"cat\" + 54 it wouldn't be able to calculate a value for us because we gave it two different types of data: type String(\"cat\") and and type Number(54). All the things you see on your screen and the information you send and receive online comes in the form of different types of data. We call these types of data data types . How Many Data Types There are seven main data types in JavaScript in total. We can divide them into two main categories: Complex and Primitive . The Primitive Types String , i.e. \"cat\" , \"dog\" , \"700\" , \"Peter woke at 9 a.m.\" Number , i.e. 70 , 43 , 2 , 10000000 , -1 , 0 Boolean , i.e. true or false Undefined , i.e. undefined (literally undefined) The Complex Types Function , i.e. const add = (num1, num2) => { return num1 + num2 } Object , i.e. const vehicle = {color: \"red\", wheels: 4} Array , i.e. const passengers = [\"David\", \"Julia\", \"Pete\"] There is also \"Not a Number\" - NaN , which technically isn't a primitive or complex type but we'll talk about it when we need to. It occurs when you try to add \"cat\" to 54. Each of the data types can hold specific types of values but also come with special built in methods we can use to compare and manipulate them. For instance, Number type data can be calculated but String type data can't be calculated. And Array type data can be looped over but Functions types can't. Because of this, we need each type of data for specific reasons and we'll learn about each as we move through this course.","title":"Data Types"},{"location":"preCourse/dataTypes/#data-types-in-javascript","text":"","title":"Data Types in JavaScript"},{"location":"preCourse/dataTypes/#why-different-data-types","text":"When we program, we need to hold values and access them later on. Think about typing into a calculator: 7 + 54 . We first type 7 which gets held into a variable, Then we type + which gets held into a variable, Then we type 54 which also gets held into a variable, When we type = these three variables get passed into the \"calculate\" function which returns the expected value, 61. With this very simple program we can learn quite a bit. First, 7 is a Number, 54 is a Number, and + and = are both functions. This means we're using two different types of data: type Number and type Function. If we gave our \"calculate\" function the values \"cat\" + 54 it wouldn't be able to calculate a value for us because we gave it two different types of data: type String(\"cat\") and and type Number(54). All the things you see on your screen and the information you send and receive online comes in the form of different types of data. We call these types of data data types .","title":"Why Different Data Types?"},{"location":"preCourse/dataTypes/#how-many-data-types","text":"There are seven main data types in JavaScript in total. We can divide them into two main categories: Complex and Primitive .","title":"How Many Data Types"},{"location":"preCourse/dataTypes/#the-primitive-types","text":"String , i.e. \"cat\" , \"dog\" , \"700\" , \"Peter woke at 9 a.m.\" Number , i.e. 70 , 43 , 2 , 10000000 , -1 , 0 Boolean , i.e. true or false Undefined , i.e. undefined (literally undefined)","title":"The Primitive Types"},{"location":"preCourse/dataTypes/#the-complex-types","text":"Function , i.e. const add = (num1, num2) => { return num1 + num2 } Object , i.e. const vehicle = {color: \"red\", wheels: 4} Array , i.e. const passengers = [\"David\", \"Julia\", \"Pete\"] There is also \"Not a Number\" - NaN , which technically isn't a primitive or complex type but we'll talk about it when we need to. It occurs when you try to add \"cat\" to 54. Each of the data types can hold specific types of values but also come with special built in methods we can use to compare and manipulate them. For instance, Number type data can be calculated but String type data can't be calculated. And Array type data can be looped over but Functions types can't. Because of this, we need each type of data for specific reasons and we'll learn about each as we move through this course.","title":"The Complex Types"},{"location":"preCourse/dataTypesAndFunctions/","text":"Practice Data Types and Functions Create a new Repl.it called: dataTypesAndFunctions Using the console.log() method, complete each of the following prompts. Place the code you want to execute inside the () ( invocation parenthesis ), like so: 1 2 3 4 5 // subtract one number from another const firstNumber = 9 ; const secondNumber = 3 ; console . log ( firstNumber - secondNumber ); Run the program to see what happens. Start using console.log() as you build all of your future projects to see expect outputs. Make a variable called name and assign its value to be your name as a string Make a variable called userAge and assign its value to be your age as a number Create a function called dividedBy . It should take in any two numbers and return the result of the first number divided by the second. HINT 1: Be sure to hold all of your values in a variable. When you hit \"Run\" ( Cmd + Enter ), the emulator will display the results on the right! Hint 2: You will have to google how to do these. Go figure them out for yourself and have fun doing it!! If you don't know, try HackOverflow. Display the current day and time in JavaScript. Convert a Number, 7 , to a String, \"7\" , in JavaScript. Convert a string, \"7\" , to the number, 7 , in JavaScript. Add two numbers together in JavaScript. Print out \"Both are TRUE\" only when 2 things are true. Print out \"One of these is TRUE\" when 1 of 2 things are true. Print out \"Neither is TRUE\" when both things are not true. Create one variable for each of the following data types: Boolean i.e. const myBool = false; Null Undefined Number NaN String Copy/paste the following variable, function declaration, and function invocation into your Repl.it: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // your variable const myBool = false ; // function declaration const isTypeOf = ( data ) => { return console . log ( typeof data ); } // function invocation isTypeOf ( myBool ); // In the function invocation, replace \"myBool\" with the other names of your variables...isTypeOf(name); isTypeOf(divideBy);...etc. // What is happening? Additional Resources Learn JavaScript in 12 Minutes","title":"Practice Data Types & Functions"},{"location":"preCourse/dataTypesAndFunctions/#practice-data-types-and-functions","text":"Create a new Repl.it called: dataTypesAndFunctions Using the console.log() method, complete each of the following prompts. Place the code you want to execute inside the () ( invocation parenthesis ), like so: 1 2 3 4 5 // subtract one number from another const firstNumber = 9 ; const secondNumber = 3 ; console . log ( firstNumber - secondNumber ); Run the program to see what happens. Start using console.log() as you build all of your future projects to see expect outputs. Make a variable called name and assign its value to be your name as a string Make a variable called userAge and assign its value to be your age as a number Create a function called dividedBy . It should take in any two numbers and return the result of the first number divided by the second. HINT 1: Be sure to hold all of your values in a variable. When you hit \"Run\" ( Cmd + Enter ), the emulator will display the results on the right! Hint 2: You will have to google how to do these. Go figure them out for yourself and have fun doing it!! If you don't know, try HackOverflow. Display the current day and time in JavaScript. Convert a Number, 7 , to a String, \"7\" , in JavaScript. Convert a string, \"7\" , to the number, 7 , in JavaScript. Add two numbers together in JavaScript. Print out \"Both are TRUE\" only when 2 things are true. Print out \"One of these is TRUE\" when 1 of 2 things are true. Print out \"Neither is TRUE\" when both things are not true. Create one variable for each of the following data types: Boolean i.e. const myBool = false; Null Undefined Number NaN String Copy/paste the following variable, function declaration, and function invocation into your Repl.it: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // your variable const myBool = false ; // function declaration const isTypeOf = ( data ) => { return console . log ( typeof data ); } // function invocation isTypeOf ( myBool ); // In the function invocation, replace \"myBool\" with the other names of your variables...isTypeOf(name); isTypeOf(divideBy);...etc. // What is happening?","title":"Practice Data Types and Functions"},{"location":"preCourse/dataTypesAndFunctions/#additional-resources","text":"Learn JavaScript in 12 Minutes","title":"Additional Resources"},{"location":"preCourse/es5%26es6/","text":"ES5 vs ES6 Coding languages are standardized and maintained by groups or councils of people that work with and listen to the developers that use the language. Therefore languages are updated and improved periodically. JavaScript is no different. In fact, it may be one of the most rapidly improved and frequently changed languages. The body of people that maintain JavaScript is called the ECMA-262 which is overseen by the the ECMA International . The ECMA-262 made its first edition in 1997 and its latest edition came out in June 2018: ES2018 (ES9). The reason we're talking about ES6 and not ES9 here is that ES6 was the biggest renovation of the language and is now the standard of the language used across multiple platforms. While there are newer features in the newer editions it is important to remember that the engines that run JavaScript, like Chrome V8 JS Engine , have to all be updated for these newer features, so each platform can talk back and forth to one another. This process takes time so the official edition of the language in use is always a few years behind where the latest edition actually is. Note on transpiling(sic) from Wikipedia : Since ES 2015, transpiling JavaScript has become very common. Transpilation is a source to source compilation in which the newer versions of JavaScript are used in the user's source code and the transpiler rewrites them so that they are compliant with the current specification. Usually, transpilers transpile down to ES3 to maintain compatibility with all versions of browsers. The settings to transpiling to a specific version can be configured according to need. Transpiling adds an extra step to the build process and is sometimes done to avoid needing polyfills. Polyfills allow adding extra functionalities by including another JavaScript file which adds those specific functionalities. That said you should keep abreast of the recent changes in the languages you write so that you can utilize the fun new features!! So, as you learn in the course, watch videos and read blogs by other developers. They'll give you free information to use as you want. NOTE: The image below describes another reason we use Chrome as our default browser. Notice the conformance percentage for later versions of JS (ECMA). ES5 vs ES6: How The code snippets below both declare a function called imAFunction and take in a argument called content ES2011 (ES5): 1 2 3 4 // hold a function as the value of a variable. Takes one argument: `parameter` var imAFunction = function ( parameter ) { // Do stuff here } ES2015 (ES6): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // same thing, taking one argument const imAFunction = parameter => { // Do stuff here } // function taking two arguments const imAFunction2 = ( parameter , parameter2 ) => { // Do stuff here } // function taking zero arguments const imAFunction3 = () => { // Do stuff here } The code snippets below all create the same variable, myVariable : Pre-ES2015 1 var myVariable = 10 ; ES2015 1 2 3 4 5 let myVariable = 10 const myVariable2 = 10 // use `let` if you expect the variable to change // use `const` if you expect the variable to be a constant value ES6 Why? Let, Const, Var Fat Arrow Syntax () => {} Additional Resources FunFunFunction - Fat Arrow Function NOTE: Don't get caught up on .filter() , .map() or .reduce() . These are really powerful built-in methods we will cover in-depth later on, together in class.","title":"ES5 vs ES6"},{"location":"preCourse/es5%26es6/#es5-vs-es6","text":"Coding languages are standardized and maintained by groups or councils of people that work with and listen to the developers that use the language. Therefore languages are updated and improved periodically. JavaScript is no different. In fact, it may be one of the most rapidly improved and frequently changed languages. The body of people that maintain JavaScript is called the ECMA-262 which is overseen by the the ECMA International . The ECMA-262 made its first edition in 1997 and its latest edition came out in June 2018: ES2018 (ES9). The reason we're talking about ES6 and not ES9 here is that ES6 was the biggest renovation of the language and is now the standard of the language used across multiple platforms. While there are newer features in the newer editions it is important to remember that the engines that run JavaScript, like Chrome V8 JS Engine , have to all be updated for these newer features, so each platform can talk back and forth to one another. This process takes time so the official edition of the language in use is always a few years behind where the latest edition actually is. Note on transpiling(sic) from Wikipedia : Since ES 2015, transpiling JavaScript has become very common. Transpilation is a source to source compilation in which the newer versions of JavaScript are used in the user's source code and the transpiler rewrites them so that they are compliant with the current specification. Usually, transpilers transpile down to ES3 to maintain compatibility with all versions of browsers. The settings to transpiling to a specific version can be configured according to need. Transpiling adds an extra step to the build process and is sometimes done to avoid needing polyfills. Polyfills allow adding extra functionalities by including another JavaScript file which adds those specific functionalities. That said you should keep abreast of the recent changes in the languages you write so that you can utilize the fun new features!! So, as you learn in the course, watch videos and read blogs by other developers. They'll give you free information to use as you want. NOTE: The image below describes another reason we use Chrome as our default browser. Notice the conformance percentage for later versions of JS (ECMA).","title":"ES5 vs ES6"},{"location":"preCourse/es5%26es6/#es5-vs-es6-how","text":"The code snippets below both declare a function called imAFunction and take in a argument called content ES2011 (ES5): 1 2 3 4 // hold a function as the value of a variable. Takes one argument: `parameter` var imAFunction = function ( parameter ) { // Do stuff here } ES2015 (ES6): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // same thing, taking one argument const imAFunction = parameter => { // Do stuff here } // function taking two arguments const imAFunction2 = ( parameter , parameter2 ) => { // Do stuff here } // function taking zero arguments const imAFunction3 = () => { // Do stuff here } The code snippets below all create the same variable, myVariable : Pre-ES2015 1 var myVariable = 10 ; ES2015 1 2 3 4 5 let myVariable = 10 const myVariable2 = 10 // use `let` if you expect the variable to change // use `const` if you expect the variable to be a constant value","title":"ES5 vs ES6: How"},{"location":"preCourse/es5%26es6/#es6-why","text":"","title":"ES6 Why?"},{"location":"preCourse/es5%26es6/#let-const-var","text":"","title":"Let, Const, Var"},{"location":"preCourse/es5%26es6/#fat-arrow-syntax","text":"","title":"Fat Arrow Syntax () =&gt; {}"},{"location":"preCourse/es5%26es6/#additional-resources","text":"FunFunFunction - Fat Arrow Function NOTE: Don't get caught up on .filter() , .map() or .reduce() . These are really powerful built-in methods we will cover in-depth later on, together in class.","title":"Additional Resources"},{"location":"preCourse/firstRepo/","text":"Date & Time Repo Try as hard as you can to complete this assignment so you can bring it to class for review. This will be your first assignment in JS211. Go to your devFolder or create a new folder to work in like JS211-Projects or something: mkdir JS211-Projects Fork this repo Clone it: git clone https://github.com/AustinCodingAcademy/JS211_CurrentDateTimeProject.git C hange D irectories into this new folder cd JS211_CurrentDateTimeProject You can check to make sure you're in the right directory by running one of the following commands: > Apple - pwd (print working directory) > Windows - echo %cd% > After hitting enter you should see \"JS211_CurrentDateTimeProject\" return on your command-line. I nstall dependencies: npm i This N ode P ackage M anager tool came with the Node software you downloaded earlier. Now open the folder up in VS Code by typing code . + Enter Tutorial to setup Path shortcut in Macs Go to the README.md and follow the directions Optional: you can first start building your solutions in a new Repl.it before adding them to the main.js file. This sometimes make for faster development time Additional Resources","title":"Date & Time Repo"},{"location":"preCourse/firstRepo/#date-time-repo","text":"Try as hard as you can to complete this assignment so you can bring it to class for review. This will be your first assignment in JS211. Go to your devFolder or create a new folder to work in like JS211-Projects or something: mkdir JS211-Projects Fork this repo Clone it: git clone https://github.com/AustinCodingAcademy/JS211_CurrentDateTimeProject.git C hange D irectories into this new folder cd JS211_CurrentDateTimeProject You can check to make sure you're in the right directory by running one of the following commands: > Apple - pwd (print working directory) > Windows - echo %cd% > After hitting enter you should see \"JS211_CurrentDateTimeProject\" return on your command-line. I nstall dependencies: npm i This N ode P ackage M anager tool came with the Node software you downloaded earlier. Now open the folder up in VS Code by typing code . + Enter Tutorial to setup Path shortcut in Macs Go to the README.md and follow the directions Optional: you can first start building your solutions in a new Repl.it before adding them to the main.js file. This sometimes make for faster development time","title":"Date &amp; Time Repo"},{"location":"preCourse/firstRepo/#additional-resources","text":"","title":"Additional Resources"},{"location":"preCourse/functionSignatures/","text":"Function Signatures What's Next Now that you have a few data types to use\u2014operators, variables, and methods\u2014you'll need to have a way to run each of those code blocks . You'll see your first assignment, CurrentDate & Time , asks for you to \"Write a JavaScript program that...\". This means you need to write a program that can be executed , or called , or what we like to say: invoked . These programs can be complex with many functions that call each other or they can be incredibly simple like the ones this assignment asks for. Today we'll focus on the very simplest of programs/functions. What are Functions Functions are executable blocks of code. They are used to performed predetermined tasks and return a value that can be captured and used by other functions. Think of a function as a recipe. Specifically let's think of it as a cocktail recipe so our bartender can call upon it and make us an old fashioned when we order one. From across the bar top we can call our bartender and order/ invoke an oldFashioned(). Then the bartender ( JavaScript Engine/Web Browser ) can find the recipe/ function , read the recipe/ function and then perform the predetermined tasks specified in the function. Let's see how that could work. Read the lines of code to see how a function's syntax is written, as well as the comments to see what is happening: 1 2 3 4 5 6 7 8 9 10 11 // create a function called gatherIngredients which takes a cocktail name as a parameter const gatherIngredients = ( typeOfCocktail ) = { return typeOfCocktail . listOfIngredients } // invoke the function and pass in oldFashioned as an argument and save that to a variable named oldFashionedIngredients const oldFashionedIngredients = gatherIngredients ( oldFashioned ) // this will return a list of ingredients so oldFashionedIngredients now equals a list/array of recipes. const oldFashionedIngredients = [{ 1 1 / 2 oz Bourbon }, { Angostura bitters }, { A Sugar cube }, { Water }, { Ice Cubes }, { Old Fashioned glass }, { Cocktail cherry }] Obviously the words above are not real words in JavaScript, but they get the idea through if you really read through them. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // Hold the ingredients needed to build an old fashioned const oldFashionedIngredients = [ { 1 1 / 2 oz Bourbon }, { Angostura bitters }, { A Sugar cube }, { Water }, { Ice Cubes }, { Old Fashioned glass }, { Cocktail cherry } ] // then create the instructions to build an old fashioned which takes a list of ingredients as a parameter const buildAnOldFashioned = (... ingredients ) => { Place sugar cube in old fashioned glass (); then (); saturate with bitters (); then (); add a dash of plain water (); then (); Muddle until dissolved (); then (); Fill the glass with ice cubes (); then (); pour 1.5 ounce whiskey in to Old Fashioned glass (); finally (); Garnish with cocktail cherry (); return cocktail to guest (); } // pass the ingredients as an argument into the function to invoke the function buildAnOldFashioned ( oldFashionedIngredients ); You see, a function is just a recipe, written somewhere in a file, held in the memory of the computer, so it can be called/executed/invoked with certain ingredients/ arguments to return a desired result. Put another way, functions provide a way for us to perform the same task with any set of parameters , over and over. Think of a calculator which has a few simple functions (+, -, /, *) that are used over and over again with different arguments/numbers (0, 1, 2, 3, 4, 5, 6, 7, 8, 9). All other functions work this same way!! Rules About Functions Functions must FIRST be declared before they can be invoked . Function declaration: const myFunc = (arg1) => { return arg1 + 2} Function invocations: myFunc(15), myFunc(10), myFunc(20) The returns of these functions would be: 17, 12 and 22 Functions must return something. Functions are camelCased just like variables. Functions should be named descriptively for their purposes and the data types that they return, i.e. isValidInput(input1) would be a function that evaluates if a value is true or false and it would return a Boolean type value. sumOfTwoNumbers(num1, num2) would be a function that takes two numbers and returns their sum. You can recognize when a function is being used by recognizing the () , examples: sumOfTwoNumbers(3, 4) - is a function that is being invoked/called/executed const divideTwoNumbers = (num1, num2) => { num1/num2} - is a function that is being declared/defined More Examples Below is a JavaScript program called sumOfTwoNumbers that returns the sum of two numbers and is being called twice with different arguments. 1 2 3 4 5 6 7 8 // declaration with two parameters const sumOfTwoNumbers = ( num1 , num2 ) => { return num1 + num2 ; } // invocation with two arguments sumOfTwoNumbers ( 7 , 9 ) // => 16 sumOfTwoNumbers ( 300 , 400000 ); // => 400300 In the example below we see that function declarations have parameters but when we invoke a function we \"pass in\" arguments . 1 2 3 4 5 6 7 8 9 // Declare the function with parameters: a and b const productOfTwoNumbers = ( a , b ) => { const product = a * b ; return product + \" Yay! You returned something!\" ; } // Invoke the function with two arguments: 2 and 8 productOfTwoNumbers ( 2 , 8 ); Below, loadContent is a function, written in an o= older version of JavaScript that is being declared. Notice the function keyword. 1 2 3 4 function loadContent ( user ) { return \"content loaded\" } And this example is written the same way and also being invoked. 1 2 3 4 5 6 7 // the function declaration comes first function ourFunFunc () { return \"Thanks for putting me above where you invoked me\" ; } // Invoke the function below it ourFunFunc (); STOP !!! There's something that must be discussed! So far you've seen function signatures as: 1 const ourFunFunc = () => { } But just now you saw: 1 2 function ourFunFunc () { } What gives? Well, the one with the const is the newer and more preferred way of writing a function signature . Under the hood it provides better scope but that's not something you should worry about right now. We need you to be familiar with both because you will see both in the wild. However, get comfortable with using const functionName instead of the keyword function . Know Your Docs MDN Docs - Function Declarations Additional Resources Intro to Functions in JS CAUTION: In this video he does a great job explaining function syntax, he uses a different keyword and syntax to declare constants and functions. He shouldn't be using let but instead should be using const for the function declarations.","title":"Function Signatures"},{"location":"preCourse/functionSignatures/#function-signatures","text":"","title":"Function Signatures"},{"location":"preCourse/functionSignatures/#whats-next","text":"Now that you have a few data types to use\u2014operators, variables, and methods\u2014you'll need to have a way to run each of those code blocks . You'll see your first assignment, CurrentDate & Time , asks for you to \"Write a JavaScript program that...\". This means you need to write a program that can be executed , or called , or what we like to say: invoked . These programs can be complex with many functions that call each other or they can be incredibly simple like the ones this assignment asks for. Today we'll focus on the very simplest of programs/functions.","title":"What's Next"},{"location":"preCourse/functionSignatures/#what-are-functions","text":"Functions are executable blocks of code. They are used to performed predetermined tasks and return a value that can be captured and used by other functions. Think of a function as a recipe. Specifically let's think of it as a cocktail recipe so our bartender can call upon it and make us an old fashioned when we order one. From across the bar top we can call our bartender and order/ invoke an oldFashioned(). Then the bartender ( JavaScript Engine/Web Browser ) can find the recipe/ function , read the recipe/ function and then perform the predetermined tasks specified in the function. Let's see how that could work. Read the lines of code to see how a function's syntax is written, as well as the comments to see what is happening: 1 2 3 4 5 6 7 8 9 10 11 // create a function called gatherIngredients which takes a cocktail name as a parameter const gatherIngredients = ( typeOfCocktail ) = { return typeOfCocktail . listOfIngredients } // invoke the function and pass in oldFashioned as an argument and save that to a variable named oldFashionedIngredients const oldFashionedIngredients = gatherIngredients ( oldFashioned ) // this will return a list of ingredients so oldFashionedIngredients now equals a list/array of recipes. const oldFashionedIngredients = [{ 1 1 / 2 oz Bourbon }, { Angostura bitters }, { A Sugar cube }, { Water }, { Ice Cubes }, { Old Fashioned glass }, { Cocktail cherry }] Obviously the words above are not real words in JavaScript, but they get the idea through if you really read through them. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // Hold the ingredients needed to build an old fashioned const oldFashionedIngredients = [ { 1 1 / 2 oz Bourbon }, { Angostura bitters }, { A Sugar cube }, { Water }, { Ice Cubes }, { Old Fashioned glass }, { Cocktail cherry } ] // then create the instructions to build an old fashioned which takes a list of ingredients as a parameter const buildAnOldFashioned = (... ingredients ) => { Place sugar cube in old fashioned glass (); then (); saturate with bitters (); then (); add a dash of plain water (); then (); Muddle until dissolved (); then (); Fill the glass with ice cubes (); then (); pour 1.5 ounce whiskey in to Old Fashioned glass (); finally (); Garnish with cocktail cherry (); return cocktail to guest (); } // pass the ingredients as an argument into the function to invoke the function buildAnOldFashioned ( oldFashionedIngredients ); You see, a function is just a recipe, written somewhere in a file, held in the memory of the computer, so it can be called/executed/invoked with certain ingredients/ arguments to return a desired result. Put another way, functions provide a way for us to perform the same task with any set of parameters , over and over. Think of a calculator which has a few simple functions (+, -, /, *) that are used over and over again with different arguments/numbers (0, 1, 2, 3, 4, 5, 6, 7, 8, 9). All other functions work this same way!!","title":"What are Functions"},{"location":"preCourse/functionSignatures/#rules-about-functions","text":"Functions must FIRST be declared before they can be invoked . Function declaration: const myFunc = (arg1) => { return arg1 + 2} Function invocations: myFunc(15), myFunc(10), myFunc(20) The returns of these functions would be: 17, 12 and 22 Functions must return something. Functions are camelCased just like variables. Functions should be named descriptively for their purposes and the data types that they return, i.e. isValidInput(input1) would be a function that evaluates if a value is true or false and it would return a Boolean type value. sumOfTwoNumbers(num1, num2) would be a function that takes two numbers and returns their sum. You can recognize when a function is being used by recognizing the () , examples: sumOfTwoNumbers(3, 4) - is a function that is being invoked/called/executed const divideTwoNumbers = (num1, num2) => { num1/num2} - is a function that is being declared/defined","title":"Rules About Functions"},{"location":"preCourse/functionSignatures/#more-examples","text":"Below is a JavaScript program called sumOfTwoNumbers that returns the sum of two numbers and is being called twice with different arguments. 1 2 3 4 5 6 7 8 // declaration with two parameters const sumOfTwoNumbers = ( num1 , num2 ) => { return num1 + num2 ; } // invocation with two arguments sumOfTwoNumbers ( 7 , 9 ) // => 16 sumOfTwoNumbers ( 300 , 400000 ); // => 400300 In the example below we see that function declarations have parameters but when we invoke a function we \"pass in\" arguments . 1 2 3 4 5 6 7 8 9 // Declare the function with parameters: a and b const productOfTwoNumbers = ( a , b ) => { const product = a * b ; return product + \" Yay! You returned something!\" ; } // Invoke the function with two arguments: 2 and 8 productOfTwoNumbers ( 2 , 8 ); Below, loadContent is a function, written in an o= older version of JavaScript that is being declared. Notice the function keyword. 1 2 3 4 function loadContent ( user ) { return \"content loaded\" } And this example is written the same way and also being invoked. 1 2 3 4 5 6 7 // the function declaration comes first function ourFunFunc () { return \"Thanks for putting me above where you invoked me\" ; } // Invoke the function below it ourFunFunc (); STOP !!! There's something that must be discussed! So far you've seen function signatures as: 1 const ourFunFunc = () => { } But just now you saw: 1 2 function ourFunFunc () { } What gives? Well, the one with the const is the newer and more preferred way of writing a function signature . Under the hood it provides better scope but that's not something you should worry about right now. We need you to be familiar with both because you will see both in the wild. However, get comfortable with using const functionName instead of the keyword function .","title":"More Examples"},{"location":"preCourse/functionSignatures/#know-your-docs","text":"MDN Docs - Function Declarations","title":"Know Your Docs"},{"location":"preCourse/functionSignatures/#additional-resources","text":"Intro to Functions in JS CAUTION: In this video he does a great job explaining function syntax, he uses a different keyword and syntax to declare constants and functions. He shouldn't be using let but instead should be using const for the function declarations.","title":"Additional Resources"},{"location":"preCourse/historyOfJavaScript/","text":"A VERY Brief History of JavaScript Taken from A Brief History of JavaScript written by Sebastian Peyrott at Auth0. Be sure to read the bullet points, they could help you in an interview someday... May-Dec 1995 Netscape Communicator and NCSA Mosaic were the first popular web browsers. Netscape was founded by the same people that built Mosaic, but now had money and time to build it better. Marc Andreessen, founder of Netscape Communications wanted the web to become more dynamic. Animations, interaction and other forms of small automation should be part of the web of the future. To do that they would need a small scripting language that could interact with the Document Object Model (DOM) (which was not set in stone as it is right now). And it should be accessible to non-developers, better yet for designers the way HTML already was. And so the idea of Mocha was born. Mocha was to become a scripting language for the web. Simple, dynamic, and accessible to non-developers. Brendan Eich , father of JavaScript, was contracted by Netscape Communications to develop a \"Scheme for the browser\". This Scheme was to be dynamic, powerful, and functional in nature, easy to grasp syntactically and to reduce verbosity and speed up development. There was a lot of pressure to come up with a working prototype as soon as possible. The Java (not JS!) language was starting to get traction. Sun Microsystems was making a big push for it and Netscape Communications was about to close a deal with them to make Java available in the browser. Enter a new language, Mocha. The idea at the time was that Java was not suited for the type of audience that would consume Mocha: Scripters, amateurs, designers. Java was just too big, too enterprisy (sic) for the role. There was a lot of internal pressure to pick one language as soon as possible. Python , Tcl and Scheme itself were all possible candidates. So Eich had to work fast. May 1995 - Eich had the luxury to choose features but had little time to build the language. In a matter of weeks, a working prototype was integrated into Netscape Communicator in May 1995. In the end, a Java-like syntax was required, and familiar semantics for many common idioms was also adopted. So Mocha was not like Scheme at all. It looked like a dynamic Java, but underneath it was a very different beast: a premature lovechild of Scheme and Self , with Java looks. Mocha was renamed to LiveScript . And later when Sun and Netscape closed the deal it was renamed JavaScript, a scripting language for small client-side tasks. Java would be promoted as a bigger, professional tool to develop rich web components. This first version of JavaScript set in stone many of the traits the language is known for today. In particular, its object-model , and its functional features were already present in this first version. August 1996 - At the moment (and for a very long time), web standards were not strong. So Microsoft implemented its own version of JavaScript, called JScript. JScript was different in more than just name. Slight differences in implementation, in particular with regards to certain DOM functions, caused ripples that would still be felt many years into the future. JavaScript wars were fought in more fronts than just names and timelines and many of its quirks are just the wounds of these wars. The first version of JScript was included with Internet Explorer 3.0, released in August 1996. In the fall of 1996, Eich rewrote most of Mocha into a cleaner implementation to pay off for the technical debt caused by rushing it out of the door. This new version of Netscape's JavaScript engine was called SpiderMonkey . SpiderMonkey is still the name of the JavaScript engine found in Firefox, Netscape Navigator's grandson. For the full article, that link again is A Brief History of JavaScript .","title":"History of JavaScript"},{"location":"preCourse/historyOfJavaScript/#a-very-brief-history-of-javascript","text":"Taken from A Brief History of JavaScript written by Sebastian Peyrott at Auth0. Be sure to read the bullet points, they could help you in an interview someday... May-Dec 1995 Netscape Communicator and NCSA Mosaic were the first popular web browsers. Netscape was founded by the same people that built Mosaic, but now had money and time to build it better. Marc Andreessen, founder of Netscape Communications wanted the web to become more dynamic. Animations, interaction and other forms of small automation should be part of the web of the future. To do that they would need a small scripting language that could interact with the Document Object Model (DOM) (which was not set in stone as it is right now). And it should be accessible to non-developers, better yet for designers the way HTML already was. And so the idea of Mocha was born. Mocha was to become a scripting language for the web. Simple, dynamic, and accessible to non-developers. Brendan Eich , father of JavaScript, was contracted by Netscape Communications to develop a \"Scheme for the browser\". This Scheme was to be dynamic, powerful, and functional in nature, easy to grasp syntactically and to reduce verbosity and speed up development. There was a lot of pressure to come up with a working prototype as soon as possible. The Java (not JS!) language was starting to get traction. Sun Microsystems was making a big push for it and Netscape Communications was about to close a deal with them to make Java available in the browser. Enter a new language, Mocha. The idea at the time was that Java was not suited for the type of audience that would consume Mocha: Scripters, amateurs, designers. Java was just too big, too enterprisy (sic) for the role. There was a lot of internal pressure to pick one language as soon as possible. Python , Tcl and Scheme itself were all possible candidates. So Eich had to work fast. May 1995 - Eich had the luxury to choose features but had little time to build the language. In a matter of weeks, a working prototype was integrated into Netscape Communicator in May 1995. In the end, a Java-like syntax was required, and familiar semantics for many common idioms was also adopted. So Mocha was not like Scheme at all. It looked like a dynamic Java, but underneath it was a very different beast: a premature lovechild of Scheme and Self , with Java looks. Mocha was renamed to LiveScript . And later when Sun and Netscape closed the deal it was renamed JavaScript, a scripting language for small client-side tasks. Java would be promoted as a bigger, professional tool to develop rich web components. This first version of JavaScript set in stone many of the traits the language is known for today. In particular, its object-model , and its functional features were already present in this first version. August 1996 - At the moment (and for a very long time), web standards were not strong. So Microsoft implemented its own version of JavaScript, called JScript. JScript was different in more than just name. Slight differences in implementation, in particular with regards to certain DOM functions, caused ripples that would still be felt many years into the future. JavaScript wars were fought in more fronts than just names and timelines and many of its quirks are just the wounds of these wars. The first version of JScript was included with Internet Explorer 3.0, released in August 1996. In the fall of 1996, Eich rewrote most of Mocha into a cleaner implementation to pay off for the technical debt caused by rushing it out of the door. This new version of Netscape's JavaScript engine was called SpiderMonkey . SpiderMonkey is still the name of the JavaScript engine found in Firefox, Netscape Navigator's grandson. For the full article, that link again is A Brief History of JavaScript .","title":"A VERY Brief History of JavaScript"},{"location":"preCourse/preClassChecklist/","text":"Pre-Class Checklist Before coming into class make sure you have all of the things you need to make your class time the most productive and successful possible! Bring the following items to class with you Growth Mindset Growth Mindset vs Fixed Mindset The Power of Believing - Carol Dweck Laptop Laptop charger Chrome installed VS Code installed GitHub account CodePen account Repl.it account (This will become a journal of code for you!!) Zollege profile RocketChat login info HackOverflow login info Medium account info Journal or writing pad (for notes and drawing) Pencils or pens Completely read and finished all the steps in the Pre-Course work Complete the CurrentDate and Time repos Make final payment Congratulations!! You're all set for class! We'll send you a final reminder email before day one but until then, \"We look forward to seeing you!\"","title":"Day 1 Checklist"},{"location":"preCourse/preClassChecklist/#pre-class-checklist","text":"Before coming into class make sure you have all of the things you need to make your class time the most productive and successful possible! Bring the following items to class with you Growth Mindset Growth Mindset vs Fixed Mindset The Power of Believing - Carol Dweck Laptop Laptop charger Chrome installed VS Code installed GitHub account CodePen account Repl.it account (This will become a journal of code for you!!) Zollege profile RocketChat login info HackOverflow login info Medium account info Journal or writing pad (for notes and drawing) Pencils or pens Completely read and finished all the steps in the Pre-Course work Complete the CurrentDate and Time repos Make final payment Congratulations!! You're all set for class! We'll send you a final reminder email before day one but until then, \"We look forward to seeing you!\"","title":"Pre-Class Checklist"},{"location":"preCourse/setupInstructions/","text":"Prepare Your Machine(Setup Your Computer) To work in the course you'll need four essential tools on your machine (computer): a web browser , a text editor , a terminal or terminal emulator (a.k.a. command line interface or CLI) and the Node.js runtime environment . The short checklist looks like this: Download Chrome Download VS Code Terminal: MacOS has a built-in terminal Windows 10+ has Command Prompt Windows <=9 will need to download GitBash Download Node See It Chrome When consuming content through the internet, users/we need a program that can render the streams of data sent to our computer (laptop or phone) from other computers (the cloud) through the internet. The general name for this type of program is called a browser. Yes, you can surf the internet with other browsers like Internet Explore, Edge, Opera, Firefox or Safari, but Chrome undoubtedly has the strongest built-in dev tools of any browser. In this course and all the following courses we\u2019ll be using Chrome. Be sure to download Chrome. After that: Master Bookmark Management Organized Your Bookmarks Shortcut Practice: Cmd + T = open new tab Shortcut Practice: Cmd + Shift + T = reopen last closed tab Shortcut Practice: Cmd + R = refresh the current tab Shortcut Practice: Cmd + W = close the current tab NOTE: For Windows machines use Ctrl instead of Cmd . VS Code A text editor is simply a tool used to edit your code and organize it into files before it is executed. There are plenty of text editors or IDEs including Atom, SublimeText, IntelliJ, Brackets, WebStorm, VIM, TextWrangler, RubyMine and even NotePad. Some are paid, others are free, but for our use-case and to get the most powerful text editor for the buck we're going to use the free and well-supported Visual Studio Code . Be sure to download it and then continue to read up on other text editors as you grow as a developer. IDEs and TextEditors Why VS Code Learn & Practice More Keyboard Shortcuts NOTE: VS Code, Visual Studio and VS Community are all different text editors . Think of the terminal or CLI (command line interface) as a shortcut to the computer. Normally we access our computer's programs and files through a GUI (graphical user interface, pronounced: \"gooey\"). A GUI is nice and pretty, but sometimes we need to access the computer more directly and in a more efficient way. We can do this using the command line interface, or command line for short. Terminal or Terminal Emulator A terminal or Command Line Interface(CLI) is a way for you to interact with your computer's core functionality without building a GUI. GUI are what we give to people that don't know how to work with computers. We learn to work in terminals because later on we'll be interacting with remote servers and the only way we can talk to them is sending them messages through a CLI command. Macs Mac users have a built in terminal. To access it, simply hold Cmd + Space A Spotlight search bar should appear. Type in \"terminal\" then hit Enter . But you'll need homebrew so run this in your terminal: /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" and say yes to XCode . [Learn how to work through your Mac terminal with a few short commands(https://youtu.be/5XgBd6rjuDQ)]. Windows 10+ Windows 10 comes built with Command Prompt , a command line interpreter. It acts the same way as the command line and is in this way a command line emulator. Open Command Prompt via the Command Prompt shortcut located in the Start menu or on the Apps screen, depending on your version of Windows. Learn how to use the Windows command line . Windows < 10 If you are using a pre-Windows 10 machine then you will need to download GitBash to work as your terminal emulator. Learn GitBash commands . NOTE: We'll use these terminals or terminal emulators throughout this course and each one afterward, so make sure you can access them for now. Node Node.js is a runtime environment that allows us to build applications(apps) in JavaScript and run them outside of a browser(the native place for JavaScript). With Node downloaded on our computer we'll be able to build terminal apps in 211, servers in 311 and web apps in 411! Go ahead and download Node but don't do anything with it until the Node Lesson later on. Node.js for Mac Node.js for Windows","title":"Prepare Your Machine"},{"location":"preCourse/setupInstructions/#prepare-your-machinesetup-your-computer","text":"To work in the course you'll need four essential tools on your machine (computer): a web browser , a text editor , a terminal or terminal emulator (a.k.a. command line interface or CLI) and the Node.js runtime environment . The short checklist looks like this: Download Chrome Download VS Code Terminal: MacOS has a built-in terminal Windows 10+ has Command Prompt Windows <=9 will need to download GitBash Download Node","title":"Prepare Your Machine(Setup Your Computer)"},{"location":"preCourse/setupInstructions/#see-it","text":"","title":"See It"},{"location":"preCourse/setupInstructions/#chrome","text":"When consuming content through the internet, users/we need a program that can render the streams of data sent to our computer (laptop or phone) from other computers (the cloud) through the internet. The general name for this type of program is called a browser. Yes, you can surf the internet with other browsers like Internet Explore, Edge, Opera, Firefox or Safari, but Chrome undoubtedly has the strongest built-in dev tools of any browser. In this course and all the following courses we\u2019ll be using Chrome. Be sure to download Chrome. After that: Master Bookmark Management Organized Your Bookmarks Shortcut Practice: Cmd + T = open new tab Shortcut Practice: Cmd + Shift + T = reopen last closed tab Shortcut Practice: Cmd + R = refresh the current tab Shortcut Practice: Cmd + W = close the current tab NOTE: For Windows machines use Ctrl instead of Cmd .","title":"Chrome"},{"location":"preCourse/setupInstructions/#vs-code","text":"A text editor is simply a tool used to edit your code and organize it into files before it is executed. There are plenty of text editors or IDEs including Atom, SublimeText, IntelliJ, Brackets, WebStorm, VIM, TextWrangler, RubyMine and even NotePad. Some are paid, others are free, but for our use-case and to get the most powerful text editor for the buck we're going to use the free and well-supported Visual Studio Code . Be sure to download it and then continue to read up on other text editors as you grow as a developer. IDEs and TextEditors Why VS Code Learn & Practice More Keyboard Shortcuts NOTE: VS Code, Visual Studio and VS Community are all different text editors . Think of the terminal or CLI (command line interface) as a shortcut to the computer. Normally we access our computer's programs and files through a GUI (graphical user interface, pronounced: \"gooey\"). A GUI is nice and pretty, but sometimes we need to access the computer more directly and in a more efficient way. We can do this using the command line interface, or command line for short.","title":"VS Code"},{"location":"preCourse/setupInstructions/#terminal-or-terminal-emulator","text":"A terminal or Command Line Interface(CLI) is a way for you to interact with your computer's core functionality without building a GUI. GUI are what we give to people that don't know how to work with computers. We learn to work in terminals because later on we'll be interacting with remote servers and the only way we can talk to them is sending them messages through a CLI command. Macs Mac users have a built in terminal. To access it, simply hold Cmd + Space A Spotlight search bar should appear. Type in \"terminal\" then hit Enter . But you'll need homebrew so run this in your terminal: /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" and say yes to XCode . [Learn how to work through your Mac terminal with a few short commands(https://youtu.be/5XgBd6rjuDQ)]. Windows 10+ Windows 10 comes built with Command Prompt , a command line interpreter. It acts the same way as the command line and is in this way a command line emulator. Open Command Prompt via the Command Prompt shortcut located in the Start menu or on the Apps screen, depending on your version of Windows. Learn how to use the Windows command line . Windows < 10 If you are using a pre-Windows 10 machine then you will need to download GitBash to work as your terminal emulator. Learn GitBash commands . NOTE: We'll use these terminals or terminal emulators throughout this course and each one afterward, so make sure you can access them for now.","title":"Terminal or Terminal Emulator"},{"location":"preCourse/setupInstructions/#node","text":"Node.js is a runtime environment that allows us to build applications(apps) in JavaScript and run them outside of a browser(the native place for JavaScript). With Node downloaded on our computer we'll be able to build terminal apps in 211, servers in 311 and web apps in 411! Go ahead and download Node but don't do anything with it until the Node Lesson later on. Node.js for Mac Node.js for Windows","title":"Node"},{"location":"preCourse/succeedInThisCourse/","text":"How to Succeed In This Course and This Career If you\u2019ve completed 101 you already know how important it is for you to complete all of the pre-lesson homeworks before coming into class. Why? Our instructors don\u2019t lecture in class. Instead, our instructors guide you through multiple challenges including logic problems, presentations, interview questions, and application programming challenges. To use the class time effectively you and all of your classmates must complete the assigned pre-homework. If you and your classmates do this you\u2019ll be able to get into class and really ask good questions, apply what you\u2019re learning at home and advance your skills more quickly. This program is built to accommodate full-time employment through part-time classes BUT you will not learn everything you need to learn in these 5 hours/week. YOU MUST READ, WATCH, PRACTICE, and RESEARCH on your own. Each of the sections in your pre-lesson homeworks have been honed in through years of training student-developers to focus on what they really need to learn in a very short amount of time. Trust the process, do the work, sacrifice time now for your future, and GSD ! Flipped Classroom: What The short? You read and study outside of class and apply that knowledge in class with the support of your classmates and instructor. No pride. No ego. No shame. A more academic definition can be found here . But the following videos do well to explain it well. Either way, this approach works and works well. The only challenge now is to shape your mindset around it. The Flipped Classroom: Why In the traditional classroom , the teacher is the central focus of a lesson. The teacher responds to questions while students defer directly to the teacher for guidance and feedback. In a classroom with a traditional style of instruction, individual lessons may be focused on an explanation of content utilizing a lecture-style. Typically, this pattern of teaching also involves giving students the task of reading from a textbook or practicing a concept by working on a problem set, for example, outside school. In a flipped classroom students are required to study the content of the lecture outside of class by reading, watching videos and fiddling with code. Class time with the instructor is then mostly reserved for questions over the content, small discussions of related topics and then dedicated guided practice time on each project. This way students get access to a professional programmer when they need it, during problems and struggles. This approach may feel difficult at first but this methodology has been proven to work and is well suited for both adult learners and part-time education. The Flipped Classroom: How WATCH, READ, PRACTICE, RESEARCH, AND WRITE Every Pre-Homework will have a video to WATCH. These videos are incredibly important to help build context for why you\u2019ll be learning the upcoming concept. Watch all videos that are given to you even if they\u2019re 30 mins, 60 mins or just 5 mins. Watch them all! They were built or chosen because they teach what we need you to learn. READ ALL of the pre-homework given to you. Each lesson has been carefully thought out and crafted to guide you through, sometimes, very complex or technically intricate processes. Make sure you understand the concepts by reading every article that\u2019s suggested. PRACTICE Most pre-homework will have Practice It sections where you can apply the lesson you\u2019ve just watched and read about. This section is where you actually learn! Don\u2019t cut yourself short. DO THE PRACTICE PROBLEM ! Put it in a Repl.it and don\u2019t stop fidgeting with it until you completely understand it. RESEARCH your questions! ALL questions can be answered on the internet. Don\u2019t wait until you get to class to answer low hanging fruit. Find it on the internet. Then you can use your class time to ask harder questions with deeper understanding. At the end of most pre-lesson homeworks you\u2019ll see a list of Terms to Know & Questions for Discussion . If you can\u2019t describe or answer them to another person you need to go look them up on Google, read or watch a video on them, then WRITE down your understanding of each one in your journal. WRITE your blogging questions every week. You\u2019ll see a lesson on creating your blog account on Medium.com in the Pre-Course Lessons, so you can publish your thoughts on multiple subjects. These questions are collected from various interviews from our graduates and online research to prepare you for the hardest interview you\u2019ve ever experienced , the one you\u2019ll go through for your first developer job. Today's Shortcut - YouTube Videos While watching YouTube videos, Type Shift + > to accelerate the play speed of a video. Shift + < to slow it down. Simply type L to jump ahead by 10 seconds. And J to go back 10 seconds. Type C to turn on/off captions.","title":"The Flipped Classroom"},{"location":"preCourse/succeedInThisCourse/#how-to-succeed-in-this-course-and-this-career","text":"If you\u2019ve completed 101 you already know how important it is for you to complete all of the pre-lesson homeworks before coming into class. Why? Our instructors don\u2019t lecture in class. Instead, our instructors guide you through multiple challenges including logic problems, presentations, interview questions, and application programming challenges. To use the class time effectively you and all of your classmates must complete the assigned pre-homework. If you and your classmates do this you\u2019ll be able to get into class and really ask good questions, apply what you\u2019re learning at home and advance your skills more quickly. This program is built to accommodate full-time employment through part-time classes BUT you will not learn everything you need to learn in these 5 hours/week. YOU MUST READ, WATCH, PRACTICE, and RESEARCH on your own. Each of the sections in your pre-lesson homeworks have been honed in through years of training student-developers to focus on what they really need to learn in a very short amount of time. Trust the process, do the work, sacrifice time now for your future, and GSD !","title":"How to Succeed In This Course and This Career"},{"location":"preCourse/succeedInThisCourse/#flipped-classroom-what","text":"The short? You read and study outside of class and apply that knowledge in class with the support of your classmates and instructor. No pride. No ego. No shame. A more academic definition can be found here . But the following videos do well to explain it well. Either way, this approach works and works well. The only challenge now is to shape your mindset around it.","title":"Flipped Classroom: What"},{"location":"preCourse/succeedInThisCourse/#the-flipped-classroom-why","text":"In the traditional classroom , the teacher is the central focus of a lesson. The teacher responds to questions while students defer directly to the teacher for guidance and feedback. In a classroom with a traditional style of instruction, individual lessons may be focused on an explanation of content utilizing a lecture-style. Typically, this pattern of teaching also involves giving students the task of reading from a textbook or practicing a concept by working on a problem set, for example, outside school. In a flipped classroom students are required to study the content of the lecture outside of class by reading, watching videos and fiddling with code. Class time with the instructor is then mostly reserved for questions over the content, small discussions of related topics and then dedicated guided practice time on each project. This way students get access to a professional programmer when they need it, during problems and struggles. This approach may feel difficult at first but this methodology has been proven to work and is well suited for both adult learners and part-time education.","title":"The Flipped Classroom: Why"},{"location":"preCourse/succeedInThisCourse/#the-flipped-classroom-how","text":"WATCH, READ, PRACTICE, RESEARCH, AND WRITE Every Pre-Homework will have a video to WATCH. These videos are incredibly important to help build context for why you\u2019ll be learning the upcoming concept. Watch all videos that are given to you even if they\u2019re 30 mins, 60 mins or just 5 mins. Watch them all! They were built or chosen because they teach what we need you to learn. READ ALL of the pre-homework given to you. Each lesson has been carefully thought out and crafted to guide you through, sometimes, very complex or technically intricate processes. Make sure you understand the concepts by reading every article that\u2019s suggested. PRACTICE Most pre-homework will have Practice It sections where you can apply the lesson you\u2019ve just watched and read about. This section is where you actually learn! Don\u2019t cut yourself short. DO THE PRACTICE PROBLEM ! Put it in a Repl.it and don\u2019t stop fidgeting with it until you completely understand it. RESEARCH your questions! ALL questions can be answered on the internet. Don\u2019t wait until you get to class to answer low hanging fruit. Find it on the internet. Then you can use your class time to ask harder questions with deeper understanding. At the end of most pre-lesson homeworks you\u2019ll see a list of Terms to Know & Questions for Discussion . If you can\u2019t describe or answer them to another person you need to go look them up on Google, read or watch a video on them, then WRITE down your understanding of each one in your journal. WRITE your blogging questions every week. You\u2019ll see a lesson on creating your blog account on Medium.com in the Pre-Course Lessons, so you can publish your thoughts on multiple subjects. These questions are collected from various interviews from our graduates and online research to prepare you for the hardest interview you\u2019ve ever experienced , the one you\u2019ll go through for your first developer job.","title":"The Flipped Classroom: How"},{"location":"preCourse/succeedInThisCourse/#todays-shortcut-youtube-videos","text":"While watching YouTube videos, Type Shift + > to accelerate the play speed of a video. Shift + < to slow it down. Simply type L to jump ahead by 10 seconds. And J to go back 10 seconds. Type C to turn on/off captions.","title":"Today's Shortcut - YouTube Videos"},{"location":"preCourse/testDriveDevelopmentIntro/","text":"TDD While you will be learning the basics of programming and coding in JavaScript/Node in this course it is important to understand bigger concepts that apply to software development teams. One of these includes test-driven development or TDD. TDD is an approach used by many companies, teams, and individuals that promotes development of software through the use of small tests that test for specific requirements of the software before any of the code is written for the software. This approach gives the team confidence to know that each line of code they write is useful and will get them closer to their end goal, a functional, non-buggy application. Of course, you are still learning and will not be able to implement these high level procedures right from the beginning. Take this pressure off of yourself right now, and just know that you will get to TDD when you can. In the meantime, know that throughout this course you will be using repos that have unit tests built into each application. These tests are meant to test your application against real-world and edge-case scenarios. You can use these tests as guides when building your applications but also as templates to learn and build more tests. In fact, you will be asked to write multiple tests throughout this course and it is highly encouraged that you learn as much about testing as possible as this is a highly in-demand skill that will set you apart from other candidates during your job hunt. Additional Resources TDD","title":"Intro to TDD"},{"location":"preCourse/testDriveDevelopmentIntro/#tdd","text":"While you will be learning the basics of programming and coding in JavaScript/Node in this course it is important to understand bigger concepts that apply to software development teams. One of these includes test-driven development or TDD. TDD is an approach used by many companies, teams, and individuals that promotes development of software through the use of small tests that test for specific requirements of the software before any of the code is written for the software. This approach gives the team confidence to know that each line of code they write is useful and will get them closer to their end goal, a functional, non-buggy application. Of course, you are still learning and will not be able to implement these high level procedures right from the beginning. Take this pressure off of yourself right now, and just know that you will get to TDD when you can. In the meantime, know that throughout this course you will be using repos that have unit tests built into each application. These tests are meant to test your application against real-world and edge-case scenarios. You can use these tests as guides when building your applications but also as templates to learn and build more tests. In fact, you will be asked to write multiple tests throughout this course and it is highly encouraged that you learn as much about testing as possible as this is a highly in-demand skill that will set you apart from other candidates during your job hunt.","title":"TDD"},{"location":"preCourse/testDriveDevelopmentIntro/#additional-resources","text":"TDD","title":"Additional Resources"},{"location":"preCourse/typeBoolean/","text":"Type Boolean The next easiest data type for us to begin learning with is, undoubtedly, Boolean. A Boolean is darn simple, it can only be one of two things: true or false! Let's say that again, a Boolean data type can only be true or false. That's it. It may sound simple, but really, Booleans are the most useful of the data types because they determine on/off, yes/no, do/do not so all other data types can be used. Take a look... What's False and What's True? All values in JavaScript can be summed up as having a true or false value. That is to say, all values can be evaluated as either having a true value or a false value. We often use the terms \"truthy\" or \"falsey\" to say this very thing. A 0 will evaluate to false while a 1 would be evaluated as true . However, a pure Boolean value just means it's either true or false . The code snippet below shows two variables that hold these two different values: 1 2 const myVariableOne = true const myVariableTwo = false But when we're asking if another value is \"truthy\" or \"falsey\" it just means what is the value of the value or is the value actually there (does it actually exist). Let's start with \"falsey\" values. Here is a complete list of ALL JavaScript values that will evaluate to \"falsey\": undefined , NaN , Null , 0 , -0 , false , '' or \"\" ( empty strings ) This means that LITERALLY every other value in JavaScript (literally everything else) will evaluate to \"truthy\". ie. true , 10 , \"name\" , '.'. The Power of Booleans in JavaScript Think about the process of signing into your favorite app. When you type your username and password in, the front-end app sends that information to the server which has to use your username to pull your info out of a database and compare your inputted password to your actual password that's saved in the database. If the two passwords match, this is a true evaluation and you can be logged into your account. If not, that would be a false value. While programming we will perform various evaluations on Boolean values , in order to produce some kind of result. When properly implemented, they're kind of like asking a \"yes or no\" question about some piece of data at a particular point in your application. When we get a \"yes/no\" answer we can then start performing \"if/else\" procedures. Do you see where this is going yet? Back to that sign-in process. We could write: 1 2 3 4 5 if ( inputtedPassword === actualPassword ) { return logUserIn () } else { return \"Wrong username or password. Please try again.\" } We'll talk about if/else statements, also known as conditional statements , in a few lessons, but by now you might be able to see why we need to have and to use Boolean values. The Comparison Operators As you learned in the last section the = is known as the assignment operator because it points, or assigns value to a variable. We still need to compare values so let's look at how we can do that. The Double-Equals \"==\" vs the Triple-Equals \"===\" If we want to compare values we'll need to use two variations of the equal sign: == , checks if two values are equal. === , first checks if two values are of the same type then checks if the values are equal. The two tokens/symbols above are doing two different things but also the same thing. One is checking if things are equal, ==. BUT, because JavaScript likes to coerce data types, we have to use the === on occasion to first check the type of data then to check the equality of the values. Check out the examples below: 1 2 3 4 5 6 7 8 64 == '64' // true 64 == 'sixty-four' // false // the string 'sixty-four' won't be coerced but '64' will be 64 === '64' // false // 64 is of type Number where '64' is of type String so they are not equal in the strictest sense Let's look at each a little more closely on an individual basis. Value Only Comparison, \"==\" The == is used to compare values. 1 2 3 'blue' == 'blue' // true // or 'blue' == 'black' // false Above we see that the string blue equals blue but does not equal black . Now that you have that down, check this craziness out. Below, the string '3' equals the number 3 : 1 3 == '3' // true If you use the == in a comparison like the one above, JavaScript will try to coerce the String type of '3' into a Number type 3 and then compare the two. Again, JavaScript will try to change the string of \"3\" to the number of 3 and will result in the comparison being true . There is a big problem here. JS is type switching the type of one of our pieces of data and we don't want that!! This can result in poor program behavior, or side-effects . Because of this problem, there was a patch to the JavaScript language which introduced the Identity Operator , or Strictly Equals (slang): === . Strictly Equals: \"===\" To fix this problem of type switching or type coercion we use the identity operator . It looks like this: === . And it not only evaluates equality but also evaluates type of data, first. That is, it won't perform an evaluation unless the data types first match each other. Therefore: 1 3 === '3' // false Strictly equals === is much safer, since each operand gets tested by its data type first . 1 2 1 === '1' // false 1 === 1 // true This doesn't mean you can't use == but you will hear most developers say that you can't. Word to the wise, always know what you're writing and what you intend it to do. If you feel a == works in the case do it. Otherwise, stay with the safer === . This will be a debate you'll have for years to come. Practice It Read the code below and try to guess what the console.log will be. In other words, what will each line log out? Copy the console logs below and paste them into your text-editor and run them. Why do you think line 9 and 10 logged out different values? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 console . log ( \"line 1 is: \" + ( 1 === 1 )); console . log ( 2 === 1 ); console . log ( \"yes\" === \"yes\" ); console . log ( \"yes\" === \"no\" ); console . log ( \"line 5 is: \" + ( true === true )); console . log ( true === false ); console . log ( 1.2 === 1.2 ); console . log ( 1.2 === 1.20 ); console . log ( \"line 9 is: \" + ( 12 === '12' )); console . log ( \"line 10 is: \" + ( 12 == '12' )); NOTE: console.log() - the console is your \"terminal\" object in your browser and .log() is a built-in method that prints information on it. NOTE 2: Now that you've downloaded Node.js you can use it to run scripts like this in your computer's terminal by running the command node + Enter . The press ++cntrl+c+ twice to exit. Know Your Docs MDN Docs - Type Boolean","title":"Type Boolean"},{"location":"preCourse/typeBoolean/#type-boolean","text":"The next easiest data type for us to begin learning with is, undoubtedly, Boolean. A Boolean is darn simple, it can only be one of two things: true or false! Let's say that again, a Boolean data type can only be true or false. That's it. It may sound simple, but really, Booleans are the most useful of the data types because they determine on/off, yes/no, do/do not so all other data types can be used. Take a look...","title":"Type Boolean"},{"location":"preCourse/typeBoolean/#whats-false-and-whats-true","text":"All values in JavaScript can be summed up as having a true or false value. That is to say, all values can be evaluated as either having a true value or a false value. We often use the terms \"truthy\" or \"falsey\" to say this very thing. A 0 will evaluate to false while a 1 would be evaluated as true . However, a pure Boolean value just means it's either true or false . The code snippet below shows two variables that hold these two different values: 1 2 const myVariableOne = true const myVariableTwo = false But when we're asking if another value is \"truthy\" or \"falsey\" it just means what is the value of the value or is the value actually there (does it actually exist). Let's start with \"falsey\" values. Here is a complete list of ALL JavaScript values that will evaluate to \"falsey\": undefined , NaN , Null , 0 , -0 , false , '' or \"\" ( empty strings ) This means that LITERALLY every other value in JavaScript (literally everything else) will evaluate to \"truthy\". ie. true , 10 , \"name\" , '.'.","title":"What's False and What's True?"},{"location":"preCourse/typeBoolean/#the-power-of-booleans-in-javascript","text":"Think about the process of signing into your favorite app. When you type your username and password in, the front-end app sends that information to the server which has to use your username to pull your info out of a database and compare your inputted password to your actual password that's saved in the database. If the two passwords match, this is a true evaluation and you can be logged into your account. If not, that would be a false value. While programming we will perform various evaluations on Boolean values , in order to produce some kind of result. When properly implemented, they're kind of like asking a \"yes or no\" question about some piece of data at a particular point in your application. When we get a \"yes/no\" answer we can then start performing \"if/else\" procedures. Do you see where this is going yet? Back to that sign-in process. We could write: 1 2 3 4 5 if ( inputtedPassword === actualPassword ) { return logUserIn () } else { return \"Wrong username or password. Please try again.\" } We'll talk about if/else statements, also known as conditional statements , in a few lessons, but by now you might be able to see why we need to have and to use Boolean values.","title":"The Power of Booleans in JavaScript"},{"location":"preCourse/typeBoolean/#the-comparison-operators","text":"As you learned in the last section the = is known as the assignment operator because it points, or assigns value to a variable. We still need to compare values so let's look at how we can do that.","title":"The Comparison Operators"},{"location":"preCourse/typeBoolean/#the-double-equals-vs-the-triple-equals","text":"If we want to compare values we'll need to use two variations of the equal sign: == , checks if two values are equal. === , first checks if two values are of the same type then checks if the values are equal. The two tokens/symbols above are doing two different things but also the same thing. One is checking if things are equal, ==. BUT, because JavaScript likes to coerce data types, we have to use the === on occasion to first check the type of data then to check the equality of the values. Check out the examples below: 1 2 3 4 5 6 7 8 64 == '64' // true 64 == 'sixty-four' // false // the string 'sixty-four' won't be coerced but '64' will be 64 === '64' // false // 64 is of type Number where '64' is of type String so they are not equal in the strictest sense Let's look at each a little more closely on an individual basis.","title":"The Double-Equals \"==\" vs the Triple-Equals \"===\""},{"location":"preCourse/typeBoolean/#value-only-comparison","text":"The == is used to compare values. 1 2 3 'blue' == 'blue' // true // or 'blue' == 'black' // false Above we see that the string blue equals blue but does not equal black . Now that you have that down, check this craziness out. Below, the string '3' equals the number 3 : 1 3 == '3' // true If you use the == in a comparison like the one above, JavaScript will try to coerce the String type of '3' into a Number type 3 and then compare the two. Again, JavaScript will try to change the string of \"3\" to the number of 3 and will result in the comparison being true . There is a big problem here. JS is type switching the type of one of our pieces of data and we don't want that!! This can result in poor program behavior, or side-effects . Because of this problem, there was a patch to the JavaScript language which introduced the Identity Operator , or Strictly Equals (slang): === .","title":"Value Only Comparison, \"==\""},{"location":"preCourse/typeBoolean/#strictly-equals","text":"To fix this problem of type switching or type coercion we use the identity operator . It looks like this: === . And it not only evaluates equality but also evaluates type of data, first. That is, it won't perform an evaluation unless the data types first match each other. Therefore: 1 3 === '3' // false Strictly equals === is much safer, since each operand gets tested by its data type first . 1 2 1 === '1' // false 1 === 1 // true This doesn't mean you can't use == but you will hear most developers say that you can't. Word to the wise, always know what you're writing and what you intend it to do. If you feel a == works in the case do it. Otherwise, stay with the safer === . This will be a debate you'll have for years to come.","title":"Strictly Equals: \"===\""},{"location":"preCourse/typeBoolean/#practice-it","text":"Read the code below and try to guess what the console.log will be. In other words, what will each line log out? Copy the console logs below and paste them into your text-editor and run them. Why do you think line 9 and 10 logged out different values? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 console . log ( \"line 1 is: \" + ( 1 === 1 )); console . log ( 2 === 1 ); console . log ( \"yes\" === \"yes\" ); console . log ( \"yes\" === \"no\" ); console . log ( \"line 5 is: \" + ( true === true )); console . log ( true === false ); console . log ( 1.2 === 1.2 ); console . log ( 1.2 === 1.20 ); console . log ( \"line 9 is: \" + ( 12 === '12' )); console . log ( \"line 10 is: \" + ( 12 == '12' )); NOTE: console.log() - the console is your \"terminal\" object in your browser and .log() is a built-in method that prints information on it. NOTE 2: Now that you've downloaded Node.js you can use it to run scripts like this in your computer's terminal by running the command node + Enter . The press ++cntrl+c+ twice to exit.","title":"Practice It"},{"location":"preCourse/typeBoolean/#know-your-docs","text":"MDN Docs - Type Boolean","title":"Know Your Docs"},{"location":"preCourse/typeNumber/","text":"Type Number & Basic Mathematic Operators Obviously in a calculator we have the basic calculation: +, -, /, *. When we program we also have access to these operations. In JavaScript: + means add - means subtract * means multiply / means divide ** means exponent In JavaScript, however, when we use the = token, it means \"assign\" or \"point\" rather than equals. There for its called the Assignment Operator ...because it assigns value to a variable. In our calculator, to return the value of a calculation, we use the keyword return like so: 1 2 3 4 5 6 7 const addTwoNumbers = ( num1 , num2 ) => { return num1 + num2 } addTwoNumbers ( 7 , 54 ) //expected return value >>> 61 The Modulus Operator The last operator we might want to use on our Numbers is called modulus, as in 11%5 equals 1 . Try it in your console. When we want the remainder of a division operation we use the % operator. This just means that we can divide a number by another number and get the remainder . I.e. 5 divided by 2 has a remainder of 1 because 2 will go into it twice with one left over. That operation in JavaScript would look like this: 1 5 % 2 // expected return => 1 Perhaps the most useful purpose of this operator is to decide if a number is even or not. If the return of the modulus operation by 2 is 0 then the number must be even: 1 2 3 4 5 6 7 8 9 10 11 60 % 2 // => 0, even 61 % 2 // => 1, odd 100 % 2 // => 0, even 101 % 2 // => 1, odd 22 % 2 // => 0, even 23 % 2 // => 1, odd 10 % 2 // => 0, even 11 % 2 // => 1, odd Built-In Methods of Data Type: Number Those built-in functionalities we call methods are very useful, as you'll see later on, but for the type Number, there are actually not that many to talk about, which makes for a very easy entry into methods. The built-in methods for type Number are: toString() toExponential() toFixed() toPrecision() Additionally, we have 3 JavaScript Methods to help us to convert numbers: Number() - converts a string to a number parseInt() - converts a number to a string parseFloat() - converts a string to a decimal number 1 2 3 4 5 const x = 123 ; x . toString (); // returns 123 from variable x ( 125 ). toString (); // returns 123 from literal 125 ( 100 + 23 ). toString (); // returns 123 from expression 100 + 23 Know Your Docs MDN Docs - Type Number MDN Docs - JS Operators Additional Resources Terms of a Division Equation","title":"Type Number"},{"location":"preCourse/typeNumber/#type-number-basic-mathematic-operators","text":"Obviously in a calculator we have the basic calculation: +, -, /, *. When we program we also have access to these operations. In JavaScript: + means add - means subtract * means multiply / means divide ** means exponent In JavaScript, however, when we use the = token, it means \"assign\" or \"point\" rather than equals. There for its called the Assignment Operator ...because it assigns value to a variable. In our calculator, to return the value of a calculation, we use the keyword return like so: 1 2 3 4 5 6 7 const addTwoNumbers = ( num1 , num2 ) => { return num1 + num2 } addTwoNumbers ( 7 , 54 ) //expected return value >>> 61","title":"Type Number &amp; Basic Mathematic Operators"},{"location":"preCourse/typeNumber/#the-modulus-operator","text":"The last operator we might want to use on our Numbers is called modulus, as in 11%5 equals 1 . Try it in your console. When we want the remainder of a division operation we use the % operator. This just means that we can divide a number by another number and get the remainder . I.e. 5 divided by 2 has a remainder of 1 because 2 will go into it twice with one left over. That operation in JavaScript would look like this: 1 5 % 2 // expected return => 1 Perhaps the most useful purpose of this operator is to decide if a number is even or not. If the return of the modulus operation by 2 is 0 then the number must be even: 1 2 3 4 5 6 7 8 9 10 11 60 % 2 // => 0, even 61 % 2 // => 1, odd 100 % 2 // => 0, even 101 % 2 // => 1, odd 22 % 2 // => 0, even 23 % 2 // => 1, odd 10 % 2 // => 0, even 11 % 2 // => 1, odd","title":"The Modulus Operator"},{"location":"preCourse/typeNumber/#built-in-methods-of-data-type-number","text":"Those built-in functionalities we call methods are very useful, as you'll see later on, but for the type Number, there are actually not that many to talk about, which makes for a very easy entry into methods. The built-in methods for type Number are: toString() toExponential() toFixed() toPrecision() Additionally, we have 3 JavaScript Methods to help us to convert numbers: Number() - converts a string to a number parseInt() - converts a number to a string parseFloat() - converts a string to a decimal number 1 2 3 4 5 const x = 123 ; x . toString (); // returns 123 from variable x ( 125 ). toString (); // returns 123 from literal 125 ( 100 + 23 ). toString (); // returns 123 from expression 100 + 23","title":"Built-In Methods of Data Type: Number"},{"location":"preCourse/typeNumber/#know-your-docs","text":"MDN Docs - Type Number MDN Docs - JS Operators","title":"Know Your Docs"},{"location":"preCourse/typeNumber/#additional-resources","text":"Terms of a Division Equation","title":"Additional Resources"},{"location":"preCourse/typeofOperator/","text":"typeof Operator Although we haven't covered all of the data types in JavaScript yet, you'll need to know about this special operator to complete your first assignment: CurrentDate & Time . So let's get this short and easy one out of the way!! What's the Problem? To effectively work with data, we need to know the type of data we're working with. Often times we wouldn't know what type of data is coming back to us because, as front-end developers, we usually don't build the back-end that we pull the data from. So we don't always know what to expect in the returned data stream . This presents problems because if the object we're trying to access is of type Array it won't have the same methods built into it as a standard JS object, and vice versa. To tell us what type of data we're working with we use the typeof operator. How Does it Work? The typeof operator simply returns the data type of a variable or JavaScript object. Using typeof is just like asking the JavaScript engine: \"What type of data is this thing?\" It's really useful when you get into the end of this 211 course and all of 311 because you will be requesting \"things\" (objects) from a remote database and you won't know exactly what type of data you're getting back...maybe it's a string, ...maybe it's a number, ...maybe it's an object-literal! With the built-in tool, typeof , you won't have to guess! Check out the example below: 1 2 3 4 5 6 7 const variableOne = 0 const variableTwo = \"Peter\" const variableThree = { id : 350 , name : \"Peter\" } typeof variableOne // => of type Number typeof variableTwo // => of type String typeof variableThree // => of type Object Now run the code below in a Repl.it to see what each logs out for each line. 1 2 3 4 5 6 7 8 9 10 console . log ( 'typeof \"I love JS!\"' , typeof \"I love JS!\" ); console . log ( 'typeof 1.08' , typeof 1.08 ); console . log ( 'typeof NaN' , typeof NaN ); console . log ( 'typeof false' , typeof false ); console . log ( 'typeof [1, 2, 3, 4]' , typeof [ 1 , 2 , 3 , 4 ]); console . log ( 'typeof {name:' Victoria ', age:26}' ); console . log ( 'typeof new Date()' , typeof new Date ()); console . log ( 'typeof function () {}' , typeof function () {}); console . log ( 'typeof myCar' , typeof myCar ); console . log ( 'typeof null' , typeof null ); Try this yourself on another piece of data in a Repl.it. Play. Have fun! Write it down and remember to use it. Know Your Docs MDN Docs - typeof Operator","title":"typeof Operator"},{"location":"preCourse/typeofOperator/#typeof-operator","text":"Although we haven't covered all of the data types in JavaScript yet, you'll need to know about this special operator to complete your first assignment: CurrentDate & Time . So let's get this short and easy one out of the way!!","title":"typeof Operator"},{"location":"preCourse/typeofOperator/#whats-the-problem","text":"To effectively work with data, we need to know the type of data we're working with. Often times we wouldn't know what type of data is coming back to us because, as front-end developers, we usually don't build the back-end that we pull the data from. So we don't always know what to expect in the returned data stream . This presents problems because if the object we're trying to access is of type Array it won't have the same methods built into it as a standard JS object, and vice versa. To tell us what type of data we're working with we use the typeof operator.","title":"What's the Problem?"},{"location":"preCourse/typeofOperator/#how-does-it-work","text":"The typeof operator simply returns the data type of a variable or JavaScript object. Using typeof is just like asking the JavaScript engine: \"What type of data is this thing?\" It's really useful when you get into the end of this 211 course and all of 311 because you will be requesting \"things\" (objects) from a remote database and you won't know exactly what type of data you're getting back...maybe it's a string, ...maybe it's a number, ...maybe it's an object-literal! With the built-in tool, typeof , you won't have to guess! Check out the example below: 1 2 3 4 5 6 7 const variableOne = 0 const variableTwo = \"Peter\" const variableThree = { id : 350 , name : \"Peter\" } typeof variableOne // => of type Number typeof variableTwo // => of type String typeof variableThree // => of type Object Now run the code below in a Repl.it to see what each logs out for each line. 1 2 3 4 5 6 7 8 9 10 console . log ( 'typeof \"I love JS!\"' , typeof \"I love JS!\" ); console . log ( 'typeof 1.08' , typeof 1.08 ); console . log ( 'typeof NaN' , typeof NaN ); console . log ( 'typeof false' , typeof false ); console . log ( 'typeof [1, 2, 3, 4]' , typeof [ 1 , 2 , 3 , 4 ]); console . log ( 'typeof {name:' Victoria ', age:26}' ); console . log ( 'typeof new Date()' , typeof new Date ()); console . log ( 'typeof function () {}' , typeof function () {}); console . log ( 'typeof myCar' , typeof myCar ); console . log ( 'typeof null' , typeof null ); Try this yourself on another piece of data in a Repl.it. Play. Have fun! Write it down and remember to use it.","title":"How Does it Work?"},{"location":"preCourse/typeofOperator/#know-your-docs","text":"MDN Docs - typeof Operator","title":"Know Your Docs"},{"location":"preCourse/variablesAndFunctions/","text":"Practice Variables and Functions The mind is everything. What you think you become. \u2014Buddha What's a Variable A variable in JavaScript is just a \"bucket\" to put data inside. It's a means of storage for values we'll need to use, access, compare, or manipulate later as we're programming. In a variable we can store any type of data, from a person's name to a person's phone number from a list of a person's friends to a collection of a person's interests\u2014we can hold anything in this variable \"bucket\". Imagine you're holding two apples in either hand. You could compare the two pieces of data , \"apple A\" and \"apple B\", to one another with your two variables , your left hand and your right hand. In JavaScript, to use a variable you must: Declare the variables name let myVariable Assign it a value with the = operator And define its value by putting the value after the = : let myProblems = 99 The name must start with a letter, not a number , and must not be a reserved word in JavaScript. JavaScript is a case sensitive language. const Score and const score would be treated as two different variables. Declare and name variables once and only once . Declare A Variable In older versions of JS you'll see the keyword var BUT DO NOT USE THIS WORD FOR ANYTHING YOU BUILD in the future! The var keyword is out of date/ deprecated . Instead use one of the two other keyword: let or const The simplest, way to remember which to use is make all variables a const until you realize its value needs to dynamically change them make it a let . You can name your variables almost anything you want, i.e. myVariable , user , bonsaiTree , but there are some guidelines, see below : Descriptive Naming - remember: variables are for us humans to reference later. It's helpful for you and your team if you name a variable what you expect to be in the variable, i.e. userPhoneNumber is better than userNumber . camelCased - first letter is lower-cased, all other words will have their first letter upper-cased. Assign Simply use the token/symbol = to assign a value to a variable. The Assignment Operator , = , does not mean \"equal\". Instead it means \"this is set to the value of...\" i.e. in const userName = \"Joseph\" , \"userName\" is set to the value of \"Joseph\". Define The last step to creating a variable is to define its value. In the next lesson we'll learn what types of values you can place in a variable but for now here are examples of what values can go in a variable: 1 2 3 4 const myVariable = true const user = \"Pete Williams\" const bonsaiTree = { size : \"small\" , age : 404 } const score = 900 Know Your Docs From here on out, you'll see this section telling you to go to the linked website and BOOKMARK the page so you can easily reference it. It's not important that you memorize everything in JavaScript, only that you know how to find what you're looking for. Let's start by reading the syntax of a variable in JS and bookmarking it in a bookmark folder called \"JavaScript\". W3S Docs - JS Reserved Words W3S Docs - Syntax of a Variable in JS Practice It Go to the CodePen below, click the top-right corner \"Edit on CodePen\" Sign-in and Fork it to your account (button at the very bottom to the right). If not already collapsed, drag the HTML and CSS windows to the left so you're only looking at the JS file. If not open, click on the console button at the very bottom left to open the console. Then click the clear button at the top right of the console. Follow the instructions listed in the code comments after the // See the Pen Variable&DataTypesPractice by Austin Coding Academy ( @austincoding ) on CodePen .","title":"Variables & Functions"},{"location":"preCourse/variablesAndFunctions/#practice-variables-and-functions","text":"The mind is everything. What you think you become. \u2014Buddha","title":"Practice Variables and Functions"},{"location":"preCourse/variablesAndFunctions/#whats-a-variable","text":"A variable in JavaScript is just a \"bucket\" to put data inside. It's a means of storage for values we'll need to use, access, compare, or manipulate later as we're programming. In a variable we can store any type of data, from a person's name to a person's phone number from a list of a person's friends to a collection of a person's interests\u2014we can hold anything in this variable \"bucket\". Imagine you're holding two apples in either hand. You could compare the two pieces of data , \"apple A\" and \"apple B\", to one another with your two variables , your left hand and your right hand. In JavaScript, to use a variable you must: Declare the variables name let myVariable Assign it a value with the = operator And define its value by putting the value after the = : let myProblems = 99 The name must start with a letter, not a number , and must not be a reserved word in JavaScript. JavaScript is a case sensitive language. const Score and const score would be treated as two different variables. Declare and name variables once and only once .","title":"What's a Variable"},{"location":"preCourse/variablesAndFunctions/#declare-a-variable","text":"In older versions of JS you'll see the keyword var BUT DO NOT USE THIS WORD FOR ANYTHING YOU BUILD in the future! The var keyword is out of date/ deprecated . Instead use one of the two other keyword: let or const The simplest, way to remember which to use is make all variables a const until you realize its value needs to dynamically change them make it a let . You can name your variables almost anything you want, i.e. myVariable , user , bonsaiTree , but there are some guidelines, see below : Descriptive Naming - remember: variables are for us humans to reference later. It's helpful for you and your team if you name a variable what you expect to be in the variable, i.e. userPhoneNumber is better than userNumber . camelCased - first letter is lower-cased, all other words will have their first letter upper-cased.","title":"Declare A Variable"},{"location":"preCourse/variablesAndFunctions/#assign","text":"Simply use the token/symbol = to assign a value to a variable. The Assignment Operator , = , does not mean \"equal\". Instead it means \"this is set to the value of...\" i.e. in const userName = \"Joseph\" , \"userName\" is set to the value of \"Joseph\".","title":"Assign"},{"location":"preCourse/variablesAndFunctions/#define","text":"The last step to creating a variable is to define its value. In the next lesson we'll learn what types of values you can place in a variable but for now here are examples of what values can go in a variable: 1 2 3 4 const myVariable = true const user = \"Pete Williams\" const bonsaiTree = { size : \"small\" , age : 404 } const score = 900","title":"Define"},{"location":"preCourse/variablesAndFunctions/#know-your-docs","text":"From here on out, you'll see this section telling you to go to the linked website and BOOKMARK the page so you can easily reference it. It's not important that you memorize everything in JavaScript, only that you know how to find what you're looking for. Let's start by reading the syntax of a variable in JS and bookmarking it in a bookmark folder called \"JavaScript\". W3S Docs - JS Reserved Words W3S Docs - Syntax of a Variable in JS","title":"Know Your Docs"},{"location":"preCourse/variablesAndFunctions/#practice-it","text":"Go to the CodePen below, click the top-right corner \"Edit on CodePen\" Sign-in and Fork it to your account (button at the very bottom to the right). If not already collapsed, drag the HTML and CSS windows to the left so you're only looking at the JS file. If not open, click on the console button at the very bottom left to open the console. Then click the clear button at the top right of the console. Follow the instructions listed in the code comments after the // See the Pen Variable&DataTypesPractice by Austin Coding Academy ( @austincoding ) on CodePen .","title":"Practice It"},{"location":"preCourse/whatIsJavaScript/","text":"What is JavaScript First off, JavaScript is nothing even close to Java. Please do not confuse the two . The naming of JavaScript was a marketing tactic at the time of creation to make programmers feel comfortable with the new language and increase its popularity. In short, Java is to JavaScript as car is to carpet . Unlike HTML and CSS, JavaScript (JS) is a programming language. Instead of rendering content and telling it how it should look, JavaScript can decide what will be rendered, when it will be rendered, why it will be rendered, how it will be rendered and how much of it to be rendered on the screen. JS can control the flow of elements, information, and interactions. Think of it this way: If HTML is the bones of your web page and CSS is the meat and fat that fleshes it out, then JS is the brains that control the movement and flow of everything on the web page. At first, JS will seem daunting. In time you'll find it really isn't but because you've been working mostly in HTML and CSS it will feel overwhelming. I promise you it isn't and you will get it. But it will take a little bit of time and effort. Also, by learning JS you are simultaneously learning the fundamentals of programming which will make all other programming languages come easier later on. You're doing the hard work now! Strongly Suggested Additional Resources MDN Docs - What is JavaScript . Tutorial - \"Playing with browser objects\" Video - What Went Wrong? Troubleshooting JavaScript . Video - What Is JavaScript","title":"What is JavaScript"},{"location":"preCourse/whatIsJavaScript/#what-is-javascript","text":"First off, JavaScript is nothing even close to Java. Please do not confuse the two . The naming of JavaScript was a marketing tactic at the time of creation to make programmers feel comfortable with the new language and increase its popularity. In short, Java is to JavaScript as car is to carpet . Unlike HTML and CSS, JavaScript (JS) is a programming language. Instead of rendering content and telling it how it should look, JavaScript can decide what will be rendered, when it will be rendered, why it will be rendered, how it will be rendered and how much of it to be rendered on the screen. JS can control the flow of elements, information, and interactions. Think of it this way: If HTML is the bones of your web page and CSS is the meat and fat that fleshes it out, then JS is the brains that control the movement and flow of everything on the web page. At first, JS will seem daunting. In time you'll find it really isn't but because you've been working mostly in HTML and CSS it will feel overwhelming. I promise you it isn't and you will get it. But it will take a little bit of time and effort. Also, by learning JS you are simultaneously learning the fundamentals of programming which will make all other programming languages come easier later on. You're doing the hard work now!","title":"What is JavaScript"},{"location":"preCourse/whatIsJavaScript/#strongly-suggested-additional-resources","text":"MDN Docs - What is JavaScript . Tutorial - \"Playing with browser objects\" Video - What Went Wrong? Troubleshooting JavaScript . Video - What Is JavaScript","title":"Strongly Suggested Additional Resources"}]}