{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to JS211 - Foundations in Programming Objective Statement Through this course students will learn to program by building simple and basic applications. The focus of this course is programmatic logic with a secondary focus on syntax. This course uses JavaScript as a language/syntax and Node.js as an environment to run JavaScript outside of a web browser. The skills learned in this course directly translate to other programming languages. While client-facing G raphical U ser I nterfaces (GUIs) are recommended as extended practice, there is no need for a student to worry if they are unable to build a GUI for every one of their terminal-based applications(CLI). In this course, students get a real chance to develop their own problem-solving strategies. There is no one right way to do any of them. In addition, the skills learned in this course directly translate to the skills learned in the 311 and 411 courses in a more practical and realistic sense. Instead of learning various methods, programming patterns, and data manipulation in isolation, students will spread their understanding and familiarity with programming over the development of their graduation app in the following 311 and 411 courses. Our philosophy is \"learn by doing\". We engage our students in the problem solving process as opposed to relying heavily on lectures. Our instructors, who are real developers, facilitate learning through guiding your progress as you work through projects on your own. To be successful in this course, you must spend 10-15 hours outside of class completing Pre-Class Lessons before each Class Lesson. Our class structure follows the flipped classroom model where students learn on their own outside of class and bring their questions with them to class. Class begins by discussing the \"Questions for Discussion & Terms to Know\", and the majority of class time is spent working on projects. READ ON, start with Pre-Course Pt 1: How to Succeed and work through all 5 sections BEFORE you come to class on the first day! Class Structure and Expectations This class will follow a Flipped-Classroom methodology. This means you, the student, are required to complete the assigned Pre-Homework before each day of class. You will not succeed in this course if you don't complete the Pre-Homework. Working on the Pre-Homework during class takes away from other students, ruins your chance to deeply understand the material, and ask import questions! Don't be the guy! Due dates : Homework is due the Sunday after it is assigned. (unless otherwise specified). Please have your assignment turned in by the end of Sunday night. Due dates are scheduled on Sunday for you to attend Study Sessions on the weekend. GET IT DONE! Both Daily and Checkpoint Assignments are due the Sunday after they are assigned, the Submission Due Day , i.e. Ticket-Counter is assigned Wednesday and will be due for submission 4 days later on Sunday. Assignments turned in after the Submission Due Day will be penalized with -20 points, in other words, only a maximum grade of 80 is possible. The third Checkpoint for each course, (101 - 411) will be due the Sunday following the last day of the course. Work turned in after this will be subject to -20 penalty. The Final Submission Day for any late assignments is the Second Sunday after each course ends. Assignments turned in after the Final Submission Day will receive an automatic grade of 50. Homework submission : Turn in your homework on Campus Manager. Copy/paste a link to your completed assignment(GitHub Pull Request or repo URL) in the designated spot for the assignment. For assignments that cannot be accessed via link, we'll make other arrangements on a case-by-case basis. Homework guidelines : Your work should be thorough and demonstrate an understanding of the topic and tasks set forth. Please make sure that your assignments are detailed with comments, inclusive of all specifications, and complete. Grading : You Instructor will be grading your assignments based on their functionality and completion of the specifications laid out for each assignment. Late policy : You may receive up to a 70 for an assignment that is turned in late. It is up to you, the student, to request the instructor grade the assignment after you have submitted it. Additionally, if you have 3 late or missing assignments in a row, you'll be asked to read a programming-related article of your choice and make a 3-minute presentation about it to the class. Exceptions : If you need to turn in an assignment late or will be tardy/absent to a class please email your Instructor and Campus Director ahead of time to make appropriate arrangements. To Pass This Class (and all others) Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, Present to the class specs for the app you are planning to build for your Capstone Project. How To Use This Textbook Video","title":"Home"},{"location":"#welcome-to-js211-foundations-in-programming","text":"","title":"Welcome to JS211 - Foundations in Programming"},{"location":"#objective-statement","text":"Through this course students will learn to program by building simple and basic applications. The focus of this course is programmatic logic with a secondary focus on syntax. This course uses JavaScript as a language/syntax and Node.js as an environment to run JavaScript outside of a web browser. The skills learned in this course directly translate to other programming languages. While client-facing G raphical U ser I nterfaces (GUIs) are recommended as extended practice, there is no need for a student to worry if they are unable to build a GUI for every one of their terminal-based applications(CLI). In this course, students get a real chance to develop their own problem-solving strategies. There is no one right way to do any of them. In addition, the skills learned in this course directly translate to the skills learned in the 311 and 411 courses in a more practical and realistic sense. Instead of learning various methods, programming patterns, and data manipulation in isolation, students will spread their understanding and familiarity with programming over the development of their graduation app in the following 311 and 411 courses. Our philosophy is \"learn by doing\". We engage our students in the problem solving process as opposed to relying heavily on lectures. Our instructors, who are real developers, facilitate learning through guiding your progress as you work through projects on your own. To be successful in this course, you must spend 10-15 hours outside of class completing Pre-Class Lessons before each Class Lesson. Our class structure follows the flipped classroom model where students learn on their own outside of class and bring their questions with them to class. Class begins by discussing the \"Questions for Discussion & Terms to Know\", and the majority of class time is spent working on projects. READ ON, start with Pre-Course Pt 1: How to Succeed and work through all 5 sections BEFORE you come to class on the first day!","title":"Objective Statement"},{"location":"#class-structure-and-expectations","text":"This class will follow a Flipped-Classroom methodology. This means you, the student, are required to complete the assigned Pre-Homework before each day of class. You will not succeed in this course if you don't complete the Pre-Homework. Working on the Pre-Homework during class takes away from other students, ruins your chance to deeply understand the material, and ask import questions! Don't be the guy! Due dates : Homework is due the Sunday after it is assigned. (unless otherwise specified). Please have your assignment turned in by the end of Sunday night. Due dates are scheduled on Sunday for you to attend Study Sessions on the weekend. GET IT DONE! Both Daily and Checkpoint Assignments are due the Sunday after they are assigned, the Submission Due Day , i.e. Ticket-Counter is assigned Wednesday and will be due for submission 4 days later on Sunday. Assignments turned in after the Submission Due Day will be penalized with -20 points, in other words, only a maximum grade of 80 is possible. The third Checkpoint for each course, (101 - 411) will be due the Sunday following the last day of the course. Work turned in after this will be subject to -20 penalty. The Final Submission Day for any late assignments is the Second Sunday after each course ends. Assignments turned in after the Final Submission Day will receive an automatic grade of 50. Homework submission : Turn in your homework on Campus Manager. Copy/paste a link to your completed assignment(GitHub Pull Request or repo URL) in the designated spot for the assignment. For assignments that cannot be accessed via link, we'll make other arrangements on a case-by-case basis. Homework guidelines : Your work should be thorough and demonstrate an understanding of the topic and tasks set forth. Please make sure that your assignments are detailed with comments, inclusive of all specifications, and complete. Grading : You Instructor will be grading your assignments based on their functionality and completion of the specifications laid out for each assignment. Late policy : You may receive up to a 70 for an assignment that is turned in late. It is up to you, the student, to request the instructor grade the assignment after you have submitted it. Additionally, if you have 3 late or missing assignments in a row, you'll be asked to read a programming-related article of your choice and make a 3-minute presentation about it to the class. Exceptions : If you need to turn in an assignment late or will be tardy/absent to a class please email your Instructor and Campus Director ahead of time to make appropriate arrangements.","title":"Class Structure and Expectations"},{"location":"#to-pass-this-class-and-all-others","text":"Finish with a grade average of >70, Attend class 80% of the time, Complete your Final Checkpoint, Present to the class specs for the app you are planning to build for your Capstone Project.","title":"To Pass This Class (and all others)"},{"location":"#how-to-use-this-textbook-video","text":"","title":"How To Use This Textbook Video"},{"location":"additionalResources/blogPrompts/","text":"Blog Prompts Important - Remember, you will be graded for the completion of your blog but also this will be a place you can return to when preparing for interviews in a few months! - When publishing your blogs, make sure you \"@AustinCodingAcademy\" and tag \"Coding\" and \"Web Development\" in your story. Class 2 - Prompt 201 Describe one thing you're learning in class today. What is the difference between == and === ? What is the value of foo? var foo = 10 + '20'; Describe what a terminal application is. What is the ternary operator? What are some ways to ensure that your website design or web application is accessible and user-friendly? What are your favorite features of HTML5, and how have you implemented them in your front-end development projects? How do you structure your CSS and JavaScript to make it easier for other developers to work with? What's your process for addressing browser-specific rendering problems? Do you find that a certain browser is more challenging to work with than others? Class 4 - Prompt 202 What's something that's been confusing? How would you explain it to someone else? What is \"use strict\";? What are the advantages and disadvantages to using it? Explain function hoisting in JavaScript. Explain the importance of standards and standards bodies like ECMA. What actions have you personally taken on recent projects to increase maintainability of your code? Why is it, in general, a good idea to leave the global scope of a website as-is and never touch it? Class 6 - Prompt 203 Describe one thing you're learning in class today. What's the difference between: function Person(){} , var person = Person() , and var person = new Person() ? What's the difference between an \"attribute\" and a \"property\"? What language constructions do you use for iterating over object properties and array items? What is the event loop? What is the difference between call stack and task queue? What are the differences between ES6 classes and ES5 function constructors? Class 8 - Prompt 204 Describe one thing you're learning in class today. Can you describe the main difference between a forEach loop and a .map() loop and why you would pick one versus the other? Describe event bubbling. What is the definition of a higher-order function? ES6 Template Literals offer a lot of flexibility in generating strings. Can you give an example? What Is an associative array in JavaScript? Why should you never use new Array in JavaScript? Class 10 - Prompt 205 Describe one thing you're learning in class today. Why do you think it will be important in your future web development journey? Can you offer a use case for the new arrow => function syntax? How does this new syntax differ from the older function signature, function nameFunc(){} , both in style and functionality? Explain the differences on the usage of foo between function foo() {} and const foo = function() {} What advantage is there for using the arrow syntax for a method in a constructor? Can you give an example for destructuring an object or an array? Explain Closure in your own words. How do you think you can use it? Don't forget to read more blogs and videos about this subject. Class 12 - Prompt 206 Tell us about something you learned this week. What are the pros and cons of immutability? How can you achieve immutability in your own code? What are Divide and Conquer algorithms? Describe how they work. Can you give any common examples of the types of problems where this approach might be used? How do insertion sort, heap sort, quick sort, and merge sort work? What are the key advantages of insertion sort, quick sort, heap sort and merge sort? Discuss best, average, and worst case time and memory complexity. Explain the difference between mutable and immutable objects. What are the three laws of algorithm recursion? Describe them in your own words and what they mean to you. Class 14 - Prompt 207 Write about something you learned this week. Why would you use something like the load event? Does this event have disadvantages? Do you know any alternatives, and why would you use those? What are the advantages and disadvantages of using Ajax? Explain how JSONP works (and how it's not really Ajax). Explain Ajax in as much detail as possible. What does it mean when we talk about time complexity of an algorithm? What are the three laws of algorithm recursion? How do you see yourself growing as a web developer? Class 16 - Prompt 208 Talk about something you learned this week. Explain Function.prototype.bind() Describe event bubbling. What's the difference between the window load event and document DOMContentLoaded event? Describe the call stack.","title":"Blog Prompts"},{"location":"additionalResources/blogPrompts/#blog-prompts","text":"Important - Remember, you will be graded for the completion of your blog but also this will be a place you can return to when preparing for interviews in a few months! - When publishing your blogs, make sure you \"@AustinCodingAcademy\" and tag \"Coding\" and \"Web Development\" in your story.","title":"Blog Prompts"},{"location":"additionalResources/blogPrompts/#class-2-prompt-201","text":"Describe one thing you're learning in class today. What is the difference between == and === ? What is the value of foo? var foo = 10 + '20'; Describe what a terminal application is. What is the ternary operator? What are some ways to ensure that your website design or web application is accessible and user-friendly? What are your favorite features of HTML5, and how have you implemented them in your front-end development projects? How do you structure your CSS and JavaScript to make it easier for other developers to work with? What's your process for addressing browser-specific rendering problems? Do you find that a certain browser is more challenging to work with than others?","title":"Class 2 - Prompt 201"},{"location":"additionalResources/blogPrompts/#class-4-prompt-202","text":"What's something that's been confusing? How would you explain it to someone else? What is \"use strict\";? What are the advantages and disadvantages to using it? Explain function hoisting in JavaScript. Explain the importance of standards and standards bodies like ECMA. What actions have you personally taken on recent projects to increase maintainability of your code? Why is it, in general, a good idea to leave the global scope of a website as-is and never touch it?","title":"Class 4 - Prompt 202"},{"location":"additionalResources/blogPrompts/#class-6-prompt-203","text":"Describe one thing you're learning in class today. What's the difference between: function Person(){} , var person = Person() , and var person = new Person() ? What's the difference between an \"attribute\" and a \"property\"? What language constructions do you use for iterating over object properties and array items? What is the event loop? What is the difference between call stack and task queue? What are the differences between ES6 classes and ES5 function constructors?","title":"Class 6 - Prompt 203"},{"location":"additionalResources/blogPrompts/#class-8-prompt-204","text":"Describe one thing you're learning in class today. Can you describe the main difference between a forEach loop and a .map() loop and why you would pick one versus the other? Describe event bubbling. What is the definition of a higher-order function? ES6 Template Literals offer a lot of flexibility in generating strings. Can you give an example? What Is an associative array in JavaScript? Why should you never use new Array in JavaScript?","title":"Class 8 - Prompt 204"},{"location":"additionalResources/blogPrompts/#class-10-prompt-205","text":"Describe one thing you're learning in class today. Why do you think it will be important in your future web development journey? Can you offer a use case for the new arrow => function syntax? How does this new syntax differ from the older function signature, function nameFunc(){} , both in style and functionality? Explain the differences on the usage of foo between function foo() {} and const foo = function() {} What advantage is there for using the arrow syntax for a method in a constructor? Can you give an example for destructuring an object or an array? Explain Closure in your own words. How do you think you can use it? Don't forget to read more blogs and videos about this subject.","title":"Class 10 - Prompt 205"},{"location":"additionalResources/blogPrompts/#class-12-prompt-206","text":"Tell us about something you learned this week. What are the pros and cons of immutability? How can you achieve immutability in your own code? What are Divide and Conquer algorithms? Describe how they work. Can you give any common examples of the types of problems where this approach might be used? How do insertion sort, heap sort, quick sort, and merge sort work? What are the key advantages of insertion sort, quick sort, heap sort and merge sort? Discuss best, average, and worst case time and memory complexity. Explain the difference between mutable and immutable objects. What are the three laws of algorithm recursion? Describe them in your own words and what they mean to you.","title":"Class 12 - Prompt 206"},{"location":"additionalResources/blogPrompts/#class-14-prompt-207","text":"Write about something you learned this week. Why would you use something like the load event? Does this event have disadvantages? Do you know any alternatives, and why would you use those? What are the advantages and disadvantages of using Ajax? Explain how JSONP works (and how it's not really Ajax). Explain Ajax in as much detail as possible. What does it mean when we talk about time complexity of an algorithm? What are the three laws of algorithm recursion? How do you see yourself growing as a web developer?","title":"Class 14 - Prompt 207"},{"location":"additionalResources/blogPrompts/#class-16-prompt-208","text":"Talk about something you learned this week. Explain Function.prototype.bind() Describe event bubbling. What's the difference between the window load event and document DOMContentLoaded event? Describe the call stack.","title":"Class 16 - Prompt 208"},{"location":"additionalResources/developSeries/","text":"Develop Series Class 1 - Growth Mindset vs Fixed Mindset Class 1 - The Power of Believing - Carol Dweck Class 2 - Speaking Up Without Freaking Out - Matt Abrahams Class 3 - Its NOT O.K. to Be WEAK - Jordan Peterson Class 4 - The Prison of Your Mind | Sean Stephenson | TEDxIronwoodStatePrison Class 5 - What if you Stopped Thinking All the Time? Wim Hof Class 6 - How to fix the exhausted brain | Brady Wilson Class 7 - Millennials in the Workforce, A Generation of Weakness - Simon Sinek Class 12 - Thinking Like a Programmer Class 14 - Coding Music","title":"Develop Series Collection"},{"location":"additionalResources/developSeries/#develop-series","text":"Class 1 - Growth Mindset vs Fixed Mindset Class 1 - The Power of Believing - Carol Dweck Class 2 - Speaking Up Without Freaking Out - Matt Abrahams Class 3 - Its NOT O.K. to Be WEAK - Jordan Peterson Class 4 - The Prison of Your Mind | Sean Stephenson | TEDxIronwoodStatePrison Class 5 - What if you Stopped Thinking All the Time? Wim Hof Class 6 - How to fix the exhausted brain | Brady Wilson Class 7 - Millennials in the Workforce, A Generation of Weakness - Simon Sinek Class 12 - Thinking Like a Programmer Class 14 - Coding Music","title":"Develop Series"},{"location":"additionalResources/gitCommands/","text":"Git & CLI Commands Useful Git Commands git init >> initialize a local folder as a git repo to be tracked and push to the cloud git branch feature-1-berger >> Create the branch on your local machine called \"feature-1-berger\". git checkout -b feature-1-berger >> Create the branch on your local machine and switch into this branch. git checkout feature-1-berger >> Switch into this branch. git branch >> return the current branch you are working in. git status >> Check the status of tracked/untracked changed files git add fileName.js >> Add the file \"fileName.js\" to be tracked for the next commit. git add -A >> Add all changed files to be tracked. git commit -m \"message\" >> Make a commit with the message \"message\". git push - Push the commit to the current working branch git push origin branch_name >> Push the commit to the branch \"branch_name\" git pull >> Pulls down changes from the repo to bring your local codebase up-to-date git push \u2014set-upstream origin resume >> set the initial push to know where all future pushes need to go in the gitHub cloud. cd => // change directories cd workspace => // will change to a new folder/directory called workspace ls => // list out the files in that directory List CLI Commands mkdir jsDev >> will make a folder(aka, directory) called \"jsDev\" cd >> change directories cd workspace >> will change to a new folder(aka, directory) called \"workspace\" pwd >> Print Working Directory, will return the name of the current directory you are in. ls >> list out the files in that directory code . >> open the current directory in VS Code (Macs have to install the PATH) touch index.html >> will create a file inside the current directory called \"index.html\" echo \"USERNAME=meathead\" >> .env >> create a file called .env and writes \"USERNAME=meathead\" inside of it. Other useful commands to research mv >> move directory cp >> copy file rm >> remove file or directory tree >> Must install with brew or bash, but is a very useful command to see your entire working directory's tree.","title":"Git & CLI Commands"},{"location":"additionalResources/gitCommands/#git-cli-commands","text":"","title":"Git &amp; CLI Commands"},{"location":"additionalResources/gitCommands/#useful-git-commands","text":"git init >> initialize a local folder as a git repo to be tracked and push to the cloud git branch feature-1-berger >> Create the branch on your local machine called \"feature-1-berger\". git checkout -b feature-1-berger >> Create the branch on your local machine and switch into this branch. git checkout feature-1-berger >> Switch into this branch. git branch >> return the current branch you are working in. git status >> Check the status of tracked/untracked changed files git add fileName.js >> Add the file \"fileName.js\" to be tracked for the next commit. git add -A >> Add all changed files to be tracked. git commit -m \"message\" >> Make a commit with the message \"message\". git push - Push the commit to the current working branch git push origin branch_name >> Push the commit to the branch \"branch_name\" git pull >> Pulls down changes from the repo to bring your local codebase up-to-date git push \u2014set-upstream origin resume >> set the initial push to know where all future pushes need to go in the gitHub cloud. cd => // change directories cd workspace => // will change to a new folder/directory called workspace ls => // list out the files in that directory","title":"Useful Git Commands"},{"location":"additionalResources/gitCommands/#list-cli-commands","text":"mkdir jsDev >> will make a folder(aka, directory) called \"jsDev\" cd >> change directories cd workspace >> will change to a new folder(aka, directory) called \"workspace\" pwd >> Print Working Directory, will return the name of the current directory you are in. ls >> list out the files in that directory code . >> open the current directory in VS Code (Macs have to install the PATH) touch index.html >> will create a file inside the current directory called \"index.html\" echo \"USERNAME=meathead\" >> .env >> create a file called .env and writes \"USERNAME=meathead\" inside of it.","title":"List CLI Commands"},{"location":"additionalResources/gitCommands/#other-useful-commands-to-research","text":"mv >> move directory cp >> copy file rm >> remove file or directory tree >> Must install with brew or bash, but is a very useful command to see your entire working directory's tree.","title":"Other useful commands to research"},{"location":"additionalResources/graduationPrerequisites/","text":"Graduation Prerequisites A graduate of this program will receive a digital certificate from ACA by: Completing all 4 courses with an overall grade average of >70, Each course must also be completed with a grade average of >70, Build a full-stack web application using the technology learned in these past 4 courses that: Has a SQL Database, Has an rest API to serve the data, Uses an third-party API, Has a sign-in strategy, Has a client-side app for a user to interact with, Deploy and Host the Capstone Project. Is deployed and publicly accessible, Is linked to the ACA website.","title":"Graduation Prerequisites"},{"location":"additionalResources/graduationPrerequisites/#graduation-prerequisites","text":"A graduate of this program will receive a digital certificate from ACA by: Completing all 4 courses with an overall grade average of >70, Each course must also be completed with a grade average of >70, Build a full-stack web application using the technology learned in these past 4 courses that: Has a SQL Database, Has an rest API to serve the data, Uses an third-party API, Has a sign-in strategy, Has a client-side app for a user to interact with, Deploy and Host the Capstone Project. Is deployed and publicly accessible, Is linked to the ACA website.","title":"Graduation Prerequisites"},{"location":"additionalResources/interviewChallenges/","text":"Interview Challenges Why Train for Interviews? Interviewing for development jobs is tough! To prepare you for the challenges ahead we will practice whiteboarding in front of the class every day. Think of it as a warm-up for the project that awaits. The whiteboarding challenges should be taken seriously and practiced even outside of class. Help yourself by following these steps to attack the problem, work through the problem and collaborate with your interviewer (instructor): How to Solve Your Challenge Restate the question aloud. Write the question out at the top of the whiteboard. Ask any clarifying questions you need. Invoke the function and write out the expected output given the sample input. If none is given, make it up. Write out a code plan to the side of the whiteboard. Speak aloud every thought you have. THIS IS THE MOST IMPORTANT PART! Build the structure of your function(s). Slowly work through your code plan, building the steps you need. Don't be afraid to mess up and say it aloud. It's not about finding the solution. It's about collaborating and working toward a solution! After you finish, take a picture and transfer it to a Repl.it when you get home. The Prompts Class 1 Prompt: Two Eggs & 100 Floors** - The following is a description of this famous puzzle involving 2 eggs and a building with 100 floors. Suppose that we wish to know which stories in a 100-story building are safe to drop eggs from, and which will cause the eggs to break on landing. What strategy should be used to drop eggs such that the total number of drops in the worst case is minimized and we find the required floor? 1 2 3 4 5 6 > We may make a few assumptions: > - An egg that survives a fall can be used again. > - A broken egg must be discarded. > - The effect of a fall is the same for all eggs. > - If an egg breaks when dropped, then it would break if dropped from a higher floor. > - If an egg survives a fall then it would survive a shorter fall. Class 2 Prompt: Hourglasses Puzzle - How do you measure 9 minutes from a 4 minute-glass and a 7 minute-glass? 1 > We have only 2 sand timers: 4 minutes and 7 minutes but we need to measure 9 minutes. How do we do it? Class 3 Prompt: sumPoweredByTwo Take an array of numbers, raise each number by the power of two and return the sum of the new array. 1 2 3 4 5 ```javascript const myArr = [ 1, 2, 3] sumOfPoweredByTwo(myArr) // --> 14 ``` Class 4 Prompt: FizzBuzz Write a program that prints the numbers from 1 to 100, but for multiples of three print \"Fizz\" instead of the number and for the multiples of five print \"Buzz\". For numbers which are multiples of both three and five print \"FizzBuzz\". Class 5 Prompt: isUnique Write a function that determines if a string contains all unique characters. 1 2 isUnique ( 'egg' ) // --> false isUnique ( 'Artemis' ) // --> true Class 6 Prompt: wordLength Build a program to find the length of the longest word in a string excluding punctuation and removing whitespace. 1 2 3 4 5 ```javascript const myString = \"This is for your own personal journey. May you have excellent navigation as a developer using your own compass.\" findLongestWord(myString) => 'navigation', 10 ``` Class 7 Prompt 1: sortedScores - Return unsorted scores in a descending sorted array. 1 2 3 /*Example*/ const unsortedScores = [ 37 , 89 , 41 , 65 , 91 , 53 ] sortedScores ( unsortedScores ) => [ 91 , 89 , 65 , 53 , 41 , 37 ] Prompt 2: float precision What will be the output of this code? console.log(0.1 + 0.2 == 0.3); Class 8 Prompt 1: reverseArray - Build a function that takes in an array and returns it in reverse order. Prompt 2: duplicate - make this work duplicate([1,2,3,4,5]); // [1,2,3,4,5,1,2,3,4,5] Class 9 Prompt 1: powOfTwoSumEven - Given an array of numbers, raise each number by the power of 2 and return the sum of all the numbers that are evenly divisible by 4, i.e. const myArr = [1, 5, 10, 4, 2] // => 120 Prompt 2: Function Currying - How would you make the following work? What's the utility of it? 1 2 add ( 2 , 5 ); // --> 7 add ( 2 )( 5 ); // --> 7 Class 10 Prompt 1: isPalindrome Build a function that would determine if a string was a palindrome. Prompt 2: Method Chaining What value is returned from the following statement? \"i'm a lasagna hog\".split(\"\").reverse().join(\"\"); Class 11 Prompt 1: inPlaceMoveZeros Given an array nums , write a function to move all 0s to the end of the array while maintaining the relative order of the non-0 numbers: 1 2 Input: [0,1,0,3,12] Output: [1,3,12,0,0] Prompt 2: Questionable Value What is the value of window.foo? ( window.foo || ( window.foo = \"bar\" ) ); Class 12 Prompt 1: Summing the Array: Given an array of numbers, return the sum of all the numbers. Prompt 2: Bubble Sort Hand built bubble sort: 1 2 bubbleSort ([ 120 , 315 , 43 , 56 , 22 , 8224 , 8 , 68 , 90 , 10 , 32 , 23 , 45 , 5 , 20 , 34 , 250 ]) // returns => [ 8224, 315, 250, 120, 90, 68, 56, 45, 43, 34, 32, 23, 22, 20, 10, 8, 5] Class 13 Prompt 1: MaxValueOfArray Talk through: Given an array, find the maximum value of the array Prompt 2: Merge Sort Hand build merge sort Prompt 3: FizzBuzz Sum If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Build a function to find the sum of all the multiples of 3 or 5 below 1000. Class 14 Prompt 1: The Fibonacci Sequence... Each new term in the Fibonacci sequence is generated by adding the previous two numbers together. By starting with 1 and 2, the first 10 numbers will be: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... By considering the terms in the Fibonacci sequence whose maximum value does not exceed four million, find the sum of the even-valued terms. Prompt 2: Scope What is the outcome of the two alerts below? 1 2 3 4 5 6 var foo = \"Hello\" ; ( function () { var bar = \" World\" ; alert ( foo + bar ); })(); alert ( foo + bar ); Prompt 3: length What is the value of foo.length? 1 2 3 var foo = []; foo . push ( 1 ); foo . push ( 2 ); Class 15 Prompt 1: What is Foo? What is the value of foo.x in the code below? 1 2 3 var foo = { n : 1 }; var bar = foo ; foo . x = foo = { n : 2 }; Prompt 2: Quick As a class, build a quick sort by hand. Class 16 Prompt 1: Reduce Function Everyone, build Reduce sort function. Start with the 4 questions of any method. Prompt 2: Promise What does the following code print? 1 2 3 4 5 6 7 8 console . log ( 'one' ); setTimeout ( function () { console . log ( 'two' ); }, 0 ); Promise . resolve (). then ( function () { console . log ( 'three' ); }) console . log ( 'four' ); Prompt 2: Filter Function Everyone build a Filter function, start with those 4 questions!!","title":"Interview Training"},{"location":"additionalResources/interviewChallenges/#interview-challenges","text":"","title":"Interview Challenges"},{"location":"additionalResources/interviewChallenges/#why-train-for-interviews","text":"Interviewing for development jobs is tough! To prepare you for the challenges ahead we will practice whiteboarding in front of the class every day. Think of it as a warm-up for the project that awaits. The whiteboarding challenges should be taken seriously and practiced even outside of class. Help yourself by following these steps to attack the problem, work through the problem and collaborate with your interviewer (instructor):","title":"Why Train for Interviews?"},{"location":"additionalResources/interviewChallenges/#how-to-solve-your-challenge","text":"Restate the question aloud. Write the question out at the top of the whiteboard. Ask any clarifying questions you need. Invoke the function and write out the expected output given the sample input. If none is given, make it up. Write out a code plan to the side of the whiteboard. Speak aloud every thought you have. THIS IS THE MOST IMPORTANT PART! Build the structure of your function(s). Slowly work through your code plan, building the steps you need. Don't be afraid to mess up and say it aloud. It's not about finding the solution. It's about collaborating and working toward a solution! After you finish, take a picture and transfer it to a Repl.it when you get home.","title":"How to Solve Your Challenge"},{"location":"additionalResources/interviewChallenges/#the-prompts","text":"","title":"The Prompts"},{"location":"additionalResources/interviewChallenges/#class-1-prompt-two-eggs-100-floors-","text":"The following is a description of this famous puzzle involving 2 eggs and a building with 100 floors. Suppose that we wish to know which stories in a 100-story building are safe to drop eggs from, and which will cause the eggs to break on landing. What strategy should be used to drop eggs such that the total number of drops in the worst case is minimized and we find the required floor? 1 2 3 4 5 6 > We may make a few assumptions: > - An egg that survives a fall can be used again. > - A broken egg must be discarded. > - The effect of a fall is the same for all eggs. > - If an egg breaks when dropped, then it would break if dropped from a higher floor. > - If an egg survives a fall then it would survive a shorter fall.","title":"Class 1 Prompt: Two Eggs &amp; 100 Floors** -"},{"location":"additionalResources/interviewChallenges/#class-2-prompt-hourglasses-puzzle-","text":"How do you measure 9 minutes from a 4 minute-glass and a 7 minute-glass? 1 > We have only 2 sand timers: 4 minutes and 7 minutes but we need to measure 9 minutes. How do we do it?","title":"Class  2 Prompt: Hourglasses Puzzle -"},{"location":"additionalResources/interviewChallenges/#class-3-prompt-sumpoweredbytwo","text":"Take an array of numbers, raise each number by the power of two and return the sum of the new array. 1 2 3 4 5 ```javascript const myArr = [ 1, 2, 3] sumOfPoweredByTwo(myArr) // --> 14 ```","title":"Class 3 Prompt: sumPoweredByTwo"},{"location":"additionalResources/interviewChallenges/#class-4-prompt-fizzbuzz","text":"Write a program that prints the numbers from 1 to 100, but for multiples of three print \"Fizz\" instead of the number and for the multiples of five print \"Buzz\". For numbers which are multiples of both three and five print \"FizzBuzz\".","title":"Class 4 Prompt: FizzBuzz"},{"location":"additionalResources/interviewChallenges/#class-5-prompt-isunique","text":"Write a function that determines if a string contains all unique characters. 1 2 isUnique ( 'egg' ) // --> false isUnique ( 'Artemis' ) // --> true","title":"Class 5 Prompt: isUnique"},{"location":"additionalResources/interviewChallenges/#class-6-prompt-wordlength","text":"Build a program to find the length of the longest word in a string excluding punctuation and removing whitespace. 1 2 3 4 5 ```javascript const myString = \"This is for your own personal journey. May you have excellent navigation as a developer using your own compass.\" findLongestWord(myString) => 'navigation', 10 ```","title":"Class 6 Prompt: wordLength"},{"location":"additionalResources/interviewChallenges/#class-7","text":"Prompt 1: sortedScores - Return unsorted scores in a descending sorted array. 1 2 3 /*Example*/ const unsortedScores = [ 37 , 89 , 41 , 65 , 91 , 53 ] sortedScores ( unsortedScores ) => [ 91 , 89 , 65 , 53 , 41 , 37 ] Prompt 2: float precision What will be the output of this code? console.log(0.1 + 0.2 == 0.3);","title":"Class 7"},{"location":"additionalResources/interviewChallenges/#class-8","text":"Prompt 1: reverseArray - Build a function that takes in an array and returns it in reverse order. Prompt 2: duplicate - make this work duplicate([1,2,3,4,5]); // [1,2,3,4,5,1,2,3,4,5]","title":"Class 8"},{"location":"additionalResources/interviewChallenges/#class-9","text":"Prompt 1: powOfTwoSumEven - Given an array of numbers, raise each number by the power of 2 and return the sum of all the numbers that are evenly divisible by 4, i.e. const myArr = [1, 5, 10, 4, 2] // => 120 Prompt 2: Function Currying - How would you make the following work? What's the utility of it? 1 2 add ( 2 , 5 ); // --> 7 add ( 2 )( 5 ); // --> 7","title":"Class 9"},{"location":"additionalResources/interviewChallenges/#class-10","text":"Prompt 1: isPalindrome Build a function that would determine if a string was a palindrome. Prompt 2: Method Chaining What value is returned from the following statement? \"i'm a lasagna hog\".split(\"\").reverse().join(\"\");","title":"Class 10"},{"location":"additionalResources/interviewChallenges/#class-11","text":"Prompt 1: inPlaceMoveZeros Given an array nums , write a function to move all 0s to the end of the array while maintaining the relative order of the non-0 numbers: 1 2 Input: [0,1,0,3,12] Output: [1,3,12,0,0] Prompt 2: Questionable Value What is the value of window.foo? ( window.foo || ( window.foo = \"bar\" ) );","title":"Class 11"},{"location":"additionalResources/interviewChallenges/#class-12","text":"Prompt 1: Summing the Array: Given an array of numbers, return the sum of all the numbers. Prompt 2: Bubble Sort Hand built bubble sort: 1 2 bubbleSort ([ 120 , 315 , 43 , 56 , 22 , 8224 , 8 , 68 , 90 , 10 , 32 , 23 , 45 , 5 , 20 , 34 , 250 ]) // returns => [ 8224, 315, 250, 120, 90, 68, 56, 45, 43, 34, 32, 23, 22, 20, 10, 8, 5]","title":"Class 12"},{"location":"additionalResources/interviewChallenges/#class-13","text":"Prompt 1: MaxValueOfArray Talk through: Given an array, find the maximum value of the array Prompt 2: Merge Sort Hand build merge sort Prompt 3: FizzBuzz Sum If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Build a function to find the sum of all the multiples of 3 or 5 below 1000.","title":"Class 13"},{"location":"additionalResources/interviewChallenges/#class-14","text":"Prompt 1: The Fibonacci Sequence... Each new term in the Fibonacci sequence is generated by adding the previous two numbers together. By starting with 1 and 2, the first 10 numbers will be: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... By considering the terms in the Fibonacci sequence whose maximum value does not exceed four million, find the sum of the even-valued terms. Prompt 2: Scope What is the outcome of the two alerts below? 1 2 3 4 5 6 var foo = \"Hello\" ; ( function () { var bar = \" World\" ; alert ( foo + bar ); })(); alert ( foo + bar ); Prompt 3: length What is the value of foo.length? 1 2 3 var foo = []; foo . push ( 1 ); foo . push ( 2 );","title":"Class 14"},{"location":"additionalResources/interviewChallenges/#class-15","text":"Prompt 1: What is Foo? What is the value of foo.x in the code below? 1 2 3 var foo = { n : 1 }; var bar = foo ; foo . x = foo = { n : 2 }; Prompt 2: Quick As a class, build a quick sort by hand.","title":"Class 15"},{"location":"additionalResources/interviewChallenges/#class-16","text":"Prompt 1: Reduce Function Everyone, build Reduce sort function. Start with the 4 questions of any method. Prompt 2: Promise What does the following code print? 1 2 3 4 5 6 7 8 console . log ( 'one' ); setTimeout ( function () { console . log ( 'two' ); }, 0 ); Promise . resolve (). then ( function () { console . log ( 'three' ); }) console . log ( 'four' ); Prompt 2: Filter Function Everyone build a Filter function, start with those 4 questions!!","title":"Class 16"},{"location":"additionalResources/keyboardShortcuts/","text":"Keyboard Shortcuts Short-cuts macOS Keyboard Shortcuts Windows Keyboard Shortcuts VS Code Shortcuts ebook Short-cuts The following keys are bound: F , S , / : open search dialog P , , : go to previous page N , . : go to next page","title":"Keyboard Shortcuts"},{"location":"additionalResources/keyboardShortcuts/#keyboard-shortcuts","text":"","title":"Keyboard Shortcuts"},{"location":"additionalResources/keyboardShortcuts/#short-cuts","text":"macOS Keyboard Shortcuts Windows Keyboard Shortcuts VS Code Shortcuts","title":"Short-cuts"},{"location":"additionalResources/keyboardShortcuts/#ebook-short-cuts","text":"The following keys are bound: F , S , / : open search dialog P , , : go to previous page N , . : go to next page","title":"ebook Short-cuts"},{"location":"additionalResources/learnYourCLI/","text":"Learn Your CLI The Touch Command","title":"Learn Your CLI"},{"location":"additionalResources/learnYourCLI/#learn-your-cli","text":"The Touch Command","title":"Learn Your CLI"},{"location":"additionalResources/presentationsQualifications/","text":"Presentations Qualifications To be eligible to present your Capstone Project to the public, family, friends, and recruiters at the graduation ceremony held after the conclusion of this course the candidate must: Complete the requirements to graduate (see above) Deploy and host your Capstone Project Rehearse the 5-minute presentation with your Job Placement Instructor and Campus Director. Capstone Project Presentation Guidelines The purpose of the presentation is to: Celebrate the graduates new skills, mindset, and confidence. Share with the community the student's ideas and new skills. Practice speaking in-public about technology. A well prepared 3-minute presentation will include: Graduates Name and skills they've been studying The problem the graduate was trying to solve with this app. How the app solves the problem with a demonstration of the app. Where the graduate would like to take the app in the future. Invitation to share the code base with interested patrons after graduation. The presentation should NOT include: An emphasis on sign-on. ( all web apps have a sign-on ) Showing of any code. ( your attendees don't care about code )","title":"Presentation Qualifications"},{"location":"additionalResources/presentationsQualifications/#presentations-qualifications","text":"To be eligible to present your Capstone Project to the public, family, friends, and recruiters at the graduation ceremony held after the conclusion of this course the candidate must: Complete the requirements to graduate (see above) Deploy and host your Capstone Project Rehearse the 5-minute presentation with your Job Placement Instructor and Campus Director.","title":"Presentations Qualifications"},{"location":"additionalResources/presentationsQualifications/#capstone-project-presentation-guidelines","text":"The purpose of the presentation is to: Celebrate the graduates new skills, mindset, and confidence. Share with the community the student's ideas and new skills. Practice speaking in-public about technology. A well prepared 3-minute presentation will include: Graduates Name and skills they've been studying The problem the graduate was trying to solve with this app. How the app solves the problem with a demonstration of the app. Where the graduate would like to take the app in the future. Invitation to share the code base with interested patrons after graduation. The presentation should NOT include: An emphasis on sign-on. ( all web apps have a sign-on ) Showing of any code. ( your attendees don't care about code )","title":"Capstone Project Presentation Guidelines"},{"location":"additionalResources/reportABug/","text":"Report a Bug Loading\u2026","title":"Report A Bug"},{"location":"additionalResources/reportABug/#report-a-bug","text":"Loading\u2026","title":"Report a Bug"},{"location":"additionalResources/studentPresentations/","text":"Daily Student Presentations The Purpose In order to develop our students' communication skills around software development, each student will plan, practice, and teach to the class on a subject listed here and in the home page of this textbook. The subject may be a little obscure or only slightly related to the current topic. But the second objective for these presentations is to open the minds of all the students to things we don't have enough time to cover in these short weeks together. Students should prepare in advance and take their responsibility to the class and themselves seriously. Take this time now to decide and record who will present starting next class, Day 2, through Day 16, 15 classes total. It is suggested the instructor use GoogleSheets to organize and share the information with students. Feel empowered to write blogs, make a video, create a diagram(s), and develop code bases for your presentations effectiveness. Class 1 - Organize and Coordinate who and when students are presenting. Class 2 - 33% of students: In 4 minutes, pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? Class 3 - 33% of students: In 4 minutes, pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? Class 4 - 33% of students: In 4 minutes, pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? Class 5 - VS Code Short-Cuts - Present to the class 7 short-cuts, why and how to use them. VS Code Packages - Present to the class 3 useful and under utilized packages for VS Code. Class 6 - How do you learn to learn? Teach your class strategies to learn more and faster. Check out ultra-learning for a start. 5 Node commands that haven't been covered so far. Class 7 - Teach the class 3 Useful Git commands that haven't been learned yet. Explain how to use the debugging tool in VS Code and how to debug code with it Class 8 - Explain and demonstrate to your fellow students 1) Template Literals in ES6 and 2) What and how to use Multi-line Strings in ES6 Explain and demonstrate to your classmates 1) what and how to use the Destructuring Assignment in ES6 and 2) what and how to use Classes in ES6 Class 9 - Explain and demonstrate to your fellow classmates 1) the Block-Scoped constructs let and const. Why were they created and how do we use them? As well as, 2) Default Parameters in ES6 Describe to the class 1) what function overloading is in class in JavaScript? 2) How to empty an array in JavaScript? Class 10 - For Mac Users : Introduce to the class, iterm and why it's a fun and useful terminal replacement. Offer to the class 3 beginner friendly tips and 3 beginner friendly configurations. If you've already discussed iterm in class, offer to your classmates 5 new configurations to improve yours and their workflow. For Window Users : Introduce ConEmu and why it's a fun and useful terminal replacement. Offer to the class 3 beginner friendly tips and 3 beginner friendly configurations. If you've already discussed ConEmu in class, offer to your classmates 5 new configurations to improve yours and their workflow. Explain to the class what is Node. What are Node Modules? What is npm used for? Why do we need to use npm and node? How do you import a Node module into a project? Class 11 - Introduce and interest people in the event loop in Javascript.What the heap and stack about? Bring to the class an example of an async function with await variables. What do they do? Why would we use them and how do we use them? Class 12 - Demo Optional Chaining & Nullish Coalescing What is a hackathon? Why do they exist? What does one do at a hackathon? Where can you participate in them? Share with the class upcoming hackathons. Class 13 - Object Shorthand & Styling Console Log Statements What is proper code spacing? Using the videos and examples in this textbook, demonstrate what spacing you should use and why. Class 14 - What is ESLINT? How can you use it to help you with spacing, errors, and bugs? What package do the JS211 repos come with to work with ESLINT? How do you use it? What is and how do you use Prettier? Class 15 - Demonstrate the use of axios compared to fetch. When would you use it over fetch? Why? Find a graph of all the Node packages. (The Node Universe) Demo it to the class and help them understand the environment you're learning to program in. Class 16 - All Students: In 2 minutes, pitch your graduation app to the class. What\u2019s the problem? How does this app solve it?","title":"Student Presentations"},{"location":"additionalResources/studentPresentations/#daily-student-presentations","text":"","title":"Daily Student Presentations"},{"location":"additionalResources/studentPresentations/#the-purpose","text":"In order to develop our students' communication skills around software development, each student will plan, practice, and teach to the class on a subject listed here and in the home page of this textbook. The subject may be a little obscure or only slightly related to the current topic. But the second objective for these presentations is to open the minds of all the students to things we don't have enough time to cover in these short weeks together. Students should prepare in advance and take their responsibility to the class and themselves seriously. Take this time now to decide and record who will present starting next class, Day 2, through Day 16, 15 classes total. It is suggested the instructor use GoogleSheets to organize and share the information with students. Feel empowered to write blogs, make a video, create a diagram(s), and develop code bases for your presentations effectiveness. Class 1 - Organize and Coordinate who and when students are presenting. Class 2 - 33% of students: In 4 minutes, pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? Class 3 - 33% of students: In 4 minutes, pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? Class 4 - 33% of students: In 4 minutes, pitch your graduation app to the class. What\u2019s the problem? How does this app solve it? Class 5 - VS Code Short-Cuts - Present to the class 7 short-cuts, why and how to use them. VS Code Packages - Present to the class 3 useful and under utilized packages for VS Code. Class 6 - How do you learn to learn? Teach your class strategies to learn more and faster. Check out ultra-learning for a start. 5 Node commands that haven't been covered so far. Class 7 - Teach the class 3 Useful Git commands that haven't been learned yet. Explain how to use the debugging tool in VS Code and how to debug code with it Class 8 - Explain and demonstrate to your fellow students 1) Template Literals in ES6 and 2) What and how to use Multi-line Strings in ES6 Explain and demonstrate to your classmates 1) what and how to use the Destructuring Assignment in ES6 and 2) what and how to use Classes in ES6 Class 9 - Explain and demonstrate to your fellow classmates 1) the Block-Scoped constructs let and const. Why were they created and how do we use them? As well as, 2) Default Parameters in ES6 Describe to the class 1) what function overloading is in class in JavaScript? 2) How to empty an array in JavaScript? Class 10 - For Mac Users : Introduce to the class, iterm and why it's a fun and useful terminal replacement. Offer to the class 3 beginner friendly tips and 3 beginner friendly configurations. If you've already discussed iterm in class, offer to your classmates 5 new configurations to improve yours and their workflow. For Window Users : Introduce ConEmu and why it's a fun and useful terminal replacement. Offer to the class 3 beginner friendly tips and 3 beginner friendly configurations. If you've already discussed ConEmu in class, offer to your classmates 5 new configurations to improve yours and their workflow. Explain to the class what is Node. What are Node Modules? What is npm used for? Why do we need to use npm and node? How do you import a Node module into a project? Class 11 - Introduce and interest people in the event loop in Javascript.What the heap and stack about? Bring to the class an example of an async function with await variables. What do they do? Why would we use them and how do we use them? Class 12 - Demo Optional Chaining & Nullish Coalescing What is a hackathon? Why do they exist? What does one do at a hackathon? Where can you participate in them? Share with the class upcoming hackathons. Class 13 - Object Shorthand & Styling Console Log Statements What is proper code spacing? Using the videos and examples in this textbook, demonstrate what spacing you should use and why. Class 14 - What is ESLINT? How can you use it to help you with spacing, errors, and bugs? What package do the JS211 repos come with to work with ESLINT? How do you use it? What is and how do you use Prettier? Class 15 - Demonstrate the use of axios compared to fetch. When would you use it over fetch? Why? Find a graph of all the Node packages. (The Node Universe) Demo it to the class and help them understand the environment you're learning to program in. Class 16 - All Students: In 2 minutes, pitch your graduation app to the class. What\u2019s the problem? How does this app solve it?","title":"The Purpose"},{"location":"additionalResources/bonusMaterial/checkersBonus/","text":"Checkers App Overview Today students will apply their knowledge of Object Oriented Programming to build checkers. The goal of Checkers is to remove all your opponent's pieces from the board. Your pieces can only move forward one tile diagonally (they always stay on the color of tile they started on.) To capture an opponent's piece and remove it from the board, you need to \"jump\" over their piece with one of yours. Jumping is mandatory, which means you have to jump with one of your pieces if you are able to. Try to force your opponent to make a jump and put them in a bad position! If one of your pieces gets to the opposite side of the board (your opponent's back row), it will turn into a King. Kings can move and jump diagonally in any direction (remember, your regular pieces can only move forward). Kings can even combine jumps forward and backward on the same turn! You win by removing all of your opponent's pieces from the board, or if your opponent can't make a move. In your terminal app you will create create a board with an array or arrays then place \"markers\" for your checkers\" then with the input of the user take in coordinates from where the checker starts to where the user wants the checker to go. Then you will add in logic to see if the move is legal. Then you will figure out how to remove a checker if it's jumped. How to Play Checkers How Clone the Checkers Repo Create a new branch called \"checkers\" Use this guide to Whiteboard -> Code Plan -> Psuedo Code -> Place your code in the /05week/checkers.js file in your workbook. Get to Coding!! Build the Board Class The Board() function will print the a graph representation of the board with or without checkers on it. One approach could be to generate a grid = [] variable of the appropriate size. Then loop through the list of checkers in the board, and fill in the appropriate symbols in the correct cells. Once the grid is filled out, then we can loop through the grid rows and cols to print out the grid. A board with no checkers would look like this: 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 Let's create some checkers! In your Board constructor, create an attribute called Checkers and assign it to an empty list. This will be your repository of checker pieces. The Board constructor should generate 12 white pieces and 12 black pieces at the following initial positions. 1 2 3 4 5 6 7 8 9 White positions: [0, 1], [0, 3], [0, 5], [0, 7], [1, 0], [1, 2], [1, 4], [1, 6], [2, 1], [2, 3], [2, 5], [2, 7] Black Positions: [5, 0], [5, 2], [5, 4], [5, 6], [6, 1], [6, 3], [6, 5], [6, 7], [7, 0], [7, 2], [7, 4], [7, 6] After instantiating each checker add it to the list of checkers held by the board. Get the Game Started Below is what the display for the game would look like when started 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 0 1 2 3 4 5 6 7 0 \u25cb \u25cb \u25cb \u25cb 1 \u25cb \u25cb \u25cb \u25cb 2 \u25cb \u25cb \u25cb \u25cb 3 4 5 \u25cf \u25cf \u25cf \u25cf 6 \u25cf \u25cf \u25cf \u25cf 7 \u25cf \u25cf \u25cf \u25cf 'move' or 'remove' checker? move Enter Pickup Row: 5 Enter Pickup Column: 0 Enter Placement Row: 4 Enter Placement Column: 1 0 1 2 3 4 5 6 7 0 \u25cb \u25cb \u25cb \u25cb 1 \u25cb \u25cb \u25cb \u25cb 2 \u25cb \u25cb \u25cb \u25cb 3 4 \u25cf 5 \u25cf \u25cf \u25cf 6 \u25cf \u25cf \u25cf \u25cf 7 \u25cf \u25cf \u25cf \u25cf Go play yourself some Checkers . Push Yourself Further Handle making checkers into Kings This would be an awesome game to attach to a GUI!","title":"Checkers App"},{"location":"additionalResources/bonusMaterial/checkersBonus/#checkers-app","text":"","title":"Checkers App"},{"location":"additionalResources/bonusMaterial/checkersBonus/#overview","text":"Today students will apply their knowledge of Object Oriented Programming to build checkers. The goal of Checkers is to remove all your opponent's pieces from the board. Your pieces can only move forward one tile diagonally (they always stay on the color of tile they started on.) To capture an opponent's piece and remove it from the board, you need to \"jump\" over their piece with one of yours. Jumping is mandatory, which means you have to jump with one of your pieces if you are able to. Try to force your opponent to make a jump and put them in a bad position! If one of your pieces gets to the opposite side of the board (your opponent's back row), it will turn into a King. Kings can move and jump diagonally in any direction (remember, your regular pieces can only move forward). Kings can even combine jumps forward and backward on the same turn! You win by removing all of your opponent's pieces from the board, or if your opponent can't make a move. In your terminal app you will create create a board with an array or arrays then place \"markers\" for your checkers\" then with the input of the user take in coordinates from where the checker starts to where the user wants the checker to go. Then you will add in logic to see if the move is legal. Then you will figure out how to remove a checker if it's jumped. How to Play Checkers","title":"Overview"},{"location":"additionalResources/bonusMaterial/checkersBonus/#how","text":"Clone the Checkers Repo Create a new branch called \"checkers\" Use this guide to Whiteboard -> Code Plan -> Psuedo Code -> Place your code in the /05week/checkers.js file in your workbook. Get to Coding!!","title":"How"},{"location":"additionalResources/bonusMaterial/checkersBonus/#build-the-board-class","text":"The Board() function will print the a graph representation of the board with or without checkers on it. One approach could be to generate a grid = [] variable of the appropriate size. Then loop through the list of checkers in the board, and fill in the appropriate symbols in the correct cells. Once the grid is filled out, then we can loop through the grid rows and cols to print out the grid. A board with no checkers would look like this: 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 Let's create some checkers! In your Board constructor, create an attribute called Checkers and assign it to an empty list. This will be your repository of checker pieces. The Board constructor should generate 12 white pieces and 12 black pieces at the following initial positions. 1 2 3 4 5 6 7 8 9 White positions: [0, 1], [0, 3], [0, 5], [0, 7], [1, 0], [1, 2], [1, 4], [1, 6], [2, 1], [2, 3], [2, 5], [2, 7] Black Positions: [5, 0], [5, 2], [5, 4], [5, 6], [6, 1], [6, 3], [6, 5], [6, 7], [7, 0], [7, 2], [7, 4], [7, 6] After instantiating each checker add it to the list of checkers held by the board.","title":"Build the Board Class"},{"location":"additionalResources/bonusMaterial/checkersBonus/#get-the-game-started","text":"Below is what the display for the game would look like when started 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 0 1 2 3 4 5 6 7 0 \u25cb \u25cb \u25cb \u25cb 1 \u25cb \u25cb \u25cb \u25cb 2 \u25cb \u25cb \u25cb \u25cb 3 4 5 \u25cf \u25cf \u25cf \u25cf 6 \u25cf \u25cf \u25cf \u25cf 7 \u25cf \u25cf \u25cf \u25cf 'move' or 'remove' checker? move Enter Pickup Row: 5 Enter Pickup Column: 0 Enter Placement Row: 4 Enter Placement Column: 1 0 1 2 3 4 5 6 7 0 \u25cb \u25cb \u25cb \u25cb 1 \u25cb \u25cb \u25cb \u25cb 2 \u25cb \u25cb \u25cb \u25cb 3 4 \u25cf 5 \u25cf \u25cf \u25cf 6 \u25cf \u25cf \u25cf \u25cf 7 \u25cf \u25cf \u25cf \u25cf Go play yourself some Checkers .","title":"Get the Game Started"},{"location":"additionalResources/bonusMaterial/checkersBonus/#push-yourself-further","text":"Handle making checkers into Kings This would be an awesome game to attach to a GUI!","title":"Push Yourself Further"},{"location":"additionalResources/bonusMaterial/javascriptingBonus/","text":"Bonus Challenge: Javascripting.js By now you've covered the main parts of JavaScript. There are still some weird parts that you should get to know but we've covered a lot of ground and have definitely got ourselves to a higher order of functionality in our coding abilities. To make sure we solidify our understanding of programming and JavaScript as a coding language you're going to install Javascripting.js and work through each of the tasks in the program. Open your terminal run npm install --global javascripting if that doesn't work try: sudo npm install --global javascripting (type in your computer's password) After it's installed navigate to your jsdev folder or wherever you want to build this practice problem. Then run javascripting in the folder you'd like. Go to \"Introduction\" and hit ENTER. You'll then make a directory to hold these new files in: mkdir javascripting-practice Work through the directions to complete each challenge. If you get lost, there's a YouTube playlist over NodeSchool's JavaScripting course.","title":"JavaScripting.js"},{"location":"additionalResources/bonusMaterial/javascriptingBonus/#bonus-challenge-javascriptingjs","text":"By now you've covered the main parts of JavaScript. There are still some weird parts that you should get to know but we've covered a lot of ground and have definitely got ourselves to a higher order of functionality in our coding abilities. To make sure we solidify our understanding of programming and JavaScript as a coding language you're going to install Javascripting.js and work through each of the tasks in the program. Open your terminal run npm install --global javascripting if that doesn't work try: sudo npm install --global javascripting (type in your computer's password) After it's installed navigate to your jsdev folder or wherever you want to build this practice problem. Then run javascripting in the folder you'd like. Go to \"Introduction\" and hit ENTER. You'll then make a directory to hold these new files in: mkdir javascripting-practice Work through the directions to complete each challenge. If you get lost, there's a YouTube playlist over NodeSchool's JavaScripting course.","title":"Bonus Challenge: Javascripting.js"},{"location":"additionalResources/questionsForDiscussion/qfd-class-1/","text":"Class One - Questions for Discussion What is a Capstone App? Why do we need one? Why are we starting to pitch about them now? What are you struggling to understand about JavaScript, Node, or anything else? Explain Flipped classroom vs Traditional classroom? What are the Questions for Discussion meant for? How do you think they should be handled? How would a successful student work through pre-lesson homework? If you\u2019re planning to be a developer after this program, how would you approach class time? Failure to complete the pre-lesson homework outside of class will lead to failure in the class. True or false? When you don\u2019t know a term mentioned in the Pre-Lesson homework what should you do? Explain these tools and how we use them: Browser DevTools The Cloud GUI IDE/Text editor Terminal/CLI/Command line emulator Review. What is a: Data stream Loop Do you know anything about these languages? Dart Erlang Cobol C C++ What do each of these commands do? What are they used for? git clone git status git add -A git commit -m \"fixed auth problem git push ls pwd or echo %cd% cd devFolder touch index.js mkdir pantheon npm i node index.js Are any of these terms confusing? runtime environment Compiled Critical thinking Open-source Dependencies/packages JSON - JavaScript Object Notation Function signatures Function declaration Function invocation Function parameters Function arguments Executed/called/invoked Token Data type Keyword/reserved word Type coercion \"Truthy\" \"Falsey\" Node question.Does anyone know what the package.json is used for? What is a variable? Why is it used? What is a function? How do we declare one in JS? How do we invoke one in JS? What is a conditional statement? What operators can you remember? What data types can you remember? What is a data type? What is a built-in method? How do we use them? Give an example. Why do your variables have to be above your function invocation? Why do we write 'use strict' at the top of every JS project? How and why do we write comments in JS code? Why is JavaScript important for web developers? Are there any alternatives? Write on the board or in chat the symbol for each of these: Modulus Operator Bang Operator Less-Than Operator Greater Than Operator Assignment operator Identity operator And Operator Or operator Object-Literal Syntax Array Syntax How do you: Invoke a function/call a function Declare a function Pass in arguments","title":"Day 1 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-1/#class-one-questions-for-discussion","text":"What is a Capstone App? Why do we need one? Why are we starting to pitch about them now? What are you struggling to understand about JavaScript, Node, or anything else? Explain Flipped classroom vs Traditional classroom? What are the Questions for Discussion meant for? How do you think they should be handled? How would a successful student work through pre-lesson homework? If you\u2019re planning to be a developer after this program, how would you approach class time? Failure to complete the pre-lesson homework outside of class will lead to failure in the class. True or false? When you don\u2019t know a term mentioned in the Pre-Lesson homework what should you do? Explain these tools and how we use them: Browser DevTools The Cloud GUI IDE/Text editor Terminal/CLI/Command line emulator Review. What is a: Data stream Loop Do you know anything about these languages? Dart Erlang Cobol C C++ What do each of these commands do? What are they used for? git clone git status git add -A git commit -m \"fixed auth problem git push ls pwd or echo %cd% cd devFolder touch index.js mkdir pantheon npm i node index.js Are any of these terms confusing? runtime environment Compiled Critical thinking Open-source Dependencies/packages JSON - JavaScript Object Notation Function signatures Function declaration Function invocation Function parameters Function arguments Executed/called/invoked Token Data type Keyword/reserved word Type coercion \"Truthy\" \"Falsey\" Node question.Does anyone know what the package.json is used for? What is a variable? Why is it used? What is a function? How do we declare one in JS? How do we invoke one in JS? What is a conditional statement? What operators can you remember? What data types can you remember? What is a data type? What is a built-in method? How do we use them? Give an example. Why do your variables have to be above your function invocation? Why do we write 'use strict' at the top of every JS project? How and why do we write comments in JS code? Why is JavaScript important for web developers? Are there any alternatives? Write on the board or in chat the symbol for each of these: Modulus Operator Bang Operator Less-Than Operator Greater Than Operator Assignment operator Identity operator And Operator Or operator Object-Literal Syntax Array Syntax How do you: Invoke a function/call a function Declare a function Pass in arguments","title":"Class One - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-10/","text":"Class 10 - Question for Discussion What are the four basic concepts of OOP? Explain each. What is inheritance? Can you give some examples of tokens? Why would we want to make our app modular? How would we build our app in a modular way? What is \"this\"? What is its value? What are closures and why are they so useful to us? Can you explain the difference between call and apply? What is the prototype object in JavaScript and how it is used?","title":"Day 10 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-10/#class-10-question-for-discussion","text":"What are the four basic concepts of OOP? Explain each. What is inheritance? Can you give some examples of tokens? Why would we want to make our app modular? How would we build our app in a modular way? What is \"this\"? What is its value? What are closures and why are they so useful to us? Can you explain the difference between call and apply? What is the prototype object in JavaScript and how it is used?","title":"Class 10 - Question for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-11/","text":"Class 11 - Questions for Discussion What's the Job Outlook for Web Developers in Your City? Every day you're working through tough challenges, stretching your programmer muscles and learning strange concepts. While it is fun and you will fall in love with solving problems, it's also important to start thinking about what jobs are in your city. Because, after all, you do want to work in this field! Let's make sure we keep our mind on the target and our will focused on learning to program and code like a wizard!! AngelList Indeed Dice Hired LinkedIn Monster Other options What is Big O notation? How would you, in general terms, describe dynamic programming? Why do we use algorithms?","title":"Day 11 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-11/#class-11-questions-for-discussion","text":"What's the Job Outlook for Web Developers in Your City? Every day you're working through tough challenges, stretching your programmer muscles and learning strange concepts. While it is fun and you will fall in love with solving problems, it's also important to start thinking about what jobs are in your city. Because, after all, you do want to work in this field! Let's make sure we keep our mind on the target and our will focused on learning to program and code like a wizard!! AngelList Indeed Dice Hired LinkedIn Monster Other options What is Big O notation? How would you, in general terms, describe dynamic programming? Why do we use algorithms?","title":"Class 11 - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-12/","text":"Class 12 Questions for Discussion Why should we prepare for interviews now? What are the steps to whiteboarding in an interview and for each project we work on? What is time complexity as it pertains to algorithms? What are the three laws of algorithm recursion?","title":"Day 12 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-12/#class-12-questions-for-discussion","text":"Why should we prepare for interviews now? What are the steps to whiteboarding in an interview and for each project we work on? What is time complexity as it pertains to algorithms? What are the three laws of algorithm recursion?","title":"Class 12 Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-13/","text":"Class 13 - Question for Discussion What is an AJAX request? What is an API? What are the benefits of using an AJAX request? What is the Fetch API used for? How do you handle errors? What are errors? Why would you choose to use isomorphic-fetch? Why would you choose to use Axios?","title":"Day 13 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-13/#class-13-question-for-discussion","text":"What is an AJAX request? What is an API? What are the benefits of using an AJAX request? What is the Fetch API used for? How do you handle errors? What are errors? Why would you choose to use isomorphic-fetch? Why would you choose to use Axios?","title":"Class 13 - Question for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-14/","text":"Class 14: Questions for Discussion Why is error handling important? How do we do it in fetch? What is isomorphic-fetch? What can it do for us? What are all the methods of the response? What is stringify ? What does .json () do? Why do we use res or resp ? What does an API key do? What's axios? Why would we use axios?","title":"Day 14 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-14/#class-14-questions-for-discussion","text":"Why is error handling important? How do we do it in fetch? What is isomorphic-fetch? What can it do for us? What are all the methods of the response? What is stringify ? What does .json () do? Why do we use res or resp ? What does an API key do? What's axios? Why would we use axios?","title":"Class 14: Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-15/","text":"Class 15 - Questions For Discussion Be sure to look up the answers to these questions before you come into class. How can we use currying to our advantage? How can we use closure to our advantage? How can we use recursion to our advantage? What is a first class function in JavaScript? What's the difference between declarative and imperative? In terms of functional programming, what does arity mean? Why do we need to unit test our requests? What is lodash.js ?","title":"Day 15 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-15/#class-15-questions-for-discussion","text":"Be sure to look up the answers to these questions before you come into class. How can we use currying to our advantage? How can we use closure to our advantage? How can we use recursion to our advantage? What is a first class function in JavaScript? What's the difference between declarative and imperative? In terms of functional programming, what does arity mean? Why do we need to unit test our requests? What is lodash.js ?","title":"Class 15 - Questions For Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-16/","text":"Class 16 - Question for Discussion Be sure to look up the answers to these questions up before class. Why do we talk about functional programming and lodash together? Why would we use immutable.js ? What are we doing with npm init ? What is Node.js? Is Mocha a Node module? Is dotenv a Node module? How do we set up start-up scripts so we can use npm start instead of live-server? Look at any of the pre-built terminal apps you've done in this course. How is it set up? What is a package.json ? Should you change it?","title":"Day 16 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-16/#class-16-question-for-discussion","text":"Be sure to look up the answers to these questions up before class. Why do we talk about functional programming and lodash together? Why would we use immutable.js ? What are we doing with npm init ? What is Node.js? Is Mocha a Node module? Is dotenv a Node module? How do we set up start-up scripts so we can use npm start instead of live-server? Look at any of the pre-built terminal apps you've done in this course. How is it set up? What is a package.json ? Should you change it?","title":"Class 16 - Question for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-2/","text":"Class 2 - Questions For Discussion Why do we need conditional statements? What are you struggling with so far? Double-ampersand Double-pipes Operands Template literals Alternative operation Else statements If evaluation If block Else block Switch statements Ternary operator parseInt() Math.random() What is a conditional and why are they so important? What is the difference between an if/then statement and a switch statement? Explain how to use truthy and falsy. Watch this whiteboarding video . What are we doing before we code?","title":"Day 2 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-2/#class-2-questions-for-discussion","text":"Why do we need conditional statements? What are you struggling with so far? Double-ampersand Double-pipes Operands Template literals Alternative operation Else statements If evaluation If block Else block Switch statements Ternary operator parseInt() Math.random() What is a conditional and why are they so important? What is the difference between an if/then statement and a switch statement? Explain how to use truthy and falsy. Watch this whiteboarding video . What are we doing before we code?","title":"Class 2 - Questions For Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-3/","text":"Class 3 Questions For Discussion When should you use dot-notation vs bracket notation? What defines a String in JavaScript/what's the syntax of a String? How would you describe the difference between slice() and splice()? What does trim() do? When might you use split() ? What do you think scope means as it relates to a function? Explain each of the following terms: 0 indexed parameters Bracket notation Dot notation Type String Indexed values ++ -- for() loop Mutability Immutability Nesting Multi-dimensional arrays Why would we use an array over a string? What can be stored in an array? What array methods can you remember the name and syntax of? What does .include() do? Does the length method have parenthesis? Why or why not? What are two ways to access the last value of an array? How do you check if an object is an array or not? What is the syntax of a for loop? Explain the syntax of a for loop. What does mutability mean? In the future, how do you think you'll want to use mutability? - [ ]Why would you want to avoid it? How do you compare two arrays for equality? What is the difference between indexOf and lastIndexOf ? What is the difference between shift and unshift ?","title":"Day 3 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-3/#class-3-questions-for-discussion","text":"When should you use dot-notation vs bracket notation? What defines a String in JavaScript/what's the syntax of a String? How would you describe the difference between slice() and splice()? What does trim() do? When might you use split() ? What do you think scope means as it relates to a function? Explain each of the following terms: 0 indexed parameters Bracket notation Dot notation Type String Indexed values ++ -- for() loop Mutability Immutability Nesting Multi-dimensional arrays Why would we use an array over a string? What can be stored in an array? What array methods can you remember the name and syntax of? What does .include() do? Does the length method have parenthesis? Why or why not? What are two ways to access the last value of an array? How do you check if an object is an array or not? What is the syntax of a for loop? Explain the syntax of a for loop. What does mutability mean? In the future, how do you think you'll want to use mutability? - [ ]Why would you want to avoid it? How do you compare two arrays for equality? What is the difference between indexOf and lastIndexOf ? What is the difference between shift and unshift ?","title":"Class 3 Questions For Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-4/","text":"Class 4 - Questions for Discussion Object-Literal Tell me what you learned. What are you confused about? What is the syntax of an object-literal in JavaScript? What object methods can you remember the name and syntax of? How would you explain an object and the purpose of using them for data storage? How do you use the built-in methods of an object? Compare Object-literals to Arrays. Why would we use one over the other? What are their differences? How do you use each of the following methods and what do they do? .entries() .assign() .keys() .is() Define the following terms: Keys Values Key-value pairs Object property Object method Dot-Notation Bracket-Notation Curly braces Read Write Whitespace Loops What is the difference between for/in and for/of loops? How does a do...while loop work? What is the syntax of a for loop? while loop? for..in? do...while? Action statement Stop condition Initial expression Iterator Incrementor Infinite loop Git What is a git branch? Why do we need to branch repos? What's the difference between forking and branching? How do you branch? Where do you usually branch off of? What is a unit test? What are the different ways to write tests? Why are tests important? Why does it make sense to write the tests before writing the app?","title":"Day 4 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-4/#class-4-questions-for-discussion","text":"","title":"Class 4 - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-4/#object-literal","text":"Tell me what you learned. What are you confused about? What is the syntax of an object-literal in JavaScript? What object methods can you remember the name and syntax of? How would you explain an object and the purpose of using them for data storage? How do you use the built-in methods of an object? Compare Object-literals to Arrays. Why would we use one over the other? What are their differences? How do you use each of the following methods and what do they do? .entries() .assign() .keys() .is() Define the following terms: Keys Values Key-value pairs Object property Object method Dot-Notation Bracket-Notation Curly braces Read Write Whitespace","title":"Object-Literal"},{"location":"additionalResources/questionsForDiscussion/qfd-class-4/#loops","text":"What is the difference between for/in and for/of loops? How does a do...while loop work? What is the syntax of a for loop? while loop? for..in? do...while? Action statement Stop condition Initial expression Iterator Incrementor Infinite loop","title":"Loops"},{"location":"additionalResources/questionsForDiscussion/qfd-class-4/#git","text":"What is a git branch? Why do we need to branch repos? What's the difference between forking and branching? How do you branch? Where do you usually branch off of? What is a unit test? What are the different ways to write tests? Why are tests important? Why does it make sense to write the tests before writing the app?","title":"Git"},{"location":"additionalResources/questionsForDiscussion/qfd-class-5/","text":"Class 5 - Questions for Discussion What is the Document Object Model? How do you add or modify HTML elements? What is the difference between document and window? How do you access an element by its specific ID? How do you access a group of elements that share a class? How do you select all the child elements that match the provided CSS selector criteria? How do you empty an array in JavaScript? How do you check if an object is an array or not? Anything you've worked with in JS so far...how do you see it in your mind? How do you select the child element of an element selected by a class? Define the following DOM GUI Nodes Upside-down tree Pop-up alert","title":"Day 5 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-5/#class-5-questions-for-discussion","text":"What is the Document Object Model? How do you add or modify HTML elements? What is the difference between document and window? How do you access an element by its specific ID? How do you access a group of elements that share a class? How do you select all the child elements that match the provided CSS selector criteria? How do you empty an array in JavaScript? How do you check if an object is an array or not? Anything you've worked with in JS so far...how do you see it in your mind? How do you select the child element of an element selected by a class? Define the following DOM GUI Nodes Upside-down tree Pop-up alert","title":"Class 5 - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-6/","text":"Class 6 - Questions for Discussion lexical context What is an object? What is the difference between objects and arrays? What is the difference between the properties and methods of objects? How would you describe .bind() ? How would you describe this ?","title":"Day 6 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-6/#class-6-questions-for-discussion","text":"lexical context What is an object? What is the difference between objects and arrays? What is the difference between the properties and methods of objects? How would you describe .bind() ? How would you describe this ?","title":"Class 6 - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-7/","text":"Class 7 - Question for Discussion What are some advantages of using higher-order functions instead of for loops? What is functional programming? Is JavaScript a functional programming language? What is an object? What are scoped variables in JavaScript?","title":"Day 7 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-7/#class-7-question-for-discussion","text":"What are some advantages of using higher-order functions instead of for loops? What is functional programming? Is JavaScript a functional programming language? What is an object? What are scoped variables in JavaScript?","title":"Class 7 - Question for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-8/","text":"Class 8 - Questions for Discussion What are loops? Really and truly, how do they work? Compare and contrast the different types of loops. When is a for loop better than a while loop? How is the readability of the code affected? What is the difference between a for loop and a for...in loop? What is the difference between a while loop and a do...while loop? Explain what each higher order function does. forEach map filter reduce","title":"Day 8 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-8/#class-8-questions-for-discussion","text":"What are loops? Really and truly, how do they work? Compare and contrast the different types of loops. When is a for loop better than a while loop? How is the readability of the code affected? What is the difference between a for loop and a for...in loop? What is the difference between a while loop and a do...while loop? Explain what each higher order function does. forEach map filter reduce","title":"Class 8 - Questions for Discussion"},{"location":"additionalResources/questionsForDiscussion/qfd-class-9/","text":"Class 9 - Questions for Discussion What is object-oriented programming? Why is it important and how do you think you might be able to use it in your Capstone Project? What does instantiate mean? How do you create a class? How do you use a class? What is the difference between a class's methods and properties? How might different types of classes of objects interact? Could a new Human have a new Bicycle assigned to one of its properties? How do you describe closure? How do you think you can use it to your advantage? Was there anything that surprised you in this section?","title":"Day 9 QFD"},{"location":"additionalResources/questionsForDiscussion/qfd-class-9/#class-9-questions-for-discussion","text":"What is object-oriented programming? Why is it important and how do you think you might be able to use it in your Capstone Project? What does instantiate mean? How do you create a class? How do you use a class? What is the difference between a class's methods and properties? How might different types of classes of objects interact? Could a new Human have a new Bicycle assigned to one of its properties? How do you describe closure? How do you think you can use it to your advantage? Was there anything that surprised you in this section?","title":"Class 9 - Questions for Discussion"},{"location":"module-1/class-1/","text":"Class 1: JavaScript Review The way to get started is to quit talking and begin doing.\u2003\u2014Walt Disney Greet, Outline, and Objectify Since we don't know each other, at least, not your instructor, everyone should answer these questions aloud: Hi, my name is ... I currently work as a ... but I love to spend my time ... I'm excited about learning to program because ... My best time to do a study group or tutoring is ... (example: Mondays in the afternoon.) Today we're going to: Review and reinforce our understanding of the JavaScript language by building and running an application within the Node runtime environment Introductions - 15 mins Explain and assign Daily Student Presentations - 10 mins Questions for Discussion - 20 mins Instructor led overview of the ebook - 15 mins: Course Objective Course Structure & Expectations Graduation and Presentation Requirements Capstone Project Presentation Guidelines Utility of Git commands Part One: Solutions - 30 mins Part Two: The DOM - 30 mins Push Yourself Further - 15 mins Daily Student Presentations Overview & Organization While learning to code is pretty important if you want to code for work, so is learning to talk about code! To do this, you must first know something about code. Secondly, you have to know something about talking to people in one-on-one chats, group conversations and team presentations. This is a necessary skill and will be a major part of your future interviews. To get us all prepped and ready to talk about our code, we're going to be practicing talking to the class about shortcuts and tool efficiency. It's one thing to know how to code and it's another to know how to use your computer's keyboard, text editor and terminal well. Wow your interviewers with your sharp fingers and grow your class's skill with these presentations! Today we will assign people to the remaining days of class to present for 5-7 minutes ONLY, at the beginning of class, on the pre-assigned topic. All student presentation topics are listed here . Take the time now to select, plan, and record what day you're presenting. Next class one-third of the class will give a four-minute pitch of their planned Capstone App they intend to build by the end of 411. Prompt Pitch your Capstone App to the class. What\u2019s the problem? How does this app solve it? Through the next week the other two-thirds of the class will follow suit and present a four-minute pitch over their Capstone App!! Questions for Student Led Discussion, 15 mins Questions to prompt discussion Creation Time, 60-90 minutes Let's take a look at the JS211-CurrentDate Repo Did anyone not finish it? Let's walk through it one by one starting from the package.json file. Did anyone not get it pushed up to their gitHub account? Use your knowledge of HTML and CSS to bring the functionality of these code blocks to the DOM Go to the index.html file and see how the file is connected to main.js. Follow the pattern to bring your JavaScript solutions to the DOM for a user to see visually. git status git add main.js index.html git status git commit -m \"Solutions are fixed and showing in the DOM\" git push Turn the URL of this this repo in to be graded. Push Yourself Further Try to complete this repl.it Additional Resources YT, nevsky.programming - How to Display Date and Time YT, The Net Ninja - JavaScript for Beginners VMEO, Joe@ACA - Class Work Student Feedback Loading\u2026 Exit Recap, Attendance, and Reminders, 5 mins Create assignment for \"CurrentDate&Time\" Do your pre-lessons before next class! Complete the feedback survey","title":"Class 1 JS Review"},{"location":"module-1/class-1/#class-1-javascript-review","text":"The way to get started is to quit talking and begin doing.\u2003\u2014Walt Disney","title":"Class 1: JavaScript Review"},{"location":"module-1/class-1/#greet-outline-and-objectify","text":"Since we don't know each other, at least, not your instructor, everyone should answer these questions aloud: Hi, my name is ... I currently work as a ... but I love to spend my time ... I'm excited about learning to program because ... My best time to do a study group or tutoring is ... (example: Mondays in the afternoon.) Today we're going to: Review and reinforce our understanding of the JavaScript language by building and running an application within the Node runtime environment Introductions - 15 mins Explain and assign Daily Student Presentations - 10 mins Questions for Discussion - 20 mins Instructor led overview of the ebook - 15 mins: Course Objective Course Structure & Expectations Graduation and Presentation Requirements Capstone Project Presentation Guidelines Utility of Git commands Part One: Solutions - 30 mins Part Two: The DOM - 30 mins Push Yourself Further - 15 mins","title":"Greet, Outline, and Objectify"},{"location":"module-1/class-1/#daily-student-presentations-overview-organization","text":"While learning to code is pretty important if you want to code for work, so is learning to talk about code! To do this, you must first know something about code. Secondly, you have to know something about talking to people in one-on-one chats, group conversations and team presentations. This is a necessary skill and will be a major part of your future interviews. To get us all prepped and ready to talk about our code, we're going to be practicing talking to the class about shortcuts and tool efficiency. It's one thing to know how to code and it's another to know how to use your computer's keyboard, text editor and terminal well. Wow your interviewers with your sharp fingers and grow your class's skill with these presentations! Today we will assign people to the remaining days of class to present for 5-7 minutes ONLY, at the beginning of class, on the pre-assigned topic. All student presentation topics are listed here . Take the time now to select, plan, and record what day you're presenting. Next class one-third of the class will give a four-minute pitch of their planned Capstone App they intend to build by the end of 411. Prompt Pitch your Capstone App to the class. What\u2019s the problem? How does this app solve it? Through the next week the other two-thirds of the class will follow suit and present a four-minute pitch over their Capstone App!!","title":"Daily Student Presentations Overview &amp; Organization"},{"location":"module-1/class-1/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-1/class-1/#creation-time-60-90-minutes","text":"Let's take a look at the JS211-CurrentDate Repo Did anyone not finish it? Let's walk through it one by one starting from the package.json file. Did anyone not get it pushed up to their gitHub account? Use your knowledge of HTML and CSS to bring the functionality of these code blocks to the DOM Go to the index.html file and see how the file is connected to main.js. Follow the pattern to bring your JavaScript solutions to the DOM for a user to see visually. git status git add main.js index.html git status git commit -m \"Solutions are fixed and showing in the DOM\" git push Turn the URL of this this repo in to be graded.","title":"Creation Time, 60-90 minutes"},{"location":"module-1/class-1/#push-yourself-further","text":"Try to complete this repl.it","title":"Push Yourself Further"},{"location":"module-1/class-1/#additional-resources","text":"YT, nevsky.programming - How to Display Date and Time YT, The Net Ninja - JavaScript for Beginners VMEO, Joe@ACA - Class Work","title":"Additional Resources"},{"location":"module-1/class-1/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-1/class-1/#exit-recap-attendance-and-reminders-5-mins","text":"Create assignment for \"CurrentDate&Time\" Do your pre-lessons before next class! Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-1/class-2/","text":"Class 2: Rock, Paper, Scissors The pessimist sees difficulty in every opportunity. The optimist sees opportunity in every difficulty. \u2014Winston Churchill Greet, Outline, and Objectify Today we're going to: GENERIC OBJECTIVE: Understand the use of logic gates by applying their understanding of them to build a Rock, Paper, Scissors game. Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Project: R.P.S. - 70 mins Fork & Clone the RPS Repo Ensure you have installed all dependencies/packages: npm install Instructor covers the package.json and what the \"scripts\": and \"test\": objects are. Ensure you know how to run tests for each program: npm test main.js Whiteboard a solution to building a Rock, Paper, Scissors program Translate the broad ideas to pseudo code Convert the pseudo code to real JavaScript code Type into your text editor the JavaScript code you've come up with one step at a time Work through your bugs Achieve green checks for each of your unit tests Push Yourself Further Blog to Show You Know Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins Restate the question aloud. Write the question out at the top of the whiteboard. Ask any clarifying questions you need. Invoke the function and write out the expected output given the sample input. If none is given, make it up. Write out a code plan to the side of the whiteboard. Speak aloud every thought you have. THIS IS THE MOST IMPORTANT PART! Build the structure of your function(s). Slowly work through your code plan building the steps you need. Don't be afraid to mess up and say it aloud. It's not about finding the solution. It's about collaborating and working toward a solution! After you finish, take a picture and transfer it to a Repl.it when you get home. PROMPT: Hourglasses Puzzle - How do you measure 9 minutes from a 4 minute hourglass and a 7 minute hourglass? We have only 2 sand timers: 4 minutes and 7 minutes but we need to measure 9 minutes. How do we do it? Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 minutes Your first terminal application!! YAY!! Today, you're going to build a function, or two, that will take in an input from a user then another input from another user and compare them against one another to determine the winner of the game! Fork & Clone the RPS Repo then follow the README.md file. User1 input of rock , paper , or scissors . User2 input of rock , paper , or scissors . Compare User1 input to User2 input. If User1 input is 'rock' and User2 input is 'scissors' , User1 wins. If User1 input is 'rock' and User2 input is 'paper' , User2 wins. If User1 input is 'rock' and User2 input is 'rock' , it's a tie. If User1 input is 'paper' and User2 input is 'rock' , User1 wins. If User1 input is 'paper' and User2 input is 'scissors' , User2 wins. If User1 input is 'paper' and User2 input is 'paper' , it's a tie. If User1 input is 'scissors' and User2 input is 'paper' , User1 wins. If User1 input is 'scissors' and User2 input is 'rock' , User2 wins. If User1 input is ' scissors' and User2 input is 'scissors' , it's a tie. Can you think of a simpler way? Where are you going to clone this project to? What directory? Additional Resources Push Yourself Further What should the program return if the user inputs something that isn't \"rock\", \"paper\", or \"scissors\"? Can you use .trim() to solve the problem if a user types in a space with their input? Minimize redundancy: D.R.Y. up your code. Are their ways to not type as much as you've typed? Can you make the code smaller? Compartmentalize your code into individual functions. This game doesn't have to run just one function. Can you pull code blocks out and put them into other functions that can be called from rockPaperScissors ? Student Feedback Loading\u2026 Blog, to Show You Know Every other class will end with a discussion over these questions. If you have no idea about them, ask your instructor. Nevertheless, you will need to research the topics on your own and record what you learned in a blog. You will then turn in a link with the url of the published blog in Zollege. Feel free to copy/paste the question into google and read about what comes up. These interview questions are meant to broaden your knowledge and cover more ground than we can possibly get to in these few weeks. We want you to be well prepared for the rigors of interviewing for development jobs and knowing the answers to these questions will ensure that you have every tool you need to succeed! Blog Prompts Exit Recap, Attendance, and Reminders, 5 mins Create RPS Assignment Create Blog Prompt - 201 Assignment Prepare for Class 3 by completing all of your pre-class lessons Complete the feedback survey Student Feedback Loading\u2026","title":"Class 2 RPS"},{"location":"module-1/class-2/#class-2-rock-paper-scissors","text":"The pessimist sees difficulty in every opportunity. The optimist sees opportunity in every difficulty. \u2014Winston Churchill","title":"Class 2: Rock, Paper, Scissors"},{"location":"module-1/class-2/#greet-outline-and-objectify","text":"Today we're going to: GENERIC OBJECTIVE: Understand the use of logic gates by applying their understanding of them to build a Rock, Paper, Scissors game. Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Project: R.P.S. - 70 mins Fork & Clone the RPS Repo Ensure you have installed all dependencies/packages: npm install Instructor covers the package.json and what the \"scripts\": and \"test\": objects are. Ensure you know how to run tests for each program: npm test main.js Whiteboard a solution to building a Rock, Paper, Scissors program Translate the broad ideas to pseudo code Convert the pseudo code to real JavaScript code Type into your text editor the JavaScript code you've come up with one step at a time Work through your bugs Achieve green checks for each of your unit tests Push Yourself Further Blog to Show You Know Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-1/class-2/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-1/class-2/#interview-challenge-15-mins","text":"Restate the question aloud. Write the question out at the top of the whiteboard. Ask any clarifying questions you need. Invoke the function and write out the expected output given the sample input. If none is given, make it up. Write out a code plan to the side of the whiteboard. Speak aloud every thought you have. THIS IS THE MOST IMPORTANT PART! Build the structure of your function(s). Slowly work through your code plan building the steps you need. Don't be afraid to mess up and say it aloud. It's not about finding the solution. It's about collaborating and working toward a solution! After you finish, take a picture and transfer it to a Repl.it when you get home. PROMPT: Hourglasses Puzzle - How do you measure 9 minutes from a 4 minute hourglass and a 7 minute hourglass? We have only 2 sand timers: 4 minutes and 7 minutes but we need to measure 9 minutes. How do we do it?","title":"Interview Challenge, 15 mins"},{"location":"module-1/class-2/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-1/class-2/#creation-time-60-90-minutes","text":"Your first terminal application!! YAY!! Today, you're going to build a function, or two, that will take in an input from a user then another input from another user and compare them against one another to determine the winner of the game! Fork & Clone the RPS Repo then follow the README.md file. User1 input of rock , paper , or scissors . User2 input of rock , paper , or scissors . Compare User1 input to User2 input. If User1 input is 'rock' and User2 input is 'scissors' , User1 wins. If User1 input is 'rock' and User2 input is 'paper' , User2 wins. If User1 input is 'rock' and User2 input is 'rock' , it's a tie. If User1 input is 'paper' and User2 input is 'rock' , User1 wins. If User1 input is 'paper' and User2 input is 'scissors' , User2 wins. If User1 input is 'paper' and User2 input is 'paper' , it's a tie. If User1 input is 'scissors' and User2 input is 'paper' , User1 wins. If User1 input is 'scissors' and User2 input is 'rock' , User2 wins. If User1 input is ' scissors' and User2 input is 'scissors' , it's a tie. Can you think of a simpler way? Where are you going to clone this project to? What directory?","title":"Creation Time, 60-90 minutes"},{"location":"module-1/class-2/#additional-resources","text":"","title":"Additional Resources"},{"location":"module-1/class-2/#push-yourself-further","text":"What should the program return if the user inputs something that isn't \"rock\", \"paper\", or \"scissors\"? Can you use .trim() to solve the problem if a user types in a space with their input? Minimize redundancy: D.R.Y. up your code. Are their ways to not type as much as you've typed? Can you make the code smaller? Compartmentalize your code into individual functions. This game doesn't have to run just one function. Can you pull code blocks out and put them into other functions that can be called from rockPaperScissors ?","title":"Push Yourself Further"},{"location":"module-1/class-2/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-1/class-2/#blog-to-show-you-know","text":"Every other class will end with a discussion over these questions. If you have no idea about them, ask your instructor. Nevertheless, you will need to research the topics on your own and record what you learned in a blog. You will then turn in a link with the url of the published blog in Zollege. Feel free to copy/paste the question into google and read about what comes up. These interview questions are meant to broaden your knowledge and cover more ground than we can possibly get to in these few weeks. We want you to be well prepared for the rigors of interviewing for development jobs and knowing the answers to these questions will ensure that you have every tool you need to succeed! Blog Prompts","title":"Blog, to Show You Know"},{"location":"module-1/class-2/#exit-recap-attendance-and-reminders-5-mins","text":"Create RPS Assignment Create Blog Prompt - 201 Assignment Prepare for Class 3 by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-1/class-2/#student-feedback_1","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-1/class-3/","text":"Class 3: Pig Latin Trust yourself. You know more than you think you do.\u2003\u2014Benjamin Spock Greet, Outline, and Objectify Today we're going to: OBJECTIVE: Today students will practice to understand and internalize: building functions that take in arguments as parameters passing arguments into functions function scope and context fat arrow syntax for functions Questions for Student Led Discussion Interview Challenge Student Presentations Instructor Walk-through of entire app from package.json --> readline Creation Time - Pig Latin Push Yourself Further Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 minutes From What is Pig Latin on Wikipedia : Pig Latin is a language game in which words in English are altered, usually by adding a fabricated suffix or by moving the onset or initial consonant or consonant cluster of a word to the end of the word and adding a vocalic syllable to create such a suffix. For example, Wikipedia would become Ikipediaway (taking the 'W' and 'ay' to create a suffix). The objective is to conceal the words from others not familiar with the rules. The reference to Latin is a deliberate misnomer; Pig Latin is simply a form of argot or jargon unrelated to Latin, and the name is used for its English connotations as a strange and foreign-sounding language. It is most often used by young children as a fun way to confuse people unfamiliar with Pig Latin. 1 toPigLatin ( \"Pig Latin\" ) // => Igpay Atinlay Today you're going to build the logic for this fun little program. Demo - Pig Latin Translator Students will build the Pig Latin application using the Pig Latin Repo starter code . Why do we need to fork? Why do we need to run npm i ? The basic idea of Pig Latin is to take the first letters of a word up to the first vowel, move them to the end of the word, and add 'ay' to the end of it. Below we see a function called pigLatin that gets multiple words passed into it as arguments. The // ---> represents what the function will return with the given parameter. 1 2 3 4 pigLatin ( 'car' ) //=> 'arcay' pigLatin ( 'create' ) //=> 'eatecray' pigLatin ( 'pony' ) //=> 'onypay' pigLatin ( 'egg' ) //=> 'eggyay' Use a whiteboard to plan how Pig Latin works before building it with code. Additional Resources Video - Coding Pig Latin Push Yourself Further Compartmentalize your code into individual functions Minimize redundancy: D.R.Y. up your code. Write a unit test for words starting with multiple consonants: \"create\" Build the functionality for this complexity. Write a unit test for multiple words: \"Pig Latin\", \"Jurassic Park\" Build the functionality for this new complexity. Student Feedback Loading\u2026 Exit Recap, Attendance, and Reminders, 5 mins Create Pig Latin Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Class 3 Pig Latin"},{"location":"module-1/class-3/#class-3-pig-latin","text":"Trust yourself. You know more than you think you do.\u2003\u2014Benjamin Spock","title":"Class 3: Pig Latin"},{"location":"module-1/class-3/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE: Today students will practice to understand and internalize: building functions that take in arguments as parameters passing arguments into functions function scope and context fat arrow syntax for functions Questions for Student Led Discussion Interview Challenge Student Presentations Instructor Walk-through of entire app from package.json --> readline Creation Time - Pig Latin Push Yourself Further Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-1/class-3/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-1/class-3/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-1/class-3/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-1/class-3/#creation-time-60-90-minutes","text":"From What is Pig Latin on Wikipedia : Pig Latin is a language game in which words in English are altered, usually by adding a fabricated suffix or by moving the onset or initial consonant or consonant cluster of a word to the end of the word and adding a vocalic syllable to create such a suffix. For example, Wikipedia would become Ikipediaway (taking the 'W' and 'ay' to create a suffix). The objective is to conceal the words from others not familiar with the rules. The reference to Latin is a deliberate misnomer; Pig Latin is simply a form of argot or jargon unrelated to Latin, and the name is used for its English connotations as a strange and foreign-sounding language. It is most often used by young children as a fun way to confuse people unfamiliar with Pig Latin. 1 toPigLatin ( \"Pig Latin\" ) // => Igpay Atinlay Today you're going to build the logic for this fun little program. Demo - Pig Latin Translator Students will build the Pig Latin application using the Pig Latin Repo starter code . Why do we need to fork? Why do we need to run npm i ? The basic idea of Pig Latin is to take the first letters of a word up to the first vowel, move them to the end of the word, and add 'ay' to the end of it. Below we see a function called pigLatin that gets multiple words passed into it as arguments. The // ---> represents what the function will return with the given parameter. 1 2 3 4 pigLatin ( 'car' ) //=> 'arcay' pigLatin ( 'create' ) //=> 'eatecray' pigLatin ( 'pony' ) //=> 'onypay' pigLatin ( 'egg' ) //=> 'eggyay' Use a whiteboard to plan how Pig Latin works before building it with code.","title":"Creation Time, 60-90 minutes"},{"location":"module-1/class-3/#additional-resources","text":"Video - Coding Pig Latin","title":"Additional Resources"},{"location":"module-1/class-3/#push-yourself-further","text":"Compartmentalize your code into individual functions Minimize redundancy: D.R.Y. up your code. Write a unit test for words starting with multiple consonants: \"create\" Build the functionality for this complexity. Write a unit test for multiple words: \"Pig Latin\", \"Jurassic Park\" Build the functionality for this new complexity.","title":"Push Yourself Further"},{"location":"module-1/class-3/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-1/class-3/#exit-recap-attendance-and-reminders-5-mins","text":"Create Pig Latin Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-1/class-4/","text":"Class 4: Tic Tac Toe Greet, Outline, and Objectify Don't let the success of others discourage you. Let it inspire you. Today we're going to: OBJECTIVE - Today students will practice to understand and internalize: Unit testing as it relates to development. Looping over arrays. Conditional statements in conjunction with loops. Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time - Tic Tac Toe Unit Test Overview Build TTT Push Yourself Further - Build GUI for TTT Blog to Show You Know Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 minutes Part 1: Unit Tests Open your RPS folder. git push your latest changes git checkout -b unit-test-practice to create a new branch to safely work within. Use the examples below to build additional tests for your application to pass: What if a user adds a space before or after their input? What if the user hit ENTER before typing in an input? Brainstorm with your classmates to test for even more edge cases . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 if ( typeof describe === 'function' ) { describe ( '#rockPaperScissors()' , () => { it ( 'should detect a tie' , () => { assert . equal ( rockPaperScissors ( 'rock' , 'rock' ), \"It's a tie!\" ); assert . equal ( rockPaperScissors ( 'paper' , 'paper' ), \"It's a tie!\" ); assert . equal ( rockPaperScissors ( 'scissors' , 'scissors' ), \"It's a tie!\" ); }); it ( 'should detect which hand won' , () => { assert . equal ( rockPaperScissors ( 'rock' , 'paper' ), \"Hand two wins!\" ); assert . equal ( rockPaperScissors ( 'paper' , 'scissors' ), \"Hand two wins!\" ); assert . equal ( rockPaperScissors ( 'rock' , 'scissors' ), \"Hand one wins!\" ); }); it ( 'should scrub input to ensure lowercase with \"trim\"ed whitepace' , () => { assert . equal ( rockPaperScissors ( 'rOcK' , ' paper ' ), \"Hand two wins!\" ); assert . equal ( rockPaperScissors ( 'Paper' , 'SCISSORS' ), \"Hand two wins!\" ); assert . equal ( rockPaperScissors ( 'rock ' , 'sCiSsOrs' ), \"Hand one wins!\" ); }); }); } else { getPrompt (); } Part 2: Build TTT Fork and clone Tic Tac Toe Repo Read the README.md and the comments in main.js Figure out the process of playing tic tac toe using a whiteboard. Run the tests, run the program. What is happening in its current state? What are the steps the computer will need to do to complete the task of placing a mark? What about changing between \"X\" and \"O\"? How does it determine a win? Translate your ideas into pseudo code. Translate your pseudo code into real JavaScript code. Push Yourself Further Connect this Tic Tac Toe logic to your TTT-GUI from Web 101 . Student Feedback Loading\u2026 Blogs to Show You Know Every other class will end with a discussion over these questions. If you have no idea about them, ask your instructor. Nevertheless, you will need to research the topics on your own and record what you learned in a blog. You will then turn in a link with the url of the published blog in Zollege. Feel free to copy/paste the question into google and read about what comes up. These interview questions are meant to broaden your knowledge and cover more ground than we can possibly get to in these few weeks. We want you to be well prepared for the rigors of interviewing for development jobs and knowing the answers to these questions will ensure that you have every tool you need to succeed! Blog Prompts Exit Recap, Attendance, and Reminders, 5 mins Create TicTacToe Assignment Create 202 Blog Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Class 4 TicTacToe"},{"location":"module-1/class-4/#class-4-tic-tac-toe","text":"","title":"Class 4: Tic Tac Toe"},{"location":"module-1/class-4/#greet-outline-and-objectify","text":"Don't let the success of others discourage you. Let it inspire you. Today we're going to: OBJECTIVE - Today students will practice to understand and internalize: Unit testing as it relates to development. Looping over arrays. Conditional statements in conjunction with loops. Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time - Tic Tac Toe Unit Test Overview Build TTT Push Yourself Further - Build GUI for TTT Blog to Show You Know Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-1/class-4/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-1/class-4/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-1/class-4/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-1/class-4/#creation-time-60-90-minutes","text":"","title":"Creation Time, 60-90 minutes"},{"location":"module-1/class-4/#part-1-unit-tests","text":"Open your RPS folder. git push your latest changes git checkout -b unit-test-practice to create a new branch to safely work within. Use the examples below to build additional tests for your application to pass: What if a user adds a space before or after their input? What if the user hit ENTER before typing in an input? Brainstorm with your classmates to test for even more edge cases . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 if ( typeof describe === 'function' ) { describe ( '#rockPaperScissors()' , () => { it ( 'should detect a tie' , () => { assert . equal ( rockPaperScissors ( 'rock' , 'rock' ), \"It's a tie!\" ); assert . equal ( rockPaperScissors ( 'paper' , 'paper' ), \"It's a tie!\" ); assert . equal ( rockPaperScissors ( 'scissors' , 'scissors' ), \"It's a tie!\" ); }); it ( 'should detect which hand won' , () => { assert . equal ( rockPaperScissors ( 'rock' , 'paper' ), \"Hand two wins!\" ); assert . equal ( rockPaperScissors ( 'paper' , 'scissors' ), \"Hand two wins!\" ); assert . equal ( rockPaperScissors ( 'rock' , 'scissors' ), \"Hand one wins!\" ); }); it ( 'should scrub input to ensure lowercase with \"trim\"ed whitepace' , () => { assert . equal ( rockPaperScissors ( 'rOcK' , ' paper ' ), \"Hand two wins!\" ); assert . equal ( rockPaperScissors ( 'Paper' , 'SCISSORS' ), \"Hand two wins!\" ); assert . equal ( rockPaperScissors ( 'rock ' , 'sCiSsOrs' ), \"Hand one wins!\" ); }); }); } else { getPrompt (); }","title":"Part 1: Unit Tests"},{"location":"module-1/class-4/#part-2-build-ttt","text":"Fork and clone Tic Tac Toe Repo Read the README.md and the comments in main.js Figure out the process of playing tic tac toe using a whiteboard. Run the tests, run the program. What is happening in its current state? What are the steps the computer will need to do to complete the task of placing a mark? What about changing between \"X\" and \"O\"? How does it determine a win? Translate your ideas into pseudo code. Translate your pseudo code into real JavaScript code.","title":"Part 2: Build TTT"},{"location":"module-1/class-4/#push-yourself-further","text":"Connect this Tic Tac Toe logic to your TTT-GUI from Web 101 .","title":"Push Yourself Further"},{"location":"module-1/class-4/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-1/class-4/#blogs-to-show-you-know","text":"Every other class will end with a discussion over these questions. If you have no idea about them, ask your instructor. Nevertheless, you will need to research the topics on your own and record what you learned in a blog. You will then turn in a link with the url of the published blog in Zollege. Feel free to copy/paste the question into google and read about what comes up. These interview questions are meant to broaden your knowledge and cover more ground than we can possibly get to in these few weeks. We want you to be well prepared for the rigors of interviewing for development jobs and knowing the answers to these questions will ensure that you have every tool you need to succeed! Blog Prompts","title":"Blogs to Show You Know"},{"location":"module-1/class-4/#exit-recap-attendance-and-reminders-5-mins","text":"Create TicTacToe Assignment Create 202 Blog Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-1/conditionals/","text":"Conditional Statements Acknowledging the good that you already have in your life is the foundation for all abundance.\u2003\u2014Eckhart Tolle Function Signatures Review Intro to Conditionals Why Conditionals Just like we saw in our pre-work, we can compare data and return the results. Using conditionals within functions we can return or do something entirely different based on the results of the comparison. Check it out! If we asked our friend Dave to check on two buckets that are catching water from a leaky roof: \"Dave, could you check bucket \"x\" and \"y\"? If \"x\" is more full dump it out, else, dump out \"y\" and tell me how much is in each bucket afterwards. Translated into JavaScript it would look like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 const bucketX = 18 const bucketY = 20 // declare a function that takes in two parameters (buckets of water) const checkWater = ( x , y ) => { // compare the two values if ( x > y ) { // if x is greater, set x to equal 0 x = 0 } else { // else, if y is greater, set y to equal 0 y = 0 } // return the values to us. return \"the value of x is: \" + x + \" and the value of y is: \" + y } // invoke the function and pass the two arguments checkWater ( bucketX , bucketY ) RUN IT! Copy/paste this code in a new Repl.it and play with it for yourself! How Conditionals To use conditionals, we simply put them into a conditional statement like an if/else statement that asks \"Is this comparison true or false ?\". Example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 if ( 6 === 6 ) { return \"yes six equals six.\" } else { return \"Nope, those are not equal.\" } // if we ran the code block we would get a return of \"yes six equals six.\" because, of course, 6 does equal 6. if ( 6 === 7 ) { return \"yes six equals six.\" } else { return \"Nope, those are not equal.\" } // But if we ran this code block we would get: \"Nope, those are not equal.\" You see, an if/else statement asks if a condition is true and, if so, do the first thing, else do the second thing. More Conditional Demos An if/else statement will run a block of code if what we evaluate in the evaluation parentheses evaluates to truthy; else do what's in the else statement. Below we see the double-pipes to see if either of the operands is truthy. Literally: is input1 or input2 truthy? 1 2 3 4 5 6 7 8 const input1 = 88 ; // truthy const input2 = 0 ; // falsey if ( input1 || input2 ) { return true } else { return false } // return true And here we see that we can use the double-ampersand to ask if BOTH input1 and input2 are truthy. 1 2 3 4 5 6 7 8 const input1 = 'hello' ; // truthy const input2 = null ; // falsey if ( input1 && input2 ) { return true } else { return false } // returns false Let's use our typeof operator: The if statement performs a specified operation if the condition you provide is \"truthy\" . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 const name = 'jerry' ; const number = 10 if ( typeof name === string ) { console . log ( ` ${ name } is a string.` ); } else { return false } // will return false if ( typeof name === number ) { console . log ( ` ${ name } is a string.` ); } else { return false } Above we see the use of template literals as in: ${name} is a string . This is just a simple way to add values of constants with strings like: \"is a string.\" We could use concatenation like this: name + \" is a string\" , but it's much easier to use template literals. For now, you can do whichever is easier for you. If the condition is \"falsey\" , an alternative operation can be specified with an optional else clause . 1 2 3 4 5 6 7 const name = 'elaine' ; if ( typeof name === string ) { console . log ( `The type of 'name' - ${ name } - is a string.` ); } else { console . log ( `'name' is not a string - it is a ${ typeof name } ` ); } Multiple else statements : You can also provide one or more alternatives that perform conditional evaluations using else if : 1 2 3 4 5 6 7 8 9 10 // this is a handy way to get a random whole number const number = parseInt ( Math . random () * 100 , 10 ); if ( number < 10 ) { console . log ( `The 'number' - ${ number } - is less than 10.` ); } else if ( number > 11 && number < 20 ) { console . log ( `The 'number' - ${ number } - is less than 20, but greater than 11.` ); } else { console . log ( `The 'number' - ${ number } - is greater than 20, but less than 100.` ); } Above we see the use of parseInt() which is a built-in method in JS we can use whenever we need a whole number. We also see Math and .random() which generates a random decimal number. Go to the MDN docs on parseInt() and Math.random() and explain the following: Why do you think we multiply it by 100? Can you explain why number is always going to be less than 100? Also, what does the 10 being passed to parseInt do? Alternatives to Conditional Statements Switch Statement (optional alternative to if/else) Switch statements can sometimes be used to more concisely express conditional operations. A switch statement is used if you are only evaluating the value of one constant. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 const numbers = [ 1 , 2 , 3 , 4 , 5 ]; const randomIndex = parseInt (( Math . random () * 10 / 2 ), 10 ); const randomNumber = numbers [ randomIndex ]; switch ( randomNumber ) { case 1 : console . log ( `The value at randomIndex ${ randomIndex } is 1: ${ randomNumber } ` ); break ; case 2 : console . log ( `The value at randomIndex ${ randomIndex } is 2: ${ randomNumber } ` ); break ; case 3 : console . log ( `The value at randomIndex ${ randomIndex } is 3: ${ randomNumber } ` ); break ; default : // Statements executed when none of the cases match the switch expression console . log ( `The value at randomIndex ${ randomIndex } is 4 or more: ${ randomNumber } ` ) break ; } Ternary (another alternative to if/else) Ternary Operators ? / : can be used as a shorthand for if / else statements: 1 2 3 4 5 6 7 const randomNumber = parseInt ( Math . random () * 10 , 10 ); const isEvenOrOdd = ( number ) => { return number % 2 === 0 ? `even: ${ number } ` : `odd: ${ number } ` } isEvenOrOdd ( randomNumber ) They look a little strange at first, but it helps to think of the entire expression as an oddly-punctuated question-and-answer: 1 2 3 4 5 6 7 8 // is the remainder of 'evenOrOdd' \u00f7 2 equal to Zero ? <--- `if` return number % 2 === 0 // if so, return 'even:' along with the value : <--- `then return` ? `even: ${ number } ` // otherwise, return 'odd:' along with the value. <--- `else return` : `odd: ${ number } ` Note that the placement of the operators ? / : at the beginning or end of the line doesn't affect the validity of the expression\u2014either way, it will be executed. For that matter, you can write it all on the same line. However, for the sake of readability, it is recommended that you break the operations onto separate lines, with the operators at the beginning of each separate line : 1 2 3 4 5 6 7 8 9 const randomNumber = parseInt ( Math . random () * 10 , 10 ); const isEvenOrOdd = ( number ) => { return number % 2 === 0 ? `even: ${ number } ` : `odd: ${ number } ` } isEvenOrOdd ( randomNumber ) Formatted like so, it is easy to quickly scan your eyes along the left side of the code and see a ternary expression . This might sound frivolous and nitpicky, but bear in mind that one stylistic downside of using ternary expressions is readability (or lack thereof). They might be more elegant than if / else statements, but they're not always as recognizable at a glance. So use discretion when using them. Practice It - Conditionals For each of the following, create a new Repl.it called the title you see in bold and also name the function the same as the title. Then copy/paste the prompt at the top with the \"//\" so you'll have the challenge right there for you to reference. //sumOfTwoNums - write a function that returns the sum of two numbers if both arguments are numbers. //bothTrue - write a function that returns 'both are true' if both arguments are true. //checkStrings - write a function that takes 3 parameters and if all 3 parameters are strings, return true //evaluateMonth - write a switch statement that evaluates a variable month, and for each of the 12 months, returns the number of days in that month. 1 2 3 4 5 6 7 8 9 10 11 // starter code const evaluateMonth = ( month ) => { switch ( month ) { case 'day' : case 'Jan' : { return 31 } default : return '45' } } Know Your Docs MDN Docs - Conditional Statements","title":"Conditionals"},{"location":"module-1/conditionals/#conditional-statements","text":"Acknowledging the good that you already have in your life is the foundation for all abundance.\u2003\u2014Eckhart Tolle","title":"Conditional Statements"},{"location":"module-1/conditionals/#function-signatures-review","text":"","title":"Function Signatures Review"},{"location":"module-1/conditionals/#intro-to-conditionals","text":"","title":"Intro to Conditionals"},{"location":"module-1/conditionals/#why-conditionals","text":"Just like we saw in our pre-work, we can compare data and return the results. Using conditionals within functions we can return or do something entirely different based on the results of the comparison. Check it out! If we asked our friend Dave to check on two buckets that are catching water from a leaky roof: \"Dave, could you check bucket \"x\" and \"y\"? If \"x\" is more full dump it out, else, dump out \"y\" and tell me how much is in each bucket afterwards. Translated into JavaScript it would look like this: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 const bucketX = 18 const bucketY = 20 // declare a function that takes in two parameters (buckets of water) const checkWater = ( x , y ) => { // compare the two values if ( x > y ) { // if x is greater, set x to equal 0 x = 0 } else { // else, if y is greater, set y to equal 0 y = 0 } // return the values to us. return \"the value of x is: \" + x + \" and the value of y is: \" + y } // invoke the function and pass the two arguments checkWater ( bucketX , bucketY ) RUN IT! Copy/paste this code in a new Repl.it and play with it for yourself!","title":"Why Conditionals"},{"location":"module-1/conditionals/#how-conditionals","text":"To use conditionals, we simply put them into a conditional statement like an if/else statement that asks \"Is this comparison true or false ?\". Example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 if ( 6 === 6 ) { return \"yes six equals six.\" } else { return \"Nope, those are not equal.\" } // if we ran the code block we would get a return of \"yes six equals six.\" because, of course, 6 does equal 6. if ( 6 === 7 ) { return \"yes six equals six.\" } else { return \"Nope, those are not equal.\" } // But if we ran this code block we would get: \"Nope, those are not equal.\" You see, an if/else statement asks if a condition is true and, if so, do the first thing, else do the second thing.","title":"How Conditionals"},{"location":"module-1/conditionals/#more-conditional-demos","text":"An if/else statement will run a block of code if what we evaluate in the evaluation parentheses evaluates to truthy; else do what's in the else statement. Below we see the double-pipes to see if either of the operands is truthy. Literally: is input1 or input2 truthy? 1 2 3 4 5 6 7 8 const input1 = 88 ; // truthy const input2 = 0 ; // falsey if ( input1 || input2 ) { return true } else { return false } // return true And here we see that we can use the double-ampersand to ask if BOTH input1 and input2 are truthy. 1 2 3 4 5 6 7 8 const input1 = 'hello' ; // truthy const input2 = null ; // falsey if ( input1 && input2 ) { return true } else { return false } // returns false Let's use our typeof operator: The if statement performs a specified operation if the condition you provide is \"truthy\" . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 const name = 'jerry' ; const number = 10 if ( typeof name === string ) { console . log ( ` ${ name } is a string.` ); } else { return false } // will return false if ( typeof name === number ) { console . log ( ` ${ name } is a string.` ); } else { return false } Above we see the use of template literals as in: ${name} is a string . This is just a simple way to add values of constants with strings like: \"is a string.\" We could use concatenation like this: name + \" is a string\" , but it's much easier to use template literals. For now, you can do whichever is easier for you. If the condition is \"falsey\" , an alternative operation can be specified with an optional else clause . 1 2 3 4 5 6 7 const name = 'elaine' ; if ( typeof name === string ) { console . log ( `The type of 'name' - ${ name } - is a string.` ); } else { console . log ( `'name' is not a string - it is a ${ typeof name } ` ); } Multiple else statements : You can also provide one or more alternatives that perform conditional evaluations using else if : 1 2 3 4 5 6 7 8 9 10 // this is a handy way to get a random whole number const number = parseInt ( Math . random () * 100 , 10 ); if ( number < 10 ) { console . log ( `The 'number' - ${ number } - is less than 10.` ); } else if ( number > 11 && number < 20 ) { console . log ( `The 'number' - ${ number } - is less than 20, but greater than 11.` ); } else { console . log ( `The 'number' - ${ number } - is greater than 20, but less than 100.` ); } Above we see the use of parseInt() which is a built-in method in JS we can use whenever we need a whole number. We also see Math and .random() which generates a random decimal number. Go to the MDN docs on parseInt() and Math.random() and explain the following: Why do you think we multiply it by 100? Can you explain why number is always going to be less than 100? Also, what does the 10 being passed to parseInt do?","title":"More Conditional Demos"},{"location":"module-1/conditionals/#alternatives-to-conditional-statements","text":"","title":"Alternatives to Conditional Statements"},{"location":"module-1/conditionals/#switch-statement-optional-alternative-to-ifelse","text":"Switch statements can sometimes be used to more concisely express conditional operations. A switch statement is used if you are only evaluating the value of one constant. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 const numbers = [ 1 , 2 , 3 , 4 , 5 ]; const randomIndex = parseInt (( Math . random () * 10 / 2 ), 10 ); const randomNumber = numbers [ randomIndex ]; switch ( randomNumber ) { case 1 : console . log ( `The value at randomIndex ${ randomIndex } is 1: ${ randomNumber } ` ); break ; case 2 : console . log ( `The value at randomIndex ${ randomIndex } is 2: ${ randomNumber } ` ); break ; case 3 : console . log ( `The value at randomIndex ${ randomIndex } is 3: ${ randomNumber } ` ); break ; default : // Statements executed when none of the cases match the switch expression console . log ( `The value at randomIndex ${ randomIndex } is 4 or more: ${ randomNumber } ` ) break ; }","title":"Switch Statement (optional alternative to if/else)"},{"location":"module-1/conditionals/#ternary-another-alternative-to-ifelse","text":"Ternary Operators ? / : can be used as a shorthand for if / else statements: 1 2 3 4 5 6 7 const randomNumber = parseInt ( Math . random () * 10 , 10 ); const isEvenOrOdd = ( number ) => { return number % 2 === 0 ? `even: ${ number } ` : `odd: ${ number } ` } isEvenOrOdd ( randomNumber ) They look a little strange at first, but it helps to think of the entire expression as an oddly-punctuated question-and-answer: 1 2 3 4 5 6 7 8 // is the remainder of 'evenOrOdd' \u00f7 2 equal to Zero ? <--- `if` return number % 2 === 0 // if so, return 'even:' along with the value : <--- `then return` ? `even: ${ number } ` // otherwise, return 'odd:' along with the value. <--- `else return` : `odd: ${ number } ` Note that the placement of the operators ? / : at the beginning or end of the line doesn't affect the validity of the expression\u2014either way, it will be executed. For that matter, you can write it all on the same line. However, for the sake of readability, it is recommended that you break the operations onto separate lines, with the operators at the beginning of each separate line : 1 2 3 4 5 6 7 8 9 const randomNumber = parseInt ( Math . random () * 10 , 10 ); const isEvenOrOdd = ( number ) => { return number % 2 === 0 ? `even: ${ number } ` : `odd: ${ number } ` } isEvenOrOdd ( randomNumber ) Formatted like so, it is easy to quickly scan your eyes along the left side of the code and see a ternary expression . This might sound frivolous and nitpicky, but bear in mind that one stylistic downside of using ternary expressions is readability (or lack thereof). They might be more elegant than if / else statements, but they're not always as recognizable at a glance. So use discretion when using them.","title":"Ternary (another alternative to if/else)"},{"location":"module-1/conditionals/#practice-it-conditionals","text":"For each of the following, create a new Repl.it called the title you see in bold and also name the function the same as the title. Then copy/paste the prompt at the top with the \"//\" so you'll have the challenge right there for you to reference. //sumOfTwoNums - write a function that returns the sum of two numbers if both arguments are numbers. //bothTrue - write a function that returns 'both are true' if both arguments are true. //checkStrings - write a function that takes 3 parameters and if all 3 parameters are strings, return true //evaluateMonth - write a switch statement that evaluates a variable month, and for each of the 12 months, returns the number of days in that month. 1 2 3 4 5 6 7 8 9 10 11 // starter code const evaluateMonth = ( month ) => { switch ( month ) { case 'day' : case 'Jan' : { return 31 } default : return '45' } }","title":"Practice It - Conditionals"},{"location":"module-1/conditionals/#know-your-docs","text":"MDN Docs - Conditional Statements","title":"Know Your Docs"},{"location":"module-1/developSeries-NotWeak/","text":"Its NOT O.K. to Be WEAK - Jordan Peterson","title":"Develop-Not Weak"},{"location":"module-1/developSeries-NotWeak/#its-not-ok-to-be-weak-jordan-peterson","text":"","title":"Its NOT O.K. to Be WEAK - Jordan Peterson"},{"location":"module-1/developSeries-PrisonOfYourMind/","text":"The Prison of Your Mind | Sean Stephenson | TEDxIronwoodStatePrison","title":"Develop - Your Prison"},{"location":"module-1/developSeries-PrisonOfYourMind/#the-prison-of-your-mind-sean-stephenson-tedxironwoodstateprison","text":"","title":"The Prison of Your Mind | Sean Stephenson | TEDxIronwoodStatePrison"},{"location":"module-1/developSeries-SpeakingIsEasy/","text":"Speaking Is Easy","title":"Develop - Speaking"},{"location":"module-1/developSeries-SpeakingIsEasy/#speaking-is-easy","text":"","title":"Speaking Is Easy"},{"location":"module-1/js-loops/","text":"Loops in JS Whatever the mind can conceive and believe, it can achieve \u2015Napoleon Hill Overview Looping over strings, objects, and arrays is a very common task performed by developers every day. It is your job to understand why, how, and when to do it . Today we'll cover how and when to use loops. As to the why, think about the list of tweets you might have tweeted in the past year. Somewhere in one of Twitter's databases there is an array of all of the tweets you've ever sent. When you or someone else requests to look at your tweets your array of tweets is passed through a function. This function loops over each of your tweets and returns them to your phone in the form of a well designed visual: But really the data storage of Oprah's tweets might look like this: 1 2 3 4 5 6 7 { \"username\" : \"oprah\" , \"tweets\" : [ { \"id\" : 456902121573453824 , \"chars\" : 71 , \"createdOn\" : 9 / 22 / 13 , \"text\" : \"HI TWITTERS . THANK YOU FOR A WARM WELCOME. FEELING VERY 21st CENTURY .\" }, { \"id\" : 616902427573483009 , \"chars\" : 80 , \"createdOn\" : 11 / 18 / 12 , \"text\" : \"Gotta say love that SURFACE! Have bought 12 for Christmas gifts. #FavoriteThings\" }, { \"id\" : 723904526771785431 , \"chars\" : 65 , \"createdOn\" : 9 / 22 / 13 , \"text\" : \"You cannot be vulnerable with people you do not trust. #Lifeclass\" } ] } To build a function that would return the specific tweet or all of the tweets we would need to loop over the array of tweets on the oprah object. It is for this reason that you should learn every array method there is and get good at looping through arrays. Many developer problems are solved this way! The Loops of JavaScript Loops are a way to repeat, or iterate , over a JavaScript thing and perform a certain block of code over and over until the stop condition is met. We can think of this as giving directions for someone to navigate to our house: From I-35 North, exit Berger Rd, Turn right, Drive 5.2 miles and look right for the red fence. The Drive for 5.2 miles is the action statement of the loop. It says, continue driving until the stop condition : 5.2 miles, is met . Obviously this is only a metaphor and we'll have to visualize how loops work in coding, so let's get to that. The common loops we use as web developers are, listed from most often used to least often used: for - loops through a block of code a specific number of times for/of - loops through the values of an iterable object like an array. for/in - loops through the properties of an object or indexes of an array. while - loops through a block of code while a specified condition is true do/while - also loops through a block of code while a specified condition is true When deciding what loop to use, ask yourself: What is the stop condition (what makes the loop end)? BEWARE the INFINITE LOOP An Infinite Loop is a loop without a stop condition!! This should be avoided at all costs. But this is something you'll just have to learn on your own. This will crash the browser or the JavaScript program that you are in. For Loops For loops are most commonly used to iterate over arrays and strings. The stop condition is usually the length of the array. A for loop repeats until a specified condition evaluates to false. 1 2 3 4 // this is pseudo-code just to help you visualize & learn the syntax of the for loop for ([ initial expression ]; [ stop condition ]; [ increment expression ]){ action statement } In the example below, we use a for loop to print out numbers from 1 - 10. 1 2 3 4 5 6 7 8 9 10 11 12 13 // let's put the for loop inside a function so we can call it when we want instead of just when the program is run. const countUpToTen = () => { for ( let i = 1 ; i <= 10 ; i ++ ) { console . log ( i ); } } countUpToTen () // Your turn! // * Create a for loop that prints out every multiple of 3 up to 100. Paste the code above into a Repl.it and try it yourself. Let's focus on the first line: for (let i = 1; i <= 10; i++) . for() looks just like a function invocation. And it is. We pass into it the following argument: let i = 1; is the initial expression . It states that the iterator, i, will start at 1. i <= 10; is the stop condition . It states that the loop will stop when the iterator reaches 10 or more. i++ is the increment expression . It increases the iterator by 1 each time the loop runs through. NOTE: We could also decrease by one with i--, increase or decrease by two: i+=2, i-=2, or whatever the problem might need. In the second line: { console.log(i); } { } is the action statement . Whatever is inside these curly braces will be performed once every time the loop is run until the stop condition is met. console.log(i) will log to the console the current value of i. These fundaments are the same in all loops but you'll see that the syntax changes just a little with each. The Other For Loops - For/In and For/Of These two loops are similar but there is a very distinct difference between them! The for/in loop returns the keys or indexes of the thing it's iterating over. The for/of loop returns the value at the current index or key of the thing it's iterating over. For/In loop This loop is used to iterate over object-literals which have key-value pairs. In the code snippet below we see that the object, person, is passed into the function loopOverObject . Then we set two variables that we expect to change: let text = \"\"; and let x; . 1 2 3 4 5 6 7 8 9 10 11 12 13 const person = { firstName : \"Peter\" , lastName : \"Wisser\" , age : 25 }; const loopOverObject = ( obj ) => { let text = \"\" ; let x ; for ( x in obj ) { text += obj [ x ] + \" \" ; } return text } loopOverObject ( person ) When we invoke the function, the for/in loop will iterate over the person object using the x variable as a placeholder for each of the keys in the object: firstName , lastName , then age . It's like saying, \"for however many keys are in the object, use x to describe each one as we loop over the object.\" Then we see: text += obj[x] + \" \"; which says the variable text now equals whatever it was plus the value of the current key, x, and then add a space, \" \" , just for readability. After the loop is over return the things we added to the text variables. For/Of Loops The for/of loop works the same way as the for/in loop but instead of objects, it's used on arrays. 1 2 3 4 5 6 7 8 9 10 11 12 13 const writers = [ \"Dickinson\" , \"Steinbeck\" , \"Huxley\" ] const loopOverArray = ( arr ) => { let text = \"I love to read \" ; let author ; for ( author of arr ) { text += author + \" and... \" ; } return text } loopOverArray ( writers ) This loop and the for loop are the most common loops you'll be using throughout your career and this course. The Do...While Loop While and do/while loops are used to perform a block of code over and over until a certain condition evaluates to true. For front-end development, it is fairly rare that a while or do while loop would be the best option but, for the sake of thoroughness... A do/while loop repeats something until the condition is evaluated as false. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // again, pseudo-code here so you can see it more clearly. do { action statement } while ( stop condition ); // Check out what's going on below: const celebrateBirthday = () => { let age = 0 ; do { age += 1 ; console . log ( \"Happy Birthday!! Today you are \" + age + \" year old!\" ); } while ( age < 20 ); } celebrateBirthday () Copy/paste the code above into a Repl.it and let's quickly break this down: let age = 0; - create a variable that's expected to change and set it to 0 do { } - create an action statement age += 1; - each time the loop runs add 1 to the age variable console.log(\"blah blah blah\") - you know what this does while (age < 20) - establish a stop condition: when age is equal to or greater than 20 stop doing the action statement and break out of the loop. The While Loop 1 2 3 while ( condition ) { action statement } Explore the example below: 1 2 3 4 5 6 7 8 9 const logGrade = () => { let grade = 0 ; while ( grade < 70 ) { grade += 10 ; console . log ( \"You have a \" + grade + \" in this class and cannot move on to the next class until your grade is higher than a 70.\" ); } } logGrade () Throw this code into a Repl.it and work through it on your own. Your ability to read code is what's going to get you to go far!! Practice It Loops 1 Copy/paste this code into a new Repl.it Then follow the instructions in the comments. 1 2 3 4 5 6 7 8 9 10 11 12 const users = { 232 : 'renee' , 5656 : 'mark' , 5546 : 'devin' , 3353 : 'grace' , 4894 : 'michael' , 6644 : 'becca' } // * Write a for/of loop that console logs each of the user names in the users object // * Write a for/in loop that console logs each of the keys in the users object Loops 2 Copy/paste this code into a new Repl.it Then follow the instructions in the comments. 1 2 3 4 5 6 7 8 9 10 11 12 13 // * Create an object with keys and values called \"person\" with the following data: // firstName: \u201cJane\u201d // lastName: \u201cDoe\u201d // birthDate: \u201cJan 5, 1925\u201d // gender: \u201cfemale\u201d // * Use a for/in loop to console.log each key. // * Create an array of 5 objects that have the same structure as \"person\" with the same keys but with different values. // * Write a for/of loop inside a for/in loop that logs each of the values for all 5 persons // * Then use a for/of loop and if statement to console.log only the objects with the keys: firstName and birthDate. Know Your Docs MDN Docs - While MDN Docs - Break MDN Docs - For...In MDN Docs - For...Of MDN Docs - Do...While Additional Resources Video - JS For Loops","title":"Loops in JS"},{"location":"module-1/js-loops/#loops-in-js","text":"Whatever the mind can conceive and believe, it can achieve \u2015Napoleon Hill","title":"Loops in JS"},{"location":"module-1/js-loops/#overview","text":"Looping over strings, objects, and arrays is a very common task performed by developers every day. It is your job to understand why, how, and when to do it . Today we'll cover how and when to use loops. As to the why, think about the list of tweets you might have tweeted in the past year. Somewhere in one of Twitter's databases there is an array of all of the tweets you've ever sent. When you or someone else requests to look at your tweets your array of tweets is passed through a function. This function loops over each of your tweets and returns them to your phone in the form of a well designed visual: But really the data storage of Oprah's tweets might look like this: 1 2 3 4 5 6 7 { \"username\" : \"oprah\" , \"tweets\" : [ { \"id\" : 456902121573453824 , \"chars\" : 71 , \"createdOn\" : 9 / 22 / 13 , \"text\" : \"HI TWITTERS . THANK YOU FOR A WARM WELCOME. FEELING VERY 21st CENTURY .\" }, { \"id\" : 616902427573483009 , \"chars\" : 80 , \"createdOn\" : 11 / 18 / 12 , \"text\" : \"Gotta say love that SURFACE! Have bought 12 for Christmas gifts. #FavoriteThings\" }, { \"id\" : 723904526771785431 , \"chars\" : 65 , \"createdOn\" : 9 / 22 / 13 , \"text\" : \"You cannot be vulnerable with people you do not trust. #Lifeclass\" } ] } To build a function that would return the specific tweet or all of the tweets we would need to loop over the array of tweets on the oprah object. It is for this reason that you should learn every array method there is and get good at looping through arrays. Many developer problems are solved this way!","title":"Overview"},{"location":"module-1/js-loops/#the-loops-of-javascript","text":"Loops are a way to repeat, or iterate , over a JavaScript thing and perform a certain block of code over and over until the stop condition is met. We can think of this as giving directions for someone to navigate to our house: From I-35 North, exit Berger Rd, Turn right, Drive 5.2 miles and look right for the red fence. The Drive for 5.2 miles is the action statement of the loop. It says, continue driving until the stop condition : 5.2 miles, is met . Obviously this is only a metaphor and we'll have to visualize how loops work in coding, so let's get to that. The common loops we use as web developers are, listed from most often used to least often used: for - loops through a block of code a specific number of times for/of - loops through the values of an iterable object like an array. for/in - loops through the properties of an object or indexes of an array. while - loops through a block of code while a specified condition is true do/while - also loops through a block of code while a specified condition is true When deciding what loop to use, ask yourself: What is the stop condition (what makes the loop end)? BEWARE the INFINITE LOOP An Infinite Loop is a loop without a stop condition!! This should be avoided at all costs. But this is something you'll just have to learn on your own. This will crash the browser or the JavaScript program that you are in.","title":"The Loops of JavaScript"},{"location":"module-1/js-loops/#for-loops","text":"For loops are most commonly used to iterate over arrays and strings. The stop condition is usually the length of the array. A for loop repeats until a specified condition evaluates to false. 1 2 3 4 // this is pseudo-code just to help you visualize & learn the syntax of the for loop for ([ initial expression ]; [ stop condition ]; [ increment expression ]){ action statement } In the example below, we use a for loop to print out numbers from 1 - 10. 1 2 3 4 5 6 7 8 9 10 11 12 13 // let's put the for loop inside a function so we can call it when we want instead of just when the program is run. const countUpToTen = () => { for ( let i = 1 ; i <= 10 ; i ++ ) { console . log ( i ); } } countUpToTen () // Your turn! // * Create a for loop that prints out every multiple of 3 up to 100. Paste the code above into a Repl.it and try it yourself. Let's focus on the first line: for (let i = 1; i <= 10; i++) . for() looks just like a function invocation. And it is. We pass into it the following argument: let i = 1; is the initial expression . It states that the iterator, i, will start at 1. i <= 10; is the stop condition . It states that the loop will stop when the iterator reaches 10 or more. i++ is the increment expression . It increases the iterator by 1 each time the loop runs through. NOTE: We could also decrease by one with i--, increase or decrease by two: i+=2, i-=2, or whatever the problem might need. In the second line: { console.log(i); } { } is the action statement . Whatever is inside these curly braces will be performed once every time the loop is run until the stop condition is met. console.log(i) will log to the console the current value of i. These fundaments are the same in all loops but you'll see that the syntax changes just a little with each.","title":"For Loops"},{"location":"module-1/js-loops/#the-other-for-loops-forin-and-forof","text":"These two loops are similar but there is a very distinct difference between them! The for/in loop returns the keys or indexes of the thing it's iterating over. The for/of loop returns the value at the current index or key of the thing it's iterating over.","title":"The Other For Loops - For/In and For/Of"},{"location":"module-1/js-loops/#forin-loop","text":"This loop is used to iterate over object-literals which have key-value pairs. In the code snippet below we see that the object, person, is passed into the function loopOverObject . Then we set two variables that we expect to change: let text = \"\"; and let x; . 1 2 3 4 5 6 7 8 9 10 11 12 13 const person = { firstName : \"Peter\" , lastName : \"Wisser\" , age : 25 }; const loopOverObject = ( obj ) => { let text = \"\" ; let x ; for ( x in obj ) { text += obj [ x ] + \" \" ; } return text } loopOverObject ( person ) When we invoke the function, the for/in loop will iterate over the person object using the x variable as a placeholder for each of the keys in the object: firstName , lastName , then age . It's like saying, \"for however many keys are in the object, use x to describe each one as we loop over the object.\" Then we see: text += obj[x] + \" \"; which says the variable text now equals whatever it was plus the value of the current key, x, and then add a space, \" \" , just for readability. After the loop is over return the things we added to the text variables.","title":"For/In loop"},{"location":"module-1/js-loops/#forof-loops","text":"The for/of loop works the same way as the for/in loop but instead of objects, it's used on arrays. 1 2 3 4 5 6 7 8 9 10 11 12 13 const writers = [ \"Dickinson\" , \"Steinbeck\" , \"Huxley\" ] const loopOverArray = ( arr ) => { let text = \"I love to read \" ; let author ; for ( author of arr ) { text += author + \" and... \" ; } return text } loopOverArray ( writers ) This loop and the for loop are the most common loops you'll be using throughout your career and this course.","title":"For/Of Loops"},{"location":"module-1/js-loops/#the-dowhile-loop","text":"While and do/while loops are used to perform a block of code over and over until a certain condition evaluates to true. For front-end development, it is fairly rare that a while or do while loop would be the best option but, for the sake of thoroughness... A do/while loop repeats something until the condition is evaluated as false. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // again, pseudo-code here so you can see it more clearly. do { action statement } while ( stop condition ); // Check out what's going on below: const celebrateBirthday = () => { let age = 0 ; do { age += 1 ; console . log ( \"Happy Birthday!! Today you are \" + age + \" year old!\" ); } while ( age < 20 ); } celebrateBirthday () Copy/paste the code above into a Repl.it and let's quickly break this down: let age = 0; - create a variable that's expected to change and set it to 0 do { } - create an action statement age += 1; - each time the loop runs add 1 to the age variable console.log(\"blah blah blah\") - you know what this does while (age < 20) - establish a stop condition: when age is equal to or greater than 20 stop doing the action statement and break out of the loop.","title":"The Do...While Loop"},{"location":"module-1/js-loops/#the-while-loop","text":"1 2 3 while ( condition ) { action statement } Explore the example below: 1 2 3 4 5 6 7 8 9 const logGrade = () => { let grade = 0 ; while ( grade < 70 ) { grade += 10 ; console . log ( \"You have a \" + grade + \" in this class and cannot move on to the next class until your grade is higher than a 70.\" ); } } logGrade () Throw this code into a Repl.it and work through it on your own. Your ability to read code is what's going to get you to go far!!","title":"The While Loop"},{"location":"module-1/js-loops/#practice-it","text":"","title":"Practice It"},{"location":"module-1/js-loops/#loops-1","text":"Copy/paste this code into a new Repl.it Then follow the instructions in the comments. 1 2 3 4 5 6 7 8 9 10 11 12 const users = { 232 : 'renee' , 5656 : 'mark' , 5546 : 'devin' , 3353 : 'grace' , 4894 : 'michael' , 6644 : 'becca' } // * Write a for/of loop that console logs each of the user names in the users object // * Write a for/in loop that console logs each of the keys in the users object","title":"Loops 1"},{"location":"module-1/js-loops/#loops-2","text":"Copy/paste this code into a new Repl.it Then follow the instructions in the comments. 1 2 3 4 5 6 7 8 9 10 11 12 13 // * Create an object with keys and values called \"person\" with the following data: // firstName: \u201cJane\u201d // lastName: \u201cDoe\u201d // birthDate: \u201cJan 5, 1925\u201d // gender: \u201cfemale\u201d // * Use a for/in loop to console.log each key. // * Create an array of 5 objects that have the same structure as \"person\" with the same keys but with different values. // * Write a for/of loop inside a for/in loop that logs each of the values for all 5 persons // * Then use a for/of loop and if statement to console.log only the objects with the keys: firstName and birthDate.","title":"Loops 2"},{"location":"module-1/js-loops/#know-your-docs","text":"MDN Docs - While MDN Docs - Break MDN Docs - For...In MDN Docs - For...Of MDN Docs - Do...While","title":"Know Your Docs"},{"location":"module-1/js-loops/#additional-resources","text":"Video - JS For Loops","title":"Additional Resources"},{"location":"module-1/typeArray/","text":"Type Array Another flaw in the human character is that everybody wants to build and nobody wants to do maintenance.\u2003\u2014Kurt Vonnegut Overview So far we've been working with primitive data types, like data type: Number, String, and Boolean. These are great for storing small isolated bits of information, but what if we have large amounts of data, many names of users, phone numbers, and emails we want to use to contact our clients? It would be rather hard to maintain all of that if we had to declare a variable for each one, and then we would have to build functions for each one, too! To solve this problem of listing items we have arrays which are just that, lists or collections of items grouped together in one variable. All arrays are objects, but not all objects are arrays. This is a confusing phrase but don't worry, it'll make sense later on. Let's start by learning how to declare an array . You declare an array just like you would a variable but instead of quotes like a string, use brackets like this: [] . Now you can put the items inside the [] (brackets) and separate the items in an array with a comma (see below). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 const exampleArray = [ 'h' , 'e' , 'l' , 'l' , 'o' ] const ourCarTypes = [ \"Saab\" , \"Volvo\" , \"BMW\" ] const itemArray = [ 'item1' , 'item2' ] const arrayOfNumbers = [ 1 , 200 , 98 , 75 , 4 , 4000 ] An array is a collection or list of items . This collection of items could be a collection of anything , like a collections of numbers : const anArrayOfNumbers = [ 3 , 6 , 7 , 9 , 10 ] Or a collection / list of strings : const anArrayOfStrings = [ \"cat\" , \"mail\" , \"stars\" , \"hero\" ] Or a collection / list of Booleans : const anArrayOfBooleans = [ true , false , true , true , false , true ] Or a collection / list of multiple data types : const anArrayOfMixedTypes = [ true , 12 , \"people\" , false , 6 , 29 , \"happy\" ] It could even be a collection of functions or more arrays within the array : const addTwo = ( num1 , num2 ) => num1 + num2 const anArray = [ 2 , 5 , 7 , 68 , 12 ] const anArrayOfMoreObjects = [ addTwo , anArray ] Really, we can store any JavaScript thing in an array. There are a few useful reasons we would store items in an array, including: Anything can be stored in an array. Each item in an array has an index , meaning we can access the items in the array by the order in which they are listed! You can loop over arrays. That is to say, we can write code that will grab each item in an array and do whatever we tell it to do with each item! Arrays have many, many useful methods already built in to them!!! For all of these reasons, type Array is probably one of the most useable data types in JavaScript!!! Array Indexes Start with 0 Items in an array each have a unique index that represents the order in which they appear. You access items in an array by their index, so order is important. It's also important to remember, just like strings, arrays are 0 indexed. 0 indexed means the first item in an array has an index of 0, the second item has an index of 1, the third item has an index of 2 and so forth. Basically, counting begins at 0, not 1. 1 2 3 // an array of letters const exampleArray = [ 'h' , 'e' , 'l' , 'l' , 'o' ] console . log ( exampleArray [ 1 ]) Using the example code above: console.log(exampleArray[1]) would log to the console e because arrays are 0 indexed . To access 'h' you would need to use exampleArray[0] . You can re-assign items in the array in a similar manner: exampleArray[1] = \u2018y\u2019 would rewrite the data in the array to look like this: [\u2018h\u2019,\u2019y\u2019,\u2019l\u2019,\u2019l\u2019,\u2019o\u2019] . Again, the items stored in an array can be of any primitive or higher-order data type you've learned about so far: Number, null, String, Array, Object, Function, Boolean, Node, etc. Side-note: When we put arrays inside arrays we call this nesting which creates a fancy thing called a multi-dimensional array . See below: 1 2 3 4 5 6 const multiArrays = [[ 1 , 2 , 3 , 6 , 9 , 5 ], [ 90 , 5 , 8 , 65 , 3 ], [ \"dog\" , \"tooth\" , \"friend\" ]] console . log ( multiArrays [ 1 ]) // => [90, 5, 8, 65, 3] console . log ( multiArrays [ 0 ]) // => [1, 2, 3, 6, 9, 5] console . log ( multiArrays [ 0 ][ 3 ]) // => 6 console . log ( multiArrays [ 2 ][ 2 ]) // => \"friend\" Notice that multiArrays has three arrays inside of it. When we console.log indexes 0 , 1 , or 2 we get the whole array at that index, but we can go even deeper by tacking two square-brackets on top of each other: [][] and putting numbers in them: [1][4] . This tells the computer to find the array we're seeking, of index [1] , then go inside that array and get the item we're seeking with an index of [4] , from that array. This can go deeper: anArray[2][2][0] , and deeper: anArray[2][2][0][7] , and deeper: anArray[2][2][0][7][2] depending on how many arrays are nested within the original array. Practice Nested Arrays Copy/Paste the following code into a Repl.it 1 2 3 4 5 const numArr = [ [ 4 , 7 , 9 ], [ 10 , 45 , 300 ], [ 88 , 64 , 37 , 93 ] ]; Write a console.log statement that prints out the number 300 from the given array. Write a console.log statement that prints out the number 64 from the given array. Write a console.log statement that prints out the number 4 from the given array. Looping Over an Array The For Loop A for loop repeats an action over and over until a specified condition evaluates to false. What that means is that we tell the for loop what conditions to meet and what actions to do until those conditions are met. First things first: A for loop is a function that takes in arguments like any other function. Those arguments look like this: declare a variable that will hold an iterator: Initial Expression loop until the iterator meets a specific value: Condition how much the iterator should increase or decrease: Increment Expression Look at the syntax below: 1 2 3 4 5 6 7 8 9 10 11 12 for ([ initialExpression ]; [ condition ]; [ incrementExpression ]) { action statement } // or, the same thing with real numbers and variables const myArr = [ 2 , 33 , 4 , 54 , 13 , 8 , 79 ] let sum = 0 for ( let i = 0 ; i <= myArr . length - 1 ; i ++ ) { sum += myArr [ i ] } In the code snippet above, the for loop states: Set an iterator variable, i , at 0. While the iterator, i , is less than or equal to the length of myArr minus 1, continue doing the action statement (We need to subtract 1 because the last index will be one less than the total length. Remember 0 indexed?) . After each loop, add 1 to the value of i . Inside the Action Statement , we add to the variable sum the value of sum + the value at the current index of the loop, which is held in the iterator, i . Try it yourself, Copy/paste the following code into a Repl.it and run it! 1 2 3 4 5 6 7 8 9 10 11 12 13 const myArr = [ 2 , 33 , 4 , 54 , 13 , 8 , 79 ] const myFunFunction = ( arr ) => { let sum = 0 for ( let i = 0 ; i <= arr . length - 1 ; i ++ ) { console . log ( \"The value of 'i' is: \" + i + \" and the value at that index is: \" + arr [ i ]) sum += arr [ i ] } return console . log ( \"The final sum is: \" + sum ) } myFunFunction ( myArr ) Create a for loop to print out numbers from 1 - 10. Create a for loop to print out every multiple of 3 up to 100. The Methods of Array Types By now, we've talked about methods as baked-in functions that JavaScript things come with so we can manipulate those things easily. You don't have to do anything special to get them to work\u2014all you have to do is learn about them and then call them by name when you want to use them. As you learn more about the language you'll come to learn and appreciate all of the wonderful methods JavaScript has to offer, specifically for arrays, since they come with some of the most powerful methods in the JavaScript environment! As an example, .length is a simple and yet very powerful method used all the time! You saw this method used above. When you call .length on an array, it will return the number of items in the array. 1 const multiArrays = [[ 1 , 2 , 3 , 6 , 9 , 5 ], [ 90 , 5 , 8 , 65 , 3 ], [ \"dog\" , \"tooth\" , \"friend\" ]] Example: If we console.log(multiArrays.length) from the example above we would get 3 because that array has three items in it. If we console.log(multiArrays[0].length) we would get 6 . Note: The index of the last item in an array is always equal to the .length of the array minus one ( console.log(multiArrays[1].length - 1) // => 4 ). You can use this method to get the value of the last item too! c onsole.log(multiArrays[1][multiArrays[1].length - 1]) => 3 Start looking at these array methods and see if you can play with some dummy variables with them. Simply copy/paste some of the code snippets above into a Repl.it , add more data to them and try some of these methods inside a console.log statement. See what you come up with. The Most Important Methods For Pig Latin you will need the first 8 array methods listed below. Open a new Repl.it, create some dummy arrays and begin playing with these methods just the same way you've played with strings, numbers, and Booleans. .slice() .splice() .toString() .concat() .includes() .pop() .push() .join() .length .indexOf() .shift() .unshift() .every() .flat() .find() .reverse() .forEach() Hint: For Pig Latin you'll also need the string method: .split() each method now and make flashcards to memorize them and make your programming faster! No Two Arrays Are Equal BIG NOTE: One important thing to remember about arrays: no two arrays are the same array. So, even if you declared two arrays and gave them the same values, they will not be equal. See below: 1 2 3 4 const arr1 = [ 1 , 2 , 3 ] const arr2 = [ 1 , 2 , 3 ] arr1 === arr2 // => false Questions: How would you find out if two arrays contain the same values? Think about it and see if you can come up with an answer before class. Mutability Before moving forward we should learn about a word called mutability . Derived from the word \"mutate\", to change; as in Teenage Mutant Ninja Turtles . In programming terms, this simply means that the original data we are working with can be changed or is permanently changed. Permanently changing the original data/data structure is something that should generally be avoided. This is where the word immutable comes into play. We bring up immutability here because some of the array methods you just learned about permanently change the data in the array while others return a new array without mutating the original data. While you're discovering the methods, make sure to ask these four questions of each method: What does the method do? What does the method return? What arguments does the method take? Does the method change the original data? You'll learn when to change data and when not to as you go deeper , but for now just become aware of what each methods does, what it returns, and if it's changing the original array. An example of a method that mutates the original array is . push() : exampleArray.push(\u2018x\u2019) . This method would add the string 'x' to the end of exampleArray and thereby permanently change the array. The push method also returns the new length of the string. So if exampleArray had 5 elements, and you declared const newLength = exampleArray.push('x') , newLength would be equal to 6, and the string 'x' would be added to the end of exampleArray . Adding new items to an array can also be accomplished without mutation by using the concat method, which merges two arrays, or merges values into an array: const exArr2 = exampleArray.concat('x') . In this case, exampleArray would not be changed, and exArr2 would be the same as exArr , but with the string 'x' added to the end of the array. This is an example of a non-mutating array method. To learn more about mutating and non-mutating array methods you can check out this blog post , but keep in mind that unlike in this article, in most cases you will want to declare all of your arrays with const , not let , whether or not you intend to mutate them. Practice It Before coming into class... Go to the CodePen below, click the top-right corner. Fork it to your account. If not already collapsed, drag the HTML and CSS windows to the left so you're only looking at the JS file. See the Pen Arrays Practice by Keith ( @kdybvig ) on CodePen . Know Your Docs MDN Docs - Type Array Additional Resources Video - Arrays for Beginners Video - For Loops for Beginners Video - 15 Array Tricks Video - Diff Two Arrays","title":"Type Array"},{"location":"module-1/typeArray/#type-array","text":"Another flaw in the human character is that everybody wants to build and nobody wants to do maintenance.\u2003\u2014Kurt Vonnegut","title":"Type Array"},{"location":"module-1/typeArray/#overview","text":"So far we've been working with primitive data types, like data type: Number, String, and Boolean. These are great for storing small isolated bits of information, but what if we have large amounts of data, many names of users, phone numbers, and emails we want to use to contact our clients? It would be rather hard to maintain all of that if we had to declare a variable for each one, and then we would have to build functions for each one, too! To solve this problem of listing items we have arrays which are just that, lists or collections of items grouped together in one variable. All arrays are objects, but not all objects are arrays. This is a confusing phrase but don't worry, it'll make sense later on. Let's start by learning how to declare an array . You declare an array just like you would a variable but instead of quotes like a string, use brackets like this: [] . Now you can put the items inside the [] (brackets) and separate the items in an array with a comma (see below). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 const exampleArray = [ 'h' , 'e' , 'l' , 'l' , 'o' ] const ourCarTypes = [ \"Saab\" , \"Volvo\" , \"BMW\" ] const itemArray = [ 'item1' , 'item2' ] const arrayOfNumbers = [ 1 , 200 , 98 , 75 , 4 , 4000 ] An array is a collection or list of items . This collection of items could be a collection of anything , like a collections of numbers : const anArrayOfNumbers = [ 3 , 6 , 7 , 9 , 10 ] Or a collection / list of strings : const anArrayOfStrings = [ \"cat\" , \"mail\" , \"stars\" , \"hero\" ] Or a collection / list of Booleans : const anArrayOfBooleans = [ true , false , true , true , false , true ] Or a collection / list of multiple data types : const anArrayOfMixedTypes = [ true , 12 , \"people\" , false , 6 , 29 , \"happy\" ] It could even be a collection of functions or more arrays within the array : const addTwo = ( num1 , num2 ) => num1 + num2 const anArray = [ 2 , 5 , 7 , 68 , 12 ] const anArrayOfMoreObjects = [ addTwo , anArray ] Really, we can store any JavaScript thing in an array. There are a few useful reasons we would store items in an array, including: Anything can be stored in an array. Each item in an array has an index , meaning we can access the items in the array by the order in which they are listed! You can loop over arrays. That is to say, we can write code that will grab each item in an array and do whatever we tell it to do with each item! Arrays have many, many useful methods already built in to them!!! For all of these reasons, type Array is probably one of the most useable data types in JavaScript!!!","title":"Overview"},{"location":"module-1/typeArray/#array-indexes-start-with-0","text":"Items in an array each have a unique index that represents the order in which they appear. You access items in an array by their index, so order is important. It's also important to remember, just like strings, arrays are 0 indexed. 0 indexed means the first item in an array has an index of 0, the second item has an index of 1, the third item has an index of 2 and so forth. Basically, counting begins at 0, not 1. 1 2 3 // an array of letters const exampleArray = [ 'h' , 'e' , 'l' , 'l' , 'o' ] console . log ( exampleArray [ 1 ]) Using the example code above: console.log(exampleArray[1]) would log to the console e because arrays are 0 indexed . To access 'h' you would need to use exampleArray[0] . You can re-assign items in the array in a similar manner: exampleArray[1] = \u2018y\u2019 would rewrite the data in the array to look like this: [\u2018h\u2019,\u2019y\u2019,\u2019l\u2019,\u2019l\u2019,\u2019o\u2019] . Again, the items stored in an array can be of any primitive or higher-order data type you've learned about so far: Number, null, String, Array, Object, Function, Boolean, Node, etc. Side-note: When we put arrays inside arrays we call this nesting which creates a fancy thing called a multi-dimensional array . See below: 1 2 3 4 5 6 const multiArrays = [[ 1 , 2 , 3 , 6 , 9 , 5 ], [ 90 , 5 , 8 , 65 , 3 ], [ \"dog\" , \"tooth\" , \"friend\" ]] console . log ( multiArrays [ 1 ]) // => [90, 5, 8, 65, 3] console . log ( multiArrays [ 0 ]) // => [1, 2, 3, 6, 9, 5] console . log ( multiArrays [ 0 ][ 3 ]) // => 6 console . log ( multiArrays [ 2 ][ 2 ]) // => \"friend\" Notice that multiArrays has three arrays inside of it. When we console.log indexes 0 , 1 , or 2 we get the whole array at that index, but we can go even deeper by tacking two square-brackets on top of each other: [][] and putting numbers in them: [1][4] . This tells the computer to find the array we're seeking, of index [1] , then go inside that array and get the item we're seeking with an index of [4] , from that array. This can go deeper: anArray[2][2][0] , and deeper: anArray[2][2][0][7] , and deeper: anArray[2][2][0][7][2] depending on how many arrays are nested within the original array.","title":"Array Indexes Start with 0"},{"location":"module-1/typeArray/#practice-nested-arrays","text":"Copy/Paste the following code into a Repl.it 1 2 3 4 5 const numArr = [ [ 4 , 7 , 9 ], [ 10 , 45 , 300 ], [ 88 , 64 , 37 , 93 ] ]; Write a console.log statement that prints out the number 300 from the given array. Write a console.log statement that prints out the number 64 from the given array. Write a console.log statement that prints out the number 4 from the given array.","title":"Practice Nested Arrays"},{"location":"module-1/typeArray/#looping-over-an-array","text":"","title":"Looping Over an Array"},{"location":"module-1/typeArray/#the-for-loop","text":"A for loop repeats an action over and over until a specified condition evaluates to false. What that means is that we tell the for loop what conditions to meet and what actions to do until those conditions are met. First things first: A for loop is a function that takes in arguments like any other function. Those arguments look like this: declare a variable that will hold an iterator: Initial Expression loop until the iterator meets a specific value: Condition how much the iterator should increase or decrease: Increment Expression Look at the syntax below: 1 2 3 4 5 6 7 8 9 10 11 12 for ([ initialExpression ]; [ condition ]; [ incrementExpression ]) { action statement } // or, the same thing with real numbers and variables const myArr = [ 2 , 33 , 4 , 54 , 13 , 8 , 79 ] let sum = 0 for ( let i = 0 ; i <= myArr . length - 1 ; i ++ ) { sum += myArr [ i ] } In the code snippet above, the for loop states: Set an iterator variable, i , at 0. While the iterator, i , is less than or equal to the length of myArr minus 1, continue doing the action statement (We need to subtract 1 because the last index will be one less than the total length. Remember 0 indexed?) . After each loop, add 1 to the value of i . Inside the Action Statement , we add to the variable sum the value of sum + the value at the current index of the loop, which is held in the iterator, i .","title":"The For Loop"},{"location":"module-1/typeArray/#try-it-yourself","text":"Copy/paste the following code into a Repl.it and run it! 1 2 3 4 5 6 7 8 9 10 11 12 13 const myArr = [ 2 , 33 , 4 , 54 , 13 , 8 , 79 ] const myFunFunction = ( arr ) => { let sum = 0 for ( let i = 0 ; i <= arr . length - 1 ; i ++ ) { console . log ( \"The value of 'i' is: \" + i + \" and the value at that index is: \" + arr [ i ]) sum += arr [ i ] } return console . log ( \"The final sum is: \" + sum ) } myFunFunction ( myArr ) Create a for loop to print out numbers from 1 - 10. Create a for loop to print out every multiple of 3 up to 100.","title":"Try it yourself,"},{"location":"module-1/typeArray/#the-methods-of-array-types","text":"By now, we've talked about methods as baked-in functions that JavaScript things come with so we can manipulate those things easily. You don't have to do anything special to get them to work\u2014all you have to do is learn about them and then call them by name when you want to use them. As you learn more about the language you'll come to learn and appreciate all of the wonderful methods JavaScript has to offer, specifically for arrays, since they come with some of the most powerful methods in the JavaScript environment! As an example, .length is a simple and yet very powerful method used all the time! You saw this method used above. When you call .length on an array, it will return the number of items in the array. 1 const multiArrays = [[ 1 , 2 , 3 , 6 , 9 , 5 ], [ 90 , 5 , 8 , 65 , 3 ], [ \"dog\" , \"tooth\" , \"friend\" ]] Example: If we console.log(multiArrays.length) from the example above we would get 3 because that array has three items in it. If we console.log(multiArrays[0].length) we would get 6 . Note: The index of the last item in an array is always equal to the .length of the array minus one ( console.log(multiArrays[1].length - 1) // => 4 ). You can use this method to get the value of the last item too! c onsole.log(multiArrays[1][multiArrays[1].length - 1]) => 3 Start looking at these array methods and see if you can play with some dummy variables with them. Simply copy/paste some of the code snippets above into a Repl.it , add more data to them and try some of these methods inside a console.log statement. See what you come up with.","title":"The Methods of Array Types"},{"location":"module-1/typeArray/#the-most-important-methods","text":"For Pig Latin you will need the first 8 array methods listed below. Open a new Repl.it, create some dummy arrays and begin playing with these methods just the same way you've played with strings, numbers, and Booleans. .slice() .splice() .toString() .concat() .includes() .pop() .push() .join() .length .indexOf() .shift() .unshift() .every() .flat() .find() .reverse() .forEach() Hint: For Pig Latin you'll also need the string method: .split() each method now and make flashcards to memorize them and make your programming faster!","title":"The Most Important Methods"},{"location":"module-1/typeArray/#no-two-arrays-are-equal","text":"BIG NOTE: One important thing to remember about arrays: no two arrays are the same array. So, even if you declared two arrays and gave them the same values, they will not be equal. See below: 1 2 3 4 const arr1 = [ 1 , 2 , 3 ] const arr2 = [ 1 , 2 , 3 ] arr1 === arr2 // => false Questions: How would you find out if two arrays contain the same values? Think about it and see if you can come up with an answer before class.","title":"No Two Arrays Are Equal"},{"location":"module-1/typeArray/#mutability","text":"Before moving forward we should learn about a word called mutability . Derived from the word \"mutate\", to change; as in Teenage Mutant Ninja Turtles . In programming terms, this simply means that the original data we are working with can be changed or is permanently changed. Permanently changing the original data/data structure is something that should generally be avoided. This is where the word immutable comes into play. We bring up immutability here because some of the array methods you just learned about permanently change the data in the array while others return a new array without mutating the original data. While you're discovering the methods, make sure to ask these four questions of each method: What does the method do? What does the method return? What arguments does the method take? Does the method change the original data? You'll learn when to change data and when not to as you go deeper , but for now just become aware of what each methods does, what it returns, and if it's changing the original array. An example of a method that mutates the original array is . push() : exampleArray.push(\u2018x\u2019) . This method would add the string 'x' to the end of exampleArray and thereby permanently change the array. The push method also returns the new length of the string. So if exampleArray had 5 elements, and you declared const newLength = exampleArray.push('x') , newLength would be equal to 6, and the string 'x' would be added to the end of exampleArray . Adding new items to an array can also be accomplished without mutation by using the concat method, which merges two arrays, or merges values into an array: const exArr2 = exampleArray.concat('x') . In this case, exampleArray would not be changed, and exArr2 would be the same as exArr , but with the string 'x' added to the end of the array. This is an example of a non-mutating array method. To learn more about mutating and non-mutating array methods you can check out this blog post , but keep in mind that unlike in this article, in most cases you will want to declare all of your arrays with const , not let , whether or not you intend to mutate them.","title":"Mutability"},{"location":"module-1/typeArray/#practice-it","text":"Before coming into class... Go to the CodePen below, click the top-right corner. Fork it to your account. If not already collapsed, drag the HTML and CSS windows to the left so you're only looking at the JS file. See the Pen Arrays Practice by Keith ( @kdybvig ) on CodePen .","title":"Practice It"},{"location":"module-1/typeArray/#know-your-docs","text":"MDN Docs - Type Array","title":"Know Your Docs"},{"location":"module-1/typeArray/#additional-resources","text":"Video - Arrays for Beginners Video - For Loops for Beginners Video - 15 Array Tricks Video - Diff Two Arrays","title":"Additional Resources"},{"location":"module-1/typeObjectLiteral/","text":"Type: Object-Literal Don\u2019t compromise yourself. You\u2019re all you\u2019ve got.\u2003\u2014Janis Joplin Overview So far we've been working with primitive data types, like data type: Number, String, and Boolean. These are great for storing small isolated bits of information, but what happens when you want to store related information such as the make, model, color, VIN, drive-train, passenger capacity, fuel type, and CarFax history of every the car in a dealership's parking lot of cars? Or if you want to store the names of all of a user's friends on a social media platform? By using the data type: Object-Literal we can group related pieces of data together in a way that makes our database easier to access and manipulate. The name \"Object-Literal\" is used because all things are objects as you learned in 101 but because this type is syntactically written out the way all objects are under-the-hood we call them \"Object-Literals\" as in Literally an Object . The first wonderful aspect of objects is that they store data by unique keys . Instead of indexes like arrays, objects have keys that reference each of the various values stored in the object. The keys and values together are called key-value pairs. The simple rule about creating an object's keys is that they must be strings, usually words, or even symbols while the values can be any data type including Array, Object, Function, Boolean, Number, String, or Byte. Unlike arrays, when we access values in an object, order does not matter. Let's take this code snippet for example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 const exampleObject = { name : \"Pete\" , age : 58 , weight : \"150 lbs\" , id : 6089 , pets : [ { species : 'canine' , name : 'Fido' }, { species : 'feline' , name : 'Pandora' } ], employment : { company : 'GE' , role : 'engineer' , salary : 98000 } }; console . log ( exampleObject . id ) // => 6089 console . log ( exampleObject . weight ) // \"150 lbs\" To get the value of the id key of this object we use dot-notation , exampleObject.id . It would not matter if id was the first key or the three thousandth key, all we would need to access that information/data is the object's variable name, exampleObject , and the key name, id . Creating and Object-Literal You create an object the same way you declare any other data type: First declare const Then name the object, person Point it at the object-literal, = But instead of square-brackets, use curly-braces , {} After that separate the keys and values by colons, : Finally, separate key-value pairs by commas, , Check it out below: 1 2 3 4 5 6 const person = { firstName : \"Keith\" , lastName : \"Murgic\" , age : 31 , eyeColor : \"brown\" }; person is the name of the object, firstName , lastName , and eyeColor are properties or keys of person , and the corresponding property values are \"Keith\" , \"Murgic\" , 31 , and \"brown\" . Accessing Object-Literals You can access information stored in objects in two ways: 1 2 3 4 5 // Dot-Notation: objectName.propertyName console . log ( person . firstName ) // => \"Keith\" // Bracket-Notation: objectName[\"propertyName\"] console . log ( person [ \"firstName\" ]) // => \"Keith\" Just like accessing built-in methods, we can use dot-notation : .firstName . It's important to know that dot notation can only be used when you know the property's key name. This may seem obvious but when we move on to calling the values by some conditional if statement we won't know which will be called at any given time, so we have to wrap the value in quotation marks, \"firstName\" , and pass that into the square brackets, [\"firstName\"] . Writing Data into Objects-Literals Before pushing forward, it's important to discuss the difference between read and write , as they relate to computers. Read means we're accessing data and displaying it somewhere without changing it. Write means we're changing the data either from scratch or editing it. Therefore to write , or change, or add a new key:value pair in an object, simply access the value and set it equal to the new value as you would do when you declare a new variable or re-point a variable to a new value. See below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 const person = { firstName : \"Keith\" , lastName : \"Murgic\" , age : 31 , eyeColor : \"brown\" }; // Before we change the value console . log ( person . age ) // => 31 // Use either a dot or brackets person . age = 50 person [ \"age\" ] = 50 // Now a new value will be returned console . log ( person . age ) // => 50 // Add a key:value person . birthDate = \"1/16/1860\" console . log ( person ) // => { firstName: \"Keith\", lastName: \"Murgic\", age: 50, eyeColor: \"brown\", birthDate: \"1/16/1860\" } // also see Object.assign() When building your objects remember, each key must be unique. There can never be two keys that are the same. However, values can be repeated as many times as needed. The following object would not be a properly formatted object because there are two id keys: 1 2 3 4 const anObject = { id : 5 , name : \u2018 Renee \u2019 , id : 7 } // This, however, is a properly formatted object: const anObject = { id : 5 , name : \u2018 Renee \u2019 , label : 7 } You might be asking why these objects are on one line but the others we've looked at are on multiple lines. This is only for legibility. Whitespace makes code easier to read by the human eye. Accessing Nested Data In real world data, you will see objects with arrays as values and arrays with objects as values, so it\u2019s critical that you can access nested data, or objects within arrays, arrays within objects, arrays within arrays and so forth! Getting good at this is worth the time spent NOW!! Let's take a look at the object below: 1 2 3 4 5 6 7 8 const user = { accessCodes : [ 49303 , 493020 , 904040 , 900404 ], env : [ \"PA\" , \"NY\" , \"CT\" , \"VT\" ], filter : { id : 580 , branch : \"origin\" } } console . log ( user . accessCodes ) // => [49303, 493020, 904040, 900404] console . log ( user . accessCodes [ 1 ]) // => 493020 Remember to access data one step at a time. In order to access the second item in the accessCodes array, first you need to access the accessCode property then use the return of that first step (which is an array) to access the second item in the array. This can be accomplished in two ways, bracket or dot notation: user[\u2018accessCodes\u2019][1] or user.accessCodes[1] . Both ways return: 493020 . On your own, think about how you would access the age property of the second element, Zuke , in the friends array below. Copy/paste the object into a Repl.it and experiment. 1 2 3 4 const user = { name : 'Keith' , friends : [{ name : 'Meghan' , age : '27' }, { name : 'Zuke' , age : '3' }] } The Methods of Object-Literals The reason you've been able to access all of these built-in methods of strings, arrays, numbers, or Booleans is because they're all created through a prototype , which is an object in JavaScript that says: \"Hey, when a JavaScript thing is created, use this template, or prototype , to make it so that all JavaScript things operate the same way.\" Because of this, all strings have the same methods, and arrays have the same methods as other arrays. We don't need to go into depth with the prototype thing right now but it's important for you to understand that it is an object just like the ones you're studying right now. Just like an HTML element in the Document Object Model (DOM) and just like a CSS rule with its {} . With all of that, take a look at this code snippet: 1 2 3 4 5 6 7 8 9 10 11 const person = { firstName : \"Keith\" , lastName : \"Murgic\" , age : 31 , eyeColor : \"brown\" , talk : function ( friend ) { console . log ( \"Hello, \" + friend ) } }; console . log ( person . talk ( \"Peter\" )) We see there is a function called talk set as a property on this object. Using dot notation we can access this function: person.talk(\"Peter\") . 1 person . talk ( \"Peter\" ) // => 'Hello, Peter' Any time a function is put on an object like this, it's called a method . :) Sound familiar? Yes, all of those methods you've used for strings, arrays, and numbers are all functions built on the prototype object/template of those data types just like this .talk() method is built on person. Again, don't worry about understanding the prototype, it's not important right now. But, speaking of methods, objects come with their own built-in methods and you should look at them for yourself before class! Commonly Used Methods of the Object-Literal The first method we'll cover is .create() because it helps introduce OOP , object-oriented programming , in a small and helpful way. You see, when we create an app with multiple users, each of our users will have similar data structures like: name , id , password , email , phone , address , and username . Each of these pieces of data will become our keys which create a template for all new users of our app to follow. This template structure is the basis of object-oriented programming where we only have to build the template once so we can reuse it over and over again as our app and database grow: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // Create a template object that holds the keys we'll need for each of our users const ourUserTemplate = { name : \"\" , id : Number , password : \"\" , email : \"\" , phone : \"\" , address : \"\" , username : \"\" , location : \"\" , printNameOnHomeScreen : function () { return `Hello, ${ this . name } . It looks like you're in ${ this . location } .` ; } } // Create a new user with the Object.create() method and the template object passed into it const constantineAlfonso = Object . create ( ourUserTemplate ) // Add a value to the name key of the new object & a value to the location key constantineAlfonso . name = \"Constantine Alfonso\" constantineAlfonso . location = \"Dallas, TX\" // Log out the value console . log ( constantineAlfonso . printNameOnHomeScreen ()) Copy/paste the code above in to your own Repl.it and see what's happening for yourself. Notice the way we use the .create() method. Instead of calling it directly on the template object, we call it on the Object prototype and pass in the template we'd like it to use. Then we can change values afterwards. Google each of these and use the code sample above with each one in a Repl.it to see what you can find out on your own. .entries() .assign() .keys() .is() Of course, you should push to learn a new one everyday but these will be good ones to start with. Practice it - Object-Literals Go to the CodePen below, click the top-right corner. Fork it to your account. If not already collapsed, drag the HTML and CSS windows to the left so you're only looking at the JS file. Follow the instructions in the JS file. See the Pen Objects Practice by Keith ( @kdybvig ) on CodePen . Know Your Docs MDN Docs - Object Literal Additional Resources Eloquent JS - Object-Literals Video - What Are Objects in JS? ...","title":"Type Object-Literal"},{"location":"module-1/typeObjectLiteral/#type-object-literal","text":"Don\u2019t compromise yourself. You\u2019re all you\u2019ve got.\u2003\u2014Janis Joplin","title":"Type: Object-Literal"},{"location":"module-1/typeObjectLiteral/#overview","text":"So far we've been working with primitive data types, like data type: Number, String, and Boolean. These are great for storing small isolated bits of information, but what happens when you want to store related information such as the make, model, color, VIN, drive-train, passenger capacity, fuel type, and CarFax history of every the car in a dealership's parking lot of cars? Or if you want to store the names of all of a user's friends on a social media platform? By using the data type: Object-Literal we can group related pieces of data together in a way that makes our database easier to access and manipulate. The name \"Object-Literal\" is used because all things are objects as you learned in 101 but because this type is syntactically written out the way all objects are under-the-hood we call them \"Object-Literals\" as in Literally an Object . The first wonderful aspect of objects is that they store data by unique keys . Instead of indexes like arrays, objects have keys that reference each of the various values stored in the object. The keys and values together are called key-value pairs. The simple rule about creating an object's keys is that they must be strings, usually words, or even symbols while the values can be any data type including Array, Object, Function, Boolean, Number, String, or Byte. Unlike arrays, when we access values in an object, order does not matter. Let's take this code snippet for example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 const exampleObject = { name : \"Pete\" , age : 58 , weight : \"150 lbs\" , id : 6089 , pets : [ { species : 'canine' , name : 'Fido' }, { species : 'feline' , name : 'Pandora' } ], employment : { company : 'GE' , role : 'engineer' , salary : 98000 } }; console . log ( exampleObject . id ) // => 6089 console . log ( exampleObject . weight ) // \"150 lbs\" To get the value of the id key of this object we use dot-notation , exampleObject.id . It would not matter if id was the first key or the three thousandth key, all we would need to access that information/data is the object's variable name, exampleObject , and the key name, id .","title":"Overview"},{"location":"module-1/typeObjectLiteral/#creating-and-object-literal","text":"You create an object the same way you declare any other data type: First declare const Then name the object, person Point it at the object-literal, = But instead of square-brackets, use curly-braces , {} After that separate the keys and values by colons, : Finally, separate key-value pairs by commas, , Check it out below: 1 2 3 4 5 6 const person = { firstName : \"Keith\" , lastName : \"Murgic\" , age : 31 , eyeColor : \"brown\" }; person is the name of the object, firstName , lastName , and eyeColor are properties or keys of person , and the corresponding property values are \"Keith\" , \"Murgic\" , 31 , and \"brown\" .","title":"Creating and Object-Literal"},{"location":"module-1/typeObjectLiteral/#accessing-object-literals","text":"You can access information stored in objects in two ways: 1 2 3 4 5 // Dot-Notation: objectName.propertyName console . log ( person . firstName ) // => \"Keith\" // Bracket-Notation: objectName[\"propertyName\"] console . log ( person [ \"firstName\" ]) // => \"Keith\" Just like accessing built-in methods, we can use dot-notation : .firstName . It's important to know that dot notation can only be used when you know the property's key name. This may seem obvious but when we move on to calling the values by some conditional if statement we won't know which will be called at any given time, so we have to wrap the value in quotation marks, \"firstName\" , and pass that into the square brackets, [\"firstName\"] .","title":"Accessing Object-Literals"},{"location":"module-1/typeObjectLiteral/#writing-data-into-objects-literals","text":"Before pushing forward, it's important to discuss the difference between read and write , as they relate to computers. Read means we're accessing data and displaying it somewhere without changing it. Write means we're changing the data either from scratch or editing it. Therefore to write , or change, or add a new key:value pair in an object, simply access the value and set it equal to the new value as you would do when you declare a new variable or re-point a variable to a new value. See below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 const person = { firstName : \"Keith\" , lastName : \"Murgic\" , age : 31 , eyeColor : \"brown\" }; // Before we change the value console . log ( person . age ) // => 31 // Use either a dot or brackets person . age = 50 person [ \"age\" ] = 50 // Now a new value will be returned console . log ( person . age ) // => 50 // Add a key:value person . birthDate = \"1/16/1860\" console . log ( person ) // => { firstName: \"Keith\", lastName: \"Murgic\", age: 50, eyeColor: \"brown\", birthDate: \"1/16/1860\" } // also see Object.assign() When building your objects remember, each key must be unique. There can never be two keys that are the same. However, values can be repeated as many times as needed. The following object would not be a properly formatted object because there are two id keys: 1 2 3 4 const anObject = { id : 5 , name : \u2018 Renee \u2019 , id : 7 } // This, however, is a properly formatted object: const anObject = { id : 5 , name : \u2018 Renee \u2019 , label : 7 } You might be asking why these objects are on one line but the others we've looked at are on multiple lines. This is only for legibility. Whitespace makes code easier to read by the human eye.","title":"Writing Data into Objects-Literals"},{"location":"module-1/typeObjectLiteral/#accessing-nested-data","text":"In real world data, you will see objects with arrays as values and arrays with objects as values, so it\u2019s critical that you can access nested data, or objects within arrays, arrays within objects, arrays within arrays and so forth! Getting good at this is worth the time spent NOW!! Let's take a look at the object below: 1 2 3 4 5 6 7 8 const user = { accessCodes : [ 49303 , 493020 , 904040 , 900404 ], env : [ \"PA\" , \"NY\" , \"CT\" , \"VT\" ], filter : { id : 580 , branch : \"origin\" } } console . log ( user . accessCodes ) // => [49303, 493020, 904040, 900404] console . log ( user . accessCodes [ 1 ]) // => 493020 Remember to access data one step at a time. In order to access the second item in the accessCodes array, first you need to access the accessCode property then use the return of that first step (which is an array) to access the second item in the array. This can be accomplished in two ways, bracket or dot notation: user[\u2018accessCodes\u2019][1] or user.accessCodes[1] . Both ways return: 493020 . On your own, think about how you would access the age property of the second element, Zuke , in the friends array below. Copy/paste the object into a Repl.it and experiment. 1 2 3 4 const user = { name : 'Keith' , friends : [{ name : 'Meghan' , age : '27' }, { name : 'Zuke' , age : '3' }] }","title":"Accessing Nested Data"},{"location":"module-1/typeObjectLiteral/#the-methods-of-object-literals","text":"The reason you've been able to access all of these built-in methods of strings, arrays, numbers, or Booleans is because they're all created through a prototype , which is an object in JavaScript that says: \"Hey, when a JavaScript thing is created, use this template, or prototype , to make it so that all JavaScript things operate the same way.\" Because of this, all strings have the same methods, and arrays have the same methods as other arrays. We don't need to go into depth with the prototype thing right now but it's important for you to understand that it is an object just like the ones you're studying right now. Just like an HTML element in the Document Object Model (DOM) and just like a CSS rule with its {} . With all of that, take a look at this code snippet: 1 2 3 4 5 6 7 8 9 10 11 const person = { firstName : \"Keith\" , lastName : \"Murgic\" , age : 31 , eyeColor : \"brown\" , talk : function ( friend ) { console . log ( \"Hello, \" + friend ) } }; console . log ( person . talk ( \"Peter\" )) We see there is a function called talk set as a property on this object. Using dot notation we can access this function: person.talk(\"Peter\") . 1 person . talk ( \"Peter\" ) // => 'Hello, Peter' Any time a function is put on an object like this, it's called a method . :) Sound familiar? Yes, all of those methods you've used for strings, arrays, and numbers are all functions built on the prototype object/template of those data types just like this .talk() method is built on person. Again, don't worry about understanding the prototype, it's not important right now. But, speaking of methods, objects come with their own built-in methods and you should look at them for yourself before class!","title":"The Methods of Object-Literals"},{"location":"module-1/typeObjectLiteral/#commonly-used-methods-of-the-object-literal","text":"The first method we'll cover is .create() because it helps introduce OOP , object-oriented programming , in a small and helpful way. You see, when we create an app with multiple users, each of our users will have similar data structures like: name , id , password , email , phone , address , and username . Each of these pieces of data will become our keys which create a template for all new users of our app to follow. This template structure is the basis of object-oriented programming where we only have to build the template once so we can reuse it over and over again as our app and database grow: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // Create a template object that holds the keys we'll need for each of our users const ourUserTemplate = { name : \"\" , id : Number , password : \"\" , email : \"\" , phone : \"\" , address : \"\" , username : \"\" , location : \"\" , printNameOnHomeScreen : function () { return `Hello, ${ this . name } . It looks like you're in ${ this . location } .` ; } } // Create a new user with the Object.create() method and the template object passed into it const constantineAlfonso = Object . create ( ourUserTemplate ) // Add a value to the name key of the new object & a value to the location key constantineAlfonso . name = \"Constantine Alfonso\" constantineAlfonso . location = \"Dallas, TX\" // Log out the value console . log ( constantineAlfonso . printNameOnHomeScreen ()) Copy/paste the code above in to your own Repl.it and see what's happening for yourself. Notice the way we use the .create() method. Instead of calling it directly on the template object, we call it on the Object prototype and pass in the template we'd like it to use. Then we can change values afterwards. Google each of these and use the code sample above with each one in a Repl.it to see what you can find out on your own. .entries() .assign() .keys() .is() Of course, you should push to learn a new one everyday but these will be good ones to start with.","title":"Commonly Used Methods of the Object-Literal"},{"location":"module-1/typeObjectLiteral/#practice-it-object-literals","text":"Go to the CodePen below, click the top-right corner. Fork it to your account. If not already collapsed, drag the HTML and CSS windows to the left so you're only looking at the JS file. Follow the instructions in the JS file. See the Pen Objects Practice by Keith ( @kdybvig ) on CodePen .","title":"Practice it - Object-Literals"},{"location":"module-1/typeObjectLiteral/#know-your-docs","text":"MDN Docs - Object Literal","title":"Know Your Docs"},{"location":"module-1/typeObjectLiteral/#additional-resources","text":"Eloquent JS - Object-Literals Video - What Are Objects in JS? ...","title":"Additional Resources"},{"location":"module-1/typeString/","text":"Type String Success is liking yourself, liking what you do, and liking how you do it.\u2003\u2014 Maya Angelou Overview The Methods of Strings Moving a little deeper into the complexity of data types, Strings are commonly used and have quite a few built-in methods we can leverage to manipulate them. To begin, you'll always know a string by the single-quotes or double-quotes wrapped around the characters. Notice I said characters and not numbers. That's because \"1976\" is a string, and so is \"I have a dog.\" as well as \"My address is 89 Parmer Way.\" Literally, any set of characters between quotes is a string. We use strings to store data when we don't need to do calculations on them like we would with numbers, when we don't need to iterate through multiple pieces of data, and when what we're storing is relatively simple like text and even phone numbers: \"214-990-0009\" . Dot-Notation Before we can learn the built-in methods of String we should cover that little . you've seen before in the Number and Math methods, called the Member Operator . Below you'll see a few of the built-in methods you can use on strings. To access them you'll notice a . between the variable that holds the string value and the method that's called. This Dot Notation is very common and you've actually already seen it before, but let's spend just a bit of time understanding why we need to use it. With objects like functions and standard JavaScript objects we can access the properties on them with a .. Look at the JavaScript object below: 1 2 3 4 5 6 7 const myObject = { id : 1693 , name : \"John Proctor\" } console . log ( myObject . id ) // => 1693 console . log ( myObject . name ) // => John Proctor Although there is a little bit more syntax in this example than you've seen so far, you can see the properties on the object: id and name . We can access each of these with a ., i.e. myObject.id = 1693. We can do the same thing with our String data types because they each reference the same object in the JavaScript library: the prototype. As we create a new variable and assign it a string variable, our computer will point the variable to the prototype object so that we have access to the built-in methods of the String data type. Therefore, we can simply type myString.length and get the length of the string instead of prototype.myString.length . DON'T WORRY ABOUT THE PROTOTYPE RIGHT NOW, we'll talk about it in depth later on. You can use dot notation on any object as long as you know the key or attribute of the thing you're trying to reference. But let's get back to strings! A Short List of Common String Methods Remember, you will have to reference the documentation on each data type regularly to learn and remember each of their methods, but here we'll talk about some of the most common ones which should include the one's you'll need to complete the Pig Latin app. .length returns the number of characters in a string including spaces. NOTE: length doesn't require parenthesis. Why? .indexOf() method returns the index (position) of the first occurrence of a specified text in a string. .lastIndexOf() method returns the index of the last occurrence of a specified text in a string. .search() method searches a string for a specified value and returns the position of the match. .concat() ...(see docs) .substring() ...(see docs) .replace() ...(see docs) .charAt() ...(see docs) .trim() ...(see docs) .split() changes a string to an array - Useful for PigLatin .slice() takes in two parameters to extract and return a part of a string. In the following example we see the .slice() method used on a string. * .slice() takes the characters between the two indexes you provide in the arguments. In this example we invoke .slice(6, 10) . 1 2 3 4 const exampleString = \"Apples are delicious!\" ; const exampleSlice = exampleString . slice ( 6 , 10 ); console . log ( exampleSlice ) // => \"are\" When we count the positions in strings, we must remember that they are 0 indexed . This means that the first position of a string is 0, the second position is 1, the third position is 2 and so forth. Because of this, the indexes in the example above are: exampleString[0] = \"A\" , exampleString[1] = \"p\" , exampleString[4] = \"e\" , exampleString[6] = \" \" , exampleString[9] = \"e\" , exampleString[11] = \"d\" So slice(7,13) will return the characters from the indexes between 7 and 13. Pop that code into a Repl.it and play to make sure you understand 0 indexed . Bracket-Notation We just did something back there with the [] that helped us access the values of the string. Let's take a look at that. With lists of items like a string or arrays we can access any position we want using bracket notation , [] , because each of the positions are indexed . So if we want to get the \"!\" in the \"Apples are delicious!\" string example, we would write: exampleString[20] which will return \"!\" . Try it yourself if you don't believe me. Because the positions are indexed, we can also loop over each position with a for loop just like we would with an Array, as you'll do in Pig Latin: 1 2 3 4 5 6 7 8 9 10 11 12 // create an example string to play with const myString = \"Love\" // create a function that will loop over ANY string given to it const anExampleForLoop = ( str ) => { for ( let i = 0 ; i < str . length ; i ++ ) { console . log ( str [ i ]) } } // pass the string into the function anExampleForLoop ( myString ) In the example above, we created a for loop that: sets i to be 0 so we can access the first position of the string then continues to move forward as long as i is less than the length of myString or, in the scope of the function: str each time it loops, the value of i is increased by 1: i++ during each loop it logs to the console the character in the current position of str[i] The expected return of this code snippet should be: 1 2 3 4 L O V E Try it Yourself!! Throw it into a REPL.IT ! The great thing about bracket notation is that you can use variables inside the [] just like the i you see above. In that example, i is a variable. We don't know the value of it at any given point but we assume it will be 0, then 1, then 2, then 3. Simple rule to live by: If you need to use a variable or a number to access a position of something, you will need to use [] and not .. Know Your Docs MDN Docs - Type String Article - Dot- vs Bracket-Notation","title":"Type String"},{"location":"module-1/typeString/#type-string","text":"Success is liking yourself, liking what you do, and liking how you do it.\u2003\u2014 Maya Angelou","title":"Type String"},{"location":"module-1/typeString/#overview","text":"","title":"Overview"},{"location":"module-1/typeString/#the-methods-of-strings","text":"Moving a little deeper into the complexity of data types, Strings are commonly used and have quite a few built-in methods we can leverage to manipulate them. To begin, you'll always know a string by the single-quotes or double-quotes wrapped around the characters. Notice I said characters and not numbers. That's because \"1976\" is a string, and so is \"I have a dog.\" as well as \"My address is 89 Parmer Way.\" Literally, any set of characters between quotes is a string. We use strings to store data when we don't need to do calculations on them like we would with numbers, when we don't need to iterate through multiple pieces of data, and when what we're storing is relatively simple like text and even phone numbers: \"214-990-0009\" .","title":"The Methods of Strings"},{"location":"module-1/typeString/#dot-notation","text":"Before we can learn the built-in methods of String we should cover that little . you've seen before in the Number and Math methods, called the Member Operator . Below you'll see a few of the built-in methods you can use on strings. To access them you'll notice a . between the variable that holds the string value and the method that's called. This Dot Notation is very common and you've actually already seen it before, but let's spend just a bit of time understanding why we need to use it. With objects like functions and standard JavaScript objects we can access the properties on them with a .. Look at the JavaScript object below: 1 2 3 4 5 6 7 const myObject = { id : 1693 , name : \"John Proctor\" } console . log ( myObject . id ) // => 1693 console . log ( myObject . name ) // => John Proctor Although there is a little bit more syntax in this example than you've seen so far, you can see the properties on the object: id and name . We can access each of these with a ., i.e. myObject.id = 1693. We can do the same thing with our String data types because they each reference the same object in the JavaScript library: the prototype. As we create a new variable and assign it a string variable, our computer will point the variable to the prototype object so that we have access to the built-in methods of the String data type. Therefore, we can simply type myString.length and get the length of the string instead of prototype.myString.length . DON'T WORRY ABOUT THE PROTOTYPE RIGHT NOW, we'll talk about it in depth later on. You can use dot notation on any object as long as you know the key or attribute of the thing you're trying to reference. But let's get back to strings!","title":"Dot-Notation"},{"location":"module-1/typeString/#a-short-list-of-common-string-methods","text":"Remember, you will have to reference the documentation on each data type regularly to learn and remember each of their methods, but here we'll talk about some of the most common ones which should include the one's you'll need to complete the Pig Latin app. .length returns the number of characters in a string including spaces. NOTE: length doesn't require parenthesis. Why? .indexOf() method returns the index (position) of the first occurrence of a specified text in a string. .lastIndexOf() method returns the index of the last occurrence of a specified text in a string. .search() method searches a string for a specified value and returns the position of the match. .concat() ...(see docs) .substring() ...(see docs) .replace() ...(see docs) .charAt() ...(see docs) .trim() ...(see docs) .split() changes a string to an array - Useful for PigLatin .slice() takes in two parameters to extract and return a part of a string. In the following example we see the .slice() method used on a string. * .slice() takes the characters between the two indexes you provide in the arguments. In this example we invoke .slice(6, 10) . 1 2 3 4 const exampleString = \"Apples are delicious!\" ; const exampleSlice = exampleString . slice ( 6 , 10 ); console . log ( exampleSlice ) // => \"are\" When we count the positions in strings, we must remember that they are 0 indexed . This means that the first position of a string is 0, the second position is 1, the third position is 2 and so forth. Because of this, the indexes in the example above are: exampleString[0] = \"A\" , exampleString[1] = \"p\" , exampleString[4] = \"e\" , exampleString[6] = \" \" , exampleString[9] = \"e\" , exampleString[11] = \"d\" So slice(7,13) will return the characters from the indexes between 7 and 13. Pop that code into a Repl.it and play to make sure you understand 0 indexed .","title":"A Short List of Common String Methods"},{"location":"module-1/typeString/#bracket-notation","text":"We just did something back there with the [] that helped us access the values of the string. Let's take a look at that. With lists of items like a string or arrays we can access any position we want using bracket notation , [] , because each of the positions are indexed . So if we want to get the \"!\" in the \"Apples are delicious!\" string example, we would write: exampleString[20] which will return \"!\" . Try it yourself if you don't believe me. Because the positions are indexed, we can also loop over each position with a for loop just like we would with an Array, as you'll do in Pig Latin: 1 2 3 4 5 6 7 8 9 10 11 12 // create an example string to play with const myString = \"Love\" // create a function that will loop over ANY string given to it const anExampleForLoop = ( str ) => { for ( let i = 0 ; i < str . length ; i ++ ) { console . log ( str [ i ]) } } // pass the string into the function anExampleForLoop ( myString ) In the example above, we created a for loop that: sets i to be 0 so we can access the first position of the string then continues to move forward as long as i is less than the length of myString or, in the scope of the function: str each time it loops, the value of i is increased by 1: i++ during each loop it logs to the console the character in the current position of str[i] The expected return of this code snippet should be: 1 2 3 4 L O V E","title":"Bracket-Notation"},{"location":"module-1/typeString/#try-it-yourself","text":"Throw it into a REPL.IT ! The great thing about bracket notation is that you can use variables inside the [] just like the i you see above. In that example, i is a variable. We don't know the value of it at any given point but we assume it will be 0, then 1, then 2, then 3. Simple rule to live by: If you need to use a variable or a number to access a position of something, you will need to use [] and not ..","title":"Try it Yourself!!"},{"location":"module-1/typeString/#know-your-docs","text":"MDN Docs - Type String Article - Dot- vs Bracket-Notation","title":"Know Your Docs"},{"location":"module-2/bindThis/","text":"Objects, JSON, .bind() & this Success means doing the best we can with what we have. Success is the doing, not the getting; in the trying, not the triumph. Success is a personal standard, reaching for the highest that is in us, becoming all that we can be.\u2003\u2014Zig Ziglar JSON/Objects & Arrays pt. 2 Objects and arrays are both used to store data in different ways. Later in this course we'll be making fetch requests to web APIs that are connected to a database. These fetch requests will return data we can use to render on our websites. Most data that is returned from the database will be a complex data structure of nested objects and arrays. When working with JavaScript and a front-end web app we'll be dealing with data in the format of JSON or JavaScript Object Notation . Below is a common looking JSON Object you might receive from a fetch request. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 { \"firstName\" : \"John\" , \"lastName\" : \"Smith\" , \"isAlive\" : true , \"age\" : 27 , \"address\" : { \"streetAddress\" : \"21 2nd Street\" , \"city\" : \"New York\" , \"state\" : \"NY\" , \"postalCode\" : \"10021-3100\" }, \"phoneNumbers\" : [ { \"type\" : \"home\" , \"number\" : \"212 555-1234\" }, { \"type\" : \"office\" , \"number\" : \"646 555-4567\" } ], \"children\" : [], \"spouse\" : null } // source: https://en.wikipedia.org/wiki/JSON Notice the \"\" around the keys . This is a major distinction in syntax between JSON and JavaScript. Accessing data in complex data structures is one of the most important tasks in front-end development and the first step in receiving data from the backend and displaying it to the user. Take a look at the JSON object in this example link and see if you know how to access each object, its product_name and unit_cost . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 [{ \"_id\" : { \"$oid\" : \"5968dd23fc13ae04d9000001\" }, \"product_name\" : \"sildenafil citrate\" , \"supplier\" : \"Wisozk Inc\" , \"quantity\" : 261 , \"unit_cost\" : \"$10.47\" }, { \"_id\" : { \"$oid\" : \"5968dd23fc13ae04d9000002\" }, \"product_name\" : \"Mountain Juniperus ashei\" , \"supplier\" : \"Keebler-Hilpert\" , \"quantity\" : 292 , \"unit_cost\" : \"$8.74\" }, { \"_id\" : { \"$oid\" : \"5968dd23fc13ae04d9000003\" }, \"product_name\" : \"Dextromathorphan HBr\" , \"supplier\" : \"Schmitt-Weissnat\" , \"quantity\" : 211 , \"unit_cost\" : \"$20.53\" }] Try it. Store it in a variable in a repl.it and see if you can log the values to the console. Accessing Large Objects When accessing complex data structures, keep in mind the structure that you are accessing and what the return will be. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 const userObj = { likes : [ { id : 1 , name : 'basketball' }, { id : 2 , name : 'football' }, { id : 3 , name : 'cooking' }, ], firstName : 'Tom' , lastName : 'Riddle' , posts : { 1 / 4 / 2018 : 'today I ate pizza' , 2 / 14 / 2018 : 'happy valentines day' , 2 / 15 / 2018 : 'its 5 o\u2019clock somewhere' } } For example, if you received the user object above from the database, and you wanted to display the user's most recent like: First you would determine what type of data structure userObj is. In this case, it\u2019s an object. To access a value, I would need the key name. For this problem, it\u2019s likes . So the first step is: userObj[\"likes\"][0] , which would return {id: 1, name: 'basketball'} The second step returns an object, which still isn\u2019t a very consumable piece of information for the user, ideally we would just show a string. So to access the name value in this object, an additional locator is needed for the name key: userObj['likes'][0]['name'] , which would return 'basketball' Sometimes, you need to display all of the information in an object by looping over every key. However, objects do not have access to the concise and convenient loops that arrays have access to. The method Object.keys() will return an array of object keys. Then you can use that returned array to loop through each of the object keys. And since the values in an object can be accessed by the key names, each time you loop through a key name, you can also access the value. For example, if I wanted to show the end user all of the posts from the userObj , first I would access the post object. userObj[\u2018posts\u2019] would return an object: 1 2 3 4 5 { 1 / 4 / 2018 : 'today I ate pizza' , 2 / 14 / 2018 : 'happy valentines day' , 2 / 15 / 2018 : 'its 5 o\u2019clock somewhere' } Object.keys(userObj[\"posts\"]) returns an array of the keys [ \"1/4/2018\",\"2/14/2018\", \"2/15/2018\"] Remember, objects are made of key-value pairs! If we use the .keys() object prototype method we will get the keys of all the key-value pairs in the objects. If we use the object prototype method .entries() , we'll get the values of all the key-value pairs in the object. A forEach loop is the best option to use here. It has decreased scope, simplified syntax, and doesn\u2019t have the possibility of an infinite loop. 1 2 3 4 5 6 7 8 9 10 Object . keys ( userObj [ \u2018 posts \u2019 ]). forEach (( key ) => { console . log ( key ) }); // I am using key as the variable name because I want to be as descriptive as possible. // This would print out in the console: // 1/4/2018 // 2/14/2018 // 2/15/2018 Because I have both the key and the object, I can also gain access to the value associated: 1 2 3 4 5 6 7 8 9 Object . keys ( userObj [ \"posts\" ]). forEach (( key ) => { console . log ( `The key is ${ key } , and the post is: ${ userObj [ \"posts\" ][ key ] } ` ) }) // This would print out in the console => // The key is 1/4/2018, and the post is: today I ate pizza // The key is 2/14/2018, and the post is: happy valentines day // The key is 2/15/2018, and the post is: its 5 o\u2019clock somewhere Before you finish up here, make sure to watch the videos in the Additional Resources .bind() & this from MDN, The .bind() method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called. from MDN, this : ES5 introduced the bind() method to set the value of a function's this regardless of how it's called, and ES2015 introduced arrow functions which don't provide their own this binding (they retain the this value of the enclosing lexical context ). this and .bind() are complex ideas. However they are concepts we must accept, understand and use if we want to grow in our programming abilities with JavaScript as our scripting language. Today we'll simply scratch the surface of these two topics in preparation of our next two weeks' subjects: OOP (object-oriented programming) and higher order functions. We will definitely come back to these two concepts again. For a short summary, think of this as referring to this instance of where the function is called. Inside the object it refers to this instance. Think of .bind() as forcing or binding a variable to a specific function regardless of instance. For now, think of JavaScript as a beautiful mix of OOP and functional language, and watch the following video by MPJ. Video FunFunFunction - bind & this Practice It Copy/paste the following code into a Repl.it and run it. Then follow the instructions in the comments at the bottom. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 const person = { firstName : \"Kevin\" , lastName : \"Colten\" , age : 29 , eyeColor : \"brown\" , talk : function () { console . log ( \"Hello!\" ); } }; console . log ( person . firstName ); console . log ( person [ \"lastName\" ]); person . talk (); // practice by creating a new object called dog // then follow the video with MPJ to recreate the scenario for making the dog bark Additional Resources Video Steve Griffith - Nested Loops with Arrays & Objects Video Hitesh Choudary - Objects in JavaScript Know Your Docs MDN Docs - Working with Objects","title":"Bind & This"},{"location":"module-2/bindThis/#objects-json-bind-this","text":"Success means doing the best we can with what we have. Success is the doing, not the getting; in the trying, not the triumph. Success is a personal standard, reaching for the highest that is in us, becoming all that we can be.\u2003\u2014Zig Ziglar","title":"Objects, JSON, .bind() &amp; this"},{"location":"module-2/bindThis/#jsonobjects-arrays-pt-2","text":"Objects and arrays are both used to store data in different ways. Later in this course we'll be making fetch requests to web APIs that are connected to a database. These fetch requests will return data we can use to render on our websites. Most data that is returned from the database will be a complex data structure of nested objects and arrays. When working with JavaScript and a front-end web app we'll be dealing with data in the format of JSON or JavaScript Object Notation . Below is a common looking JSON Object you might receive from a fetch request. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 { \"firstName\" : \"John\" , \"lastName\" : \"Smith\" , \"isAlive\" : true , \"age\" : 27 , \"address\" : { \"streetAddress\" : \"21 2nd Street\" , \"city\" : \"New York\" , \"state\" : \"NY\" , \"postalCode\" : \"10021-3100\" }, \"phoneNumbers\" : [ { \"type\" : \"home\" , \"number\" : \"212 555-1234\" }, { \"type\" : \"office\" , \"number\" : \"646 555-4567\" } ], \"children\" : [], \"spouse\" : null } // source: https://en.wikipedia.org/wiki/JSON Notice the \"\" around the keys . This is a major distinction in syntax between JSON and JavaScript. Accessing data in complex data structures is one of the most important tasks in front-end development and the first step in receiving data from the backend and displaying it to the user. Take a look at the JSON object in this example link and see if you know how to access each object, its product_name and unit_cost . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 [{ \"_id\" : { \"$oid\" : \"5968dd23fc13ae04d9000001\" }, \"product_name\" : \"sildenafil citrate\" , \"supplier\" : \"Wisozk Inc\" , \"quantity\" : 261 , \"unit_cost\" : \"$10.47\" }, { \"_id\" : { \"$oid\" : \"5968dd23fc13ae04d9000002\" }, \"product_name\" : \"Mountain Juniperus ashei\" , \"supplier\" : \"Keebler-Hilpert\" , \"quantity\" : 292 , \"unit_cost\" : \"$8.74\" }, { \"_id\" : { \"$oid\" : \"5968dd23fc13ae04d9000003\" }, \"product_name\" : \"Dextromathorphan HBr\" , \"supplier\" : \"Schmitt-Weissnat\" , \"quantity\" : 211 , \"unit_cost\" : \"$20.53\" }] Try it. Store it in a variable in a repl.it and see if you can log the values to the console.","title":"JSON/Objects &amp; Arrays pt. 2"},{"location":"module-2/bindThis/#accessing-large-objects","text":"When accessing complex data structures, keep in mind the structure that you are accessing and what the return will be. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 const userObj = { likes : [ { id : 1 , name : 'basketball' }, { id : 2 , name : 'football' }, { id : 3 , name : 'cooking' }, ], firstName : 'Tom' , lastName : 'Riddle' , posts : { 1 / 4 / 2018 : 'today I ate pizza' , 2 / 14 / 2018 : 'happy valentines day' , 2 / 15 / 2018 : 'its 5 o\u2019clock somewhere' } } For example, if you received the user object above from the database, and you wanted to display the user's most recent like: First you would determine what type of data structure userObj is. In this case, it\u2019s an object. To access a value, I would need the key name. For this problem, it\u2019s likes . So the first step is: userObj[\"likes\"][0] , which would return {id: 1, name: 'basketball'} The second step returns an object, which still isn\u2019t a very consumable piece of information for the user, ideally we would just show a string. So to access the name value in this object, an additional locator is needed for the name key: userObj['likes'][0]['name'] , which would return 'basketball' Sometimes, you need to display all of the information in an object by looping over every key. However, objects do not have access to the concise and convenient loops that arrays have access to. The method Object.keys() will return an array of object keys. Then you can use that returned array to loop through each of the object keys. And since the values in an object can be accessed by the key names, each time you loop through a key name, you can also access the value. For example, if I wanted to show the end user all of the posts from the userObj , first I would access the post object. userObj[\u2018posts\u2019] would return an object: 1 2 3 4 5 { 1 / 4 / 2018 : 'today I ate pizza' , 2 / 14 / 2018 : 'happy valentines day' , 2 / 15 / 2018 : 'its 5 o\u2019clock somewhere' } Object.keys(userObj[\"posts\"]) returns an array of the keys [ \"1/4/2018\",\"2/14/2018\", \"2/15/2018\"] Remember, objects are made of key-value pairs! If we use the .keys() object prototype method we will get the keys of all the key-value pairs in the objects. If we use the object prototype method .entries() , we'll get the values of all the key-value pairs in the object. A forEach loop is the best option to use here. It has decreased scope, simplified syntax, and doesn\u2019t have the possibility of an infinite loop. 1 2 3 4 5 6 7 8 9 10 Object . keys ( userObj [ \u2018 posts \u2019 ]). forEach (( key ) => { console . log ( key ) }); // I am using key as the variable name because I want to be as descriptive as possible. // This would print out in the console: // 1/4/2018 // 2/14/2018 // 2/15/2018 Because I have both the key and the object, I can also gain access to the value associated: 1 2 3 4 5 6 7 8 9 Object . keys ( userObj [ \"posts\" ]). forEach (( key ) => { console . log ( `The key is ${ key } , and the post is: ${ userObj [ \"posts\" ][ key ] } ` ) }) // This would print out in the console => // The key is 1/4/2018, and the post is: today I ate pizza // The key is 2/14/2018, and the post is: happy valentines day // The key is 2/15/2018, and the post is: its 5 o\u2019clock somewhere Before you finish up here, make sure to watch the videos in the Additional Resources","title":"Accessing Large Objects"},{"location":"module-2/bindThis/#bind-this","text":"from MDN, The .bind() method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called. from MDN, this : ES5 introduced the bind() method to set the value of a function's this regardless of how it's called, and ES2015 introduced arrow functions which don't provide their own this binding (they retain the this value of the enclosing lexical context ). this and .bind() are complex ideas. However they are concepts we must accept, understand and use if we want to grow in our programming abilities with JavaScript as our scripting language. Today we'll simply scratch the surface of these two topics in preparation of our next two weeks' subjects: OOP (object-oriented programming) and higher order functions. We will definitely come back to these two concepts again. For a short summary, think of this as referring to this instance of where the function is called. Inside the object it refers to this instance. Think of .bind() as forcing or binding a variable to a specific function regardless of instance. For now, think of JavaScript as a beautiful mix of OOP and functional language, and watch the following video by MPJ. Video FunFunFunction - bind & this","title":".bind() &amp; this"},{"location":"module-2/bindThis/#practice-it","text":"Copy/paste the following code into a Repl.it and run it. Then follow the instructions in the comments at the bottom. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 const person = { firstName : \"Kevin\" , lastName : \"Colten\" , age : 29 , eyeColor : \"brown\" , talk : function () { console . log ( \"Hello!\" ); } }; console . log ( person . firstName ); console . log ( person [ \"lastName\" ]); person . talk (); // practice by creating a new object called dog // then follow the video with MPJ to recreate the scenario for making the dog bark","title":"Practice It"},{"location":"module-2/bindThis/#additional-resources","text":"Video Steve Griffith - Nested Loops with Arrays & Objects Video Hitesh Choudary - Objects in JavaScript","title":"Additional Resources"},{"location":"module-2/bindThis/#know-your-docs","text":"MDN Docs - Working with Objects","title":"Know Your Docs"},{"location":"module-2/class-5/","text":"Class 5: Arrays & GUIs What do you do with a mistake: recognize it, admit it, learn from it, forget it. \u2014Dean Smith Greet, Outline, and Objectify Today we're going to: OBJECTIVE: By re-engaging with previously learned knowledge and applying it to a new challenge the student will deepen their understanding and be prepared to creatively reuse these techniques in new ways. Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Exercise your knowledge of arrays in Project 1 Rebuild Tic Tac Toe with a GUI Rebuild Pig Latin with a GUI Push Yourself Further Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 minutes Today you'll practice array methods, as well as attaching your Tic Tac Toe logic to an index.html file so your user can have a friendlier interaction with your applications moving forward. Part 1 of 3: Array of Cars Practice Clone ArrayOfCars Repo . Go to the README.md file and follow the directions Part 2 of 3: TTT GUI Students will build the Tic Tac Toe application again but this time using the logic built in the last class. Begin by whiteboarding and code planning the application. Open your Tic Tac Toe app from last week. From the master branch, create a new branch called: 'TicTacToe-GUI' Use the project you built in Web 101 as a reference, but now build it with the idea of logic first then front-end representation. How do you get your HTML file to talk to your JS file? Part 3 of 3: Pig Latin GUI Connect your Pig Latin application to a GUI Begin by whiteboarding and code planning the application. Open your Pig Latin app from last week. From the master / main branch, create a new branch called: PigLatin-GUI Start by making sure you have a place for the user to input a word, then a submit button, then a place for the output to be displayed. How do you get your HTML file to talk to your JS file? Additional Resources Video, DevTips - JS & the DOM 1/2 Push Yourself Further Make your app handle sentences and paragraphs at a time like this one . Student Feedback Loading\u2026 Exit Recap, Attendance, and Reminders, 5 mins Create PigLatin-GUI Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Class 5 The DOM"},{"location":"module-2/class-5/#class-5-arrays-guis","text":"What do you do with a mistake: recognize it, admit it, learn from it, forget it. \u2014Dean Smith","title":"Class 5: Arrays &amp; GUIs"},{"location":"module-2/class-5/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE: By re-engaging with previously learned knowledge and applying it to a new challenge the student will deepen their understanding and be prepared to creatively reuse these techniques in new ways. Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Exercise your knowledge of arrays in Project 1 Rebuild Tic Tac Toe with a GUI Rebuild Pig Latin with a GUI Push Yourself Further Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-2/class-5/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-2/class-5/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-2/class-5/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-2/class-5/#creation-time-60-90-minutes","text":"Today you'll practice array methods, as well as attaching your Tic Tac Toe logic to an index.html file so your user can have a friendlier interaction with your applications moving forward.","title":"Creation Time, 60-90 minutes"},{"location":"module-2/class-5/#part-1-of-3-array-of-cars-practice","text":"Clone ArrayOfCars Repo . Go to the README.md file and follow the directions","title":"Part 1 of 3: Array of Cars Practice"},{"location":"module-2/class-5/#part-2-of-3-ttt-gui","text":"Students will build the Tic Tac Toe application again but this time using the logic built in the last class. Begin by whiteboarding and code planning the application. Open your Tic Tac Toe app from last week. From the master branch, create a new branch called: 'TicTacToe-GUI' Use the project you built in Web 101 as a reference, but now build it with the idea of logic first then front-end representation. How do you get your HTML file to talk to your JS file?","title":"Part 2 of 3: TTT GUI"},{"location":"module-2/class-5/#part-3-of-3-pig-latin-gui","text":"Connect your Pig Latin application to a GUI Begin by whiteboarding and code planning the application. Open your Pig Latin app from last week. From the master / main branch, create a new branch called: PigLatin-GUI Start by making sure you have a place for the user to input a word, then a submit button, then a place for the output to be displayed. How do you get your HTML file to talk to your JS file?","title":"Part 3 of 3: Pig Latin GUI"},{"location":"module-2/class-5/#additional-resources","text":"Video, DevTips - JS & the DOM 1/2","title":"Additional Resources"},{"location":"module-2/class-5/#push-yourself-further","text":"Make your app handle sentences and paragraphs at a time like this one .","title":"Push Yourself Further"},{"location":"module-2/class-5/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-2/class-5/#exit-recap-attendance-and-reminders-5-mins","text":"Create PigLatin-GUI Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-2/class-6/","text":"Class 6: Towers Of Hanoi A person who never made a mistake never tried anything new.\u2003\u2014Albert Einstein Greet, Outline, and Objectify OBJECTIVE: By re-engaging with previously learned knowledge and applying it to a new challenge the student will deepen their understanding and be prepared to creatively reuse these techniques in new ways. Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Towers of Hanoi Git Refresher Blog to Show You Know Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Part 1: Towers Of Hanoi In class today you will whiteboard and construct your code plan with your instructor for Towers of Hanoi which is also your 1st Checkpoint. Always start with whiteboarding! Make your code plan. Work through the logic of the game. Break down to the smallest step what the computer has to do to make the Towers app work. List out the steps. Draw pictures. Write out pseudo code for your app. Translate pseudo code to JavaScript so the computer can understand it. Write in the code one block at a time, testing as you go. Place your code in the main.js file in your JS211-TowersOfHanoi . Read the README ! Off of master create a new branch called checkpoint-1 . Add your code to this branch and when you're finished turn in your pull request url. Part 2: Git Refresher Instructor will lead a discussion over Git, branching and merging. Blogs to Show You Know Every other class will end with a discussion over these questions. If you have no idea about them, ask your instructor. Nevertheless, you will need to research the topics on your own and record what you learned in a blog. You will then turn in a link with the url of the published blog in Zollege. Feel free to copy/paste the question into google and read about what comes up. These interview questions are meant to broaden your knowledge and cover more ground than we can possibly get to in these few weeks. We want you to be well prepared for the rigors of interviewing for development jobs and knowing the answers to these questions will ensure that you have every tool you need to succeed! Blog Prompts Student Feedback Loading\u2026 Exit Recap, Attendance, and Reminders, 5 mins Create Towers Of Hanoi Assignment Create 203 Blog Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Class 6 Towers Of Hanoi"},{"location":"module-2/class-6/#class-6-towers-of-hanoi","text":"A person who never made a mistake never tried anything new.\u2003\u2014Albert Einstein","title":"Class 6: Towers Of Hanoi"},{"location":"module-2/class-6/#greet-outline-and-objectify","text":"OBJECTIVE: By re-engaging with previously learned knowledge and applying it to a new challenge the student will deepen their understanding and be prepared to creatively reuse these techniques in new ways. Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Towers of Hanoi Git Refresher Blog to Show You Know Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-2/class-6/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-2/class-6/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-2/class-6/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-2/class-6/#creation-time-60-90-mins","text":"","title":"Creation Time, 60-90 mins"},{"location":"module-2/class-6/#part-1-towers-of-hanoi","text":"In class today you will whiteboard and construct your code plan with your instructor for Towers of Hanoi which is also your 1st Checkpoint. Always start with whiteboarding! Make your code plan. Work through the logic of the game. Break down to the smallest step what the computer has to do to make the Towers app work. List out the steps. Draw pictures. Write out pseudo code for your app. Translate pseudo code to JavaScript so the computer can understand it. Write in the code one block at a time, testing as you go. Place your code in the main.js file in your JS211-TowersOfHanoi . Read the README ! Off of master create a new branch called checkpoint-1 . Add your code to this branch and when you're finished turn in your pull request url.","title":"Part 1: Towers Of Hanoi"},{"location":"module-2/class-6/#part-2-git-refresher","text":"Instructor will lead a discussion over Git, branching and merging.","title":"Part 2: Git Refresher"},{"location":"module-2/class-6/#blogs-to-show-you-know","text":"Every other class will end with a discussion over these questions. If you have no idea about them, ask your instructor. Nevertheless, you will need to research the topics on your own and record what you learned in a blog. You will then turn in a link with the url of the published blog in Zollege. Feel free to copy/paste the question into google and read about what comes up. These interview questions are meant to broaden your knowledge and cover more ground than we can possibly get to in these few weeks. We want you to be well prepared for the rigors of interviewing for development jobs and knowing the answers to these questions will ensure that you have every tool you need to succeed! Blog Prompts","title":"Blogs to Show You Know"},{"location":"module-2/class-6/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-2/class-6/#exit-recap-attendance-and-reminders-5-mins","text":"Create Towers Of Hanoi Assignment Create 203 Blog Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-2/class-7/","text":"Class 7: MasterMind Step out of the history that is holding you back. Step into the new story you are willing to create. \u2014Oprah Winfrey Greet, Outline, and Objectify Today we're going to: OBJECTIVE: Deepen our understanding and appreciation for built-in higher order methods by rebuilding them ourselves and using them to solve complex problems. Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Whiteboard, code plan, and build .forEach() from scratch Whiteboard, code plan, and build MasterMind Build Tests for MasterMind Push Yourself Further Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Pt. 1 - .forEach() from Scratch When working with the many built-in methods of JavaScript or any language, it's important to know how they work internally so you are not constrained by their usage or unaware of their \"gotchyas\". Create a Repl.it and turn in the URL of it. Pt. 3 - MasterMind Mastermind is a code-breaking game, where a player tries to guess the code based on a limited amount of information given from an incorrect guess. You can play the game here . MasterMind App Specs Create a new branch called \"masterMind\" Spec 0 - Define a test solution : Helpful suggestion: while developing you can set a default solution for you to test against. At the top of mastermind() , simply set const solution = 'abcd'; as a global variable. Spec 1 - Detect a correct solution : In mastermind() , if the guess you passed in equals the solution , return 'You guessed it!'; Spec 2 - Generate a hint: generateHint() should take one argument, guess. Spec 2.1 - Split up the solution and guess : In generateHint() , create variables solutionArray and guessArray that each split up passed in arguments, [.split](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/splitting on '' (empty string). Spec 2.2 - Determine correct \"letter-locations\" : Create a variable correctLetterLocations and set it to 0 . This variable will record how many correct \"letter-locations\" were guessed. For instance, a guess of aabc against a solution of deba would yield one correct \"letter-location\" (b). In a for loop, iterate over the solutionArray, comparing each index of solutionArray against the same index of guessArray . If the item matches, increment correctLetterLocations , and set that index in solutionArray to null . Spec 2.3 - Determine correct \"letters\" : Now that we have null ed the already counted correctLetterLocations , we can see if the guessArray contains any correctLetters that were not in the correct location. Set a variable correctLetters equal to 0 , and in a for loop, again iterate over the solutionArray . Using . indexOf , determine if the item at the current index in guessArray appears inside of solutionArray . Save that index in a variable called targetIndex . Now, if targetIndex is greater than -1 (it exists in the array), increment correctLetters and set the item in solutionArray at that index equal to null . Spec 2.4 - return hint string : Optionally, you can use the colors package , return a string that prints out the hints you generated, with correctLetterLocations being red, correctLetters being white, and separated by a hyphen. > (NOTE: If you choose to use this color package, only console.log the result. If you return the result your program will fail the tests.) Spec 3 - Add guess and hint to the board : Define a variable called hint that collects the returned value of generateHint(guess) . .push the guess and the hint (as a combined string) into the board. Spec 4 - End the game : After 10 incorrect guesses, if the board length equals 10 , return 'You ran out of turns! The solution was ' and the solution . Otherwise, return 'Guess again.' . Additional Resources Video, Lydia Hallie - map, filter, reduce Video, pressmantoy - How to Play Mastermind Push Yourself Further Create a .map() function from scratch in a Repl.it Create a .reduce() function from scratch in a Repl.it Make a GUI representation for your MasterMind logic. Student Feedback Loading\u2026 Exit Recap, Attendance, and Reminders, 5 mins Create MasterMind Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Class 7 MasterMind"},{"location":"module-2/class-7/#class-7-mastermind","text":"Step out of the history that is holding you back. Step into the new story you are willing to create. \u2014Oprah Winfrey","title":"Class 7: MasterMind"},{"location":"module-2/class-7/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE: Deepen our understanding and appreciation for built-in higher order methods by rebuilding them ourselves and using them to solve complex problems. Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Whiteboard, code plan, and build .forEach() from scratch Whiteboard, code plan, and build MasterMind Build Tests for MasterMind Push Yourself Further Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-2/class-7/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-2/class-7/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-2/class-7/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-2/class-7/#creation-time-60-90-mins","text":"","title":"Creation Time, 60-90 mins"},{"location":"module-2/class-7/#pt-1-foreach-from-scratch","text":"When working with the many built-in methods of JavaScript or any language, it's important to know how they work internally so you are not constrained by their usage or unaware of their \"gotchyas\". Create a Repl.it and turn in the URL of it.","title":"Pt. 1 - .forEach() from Scratch"},{"location":"module-2/class-7/#pt-3-mastermind","text":"Mastermind is a code-breaking game, where a player tries to guess the code based on a limited amount of information given from an incorrect guess. You can play the game here .","title":"Pt. 3 - MasterMind"},{"location":"module-2/class-7/#mastermind-app-specs","text":"Create a new branch called \"masterMind\" Spec 0 - Define a test solution : Helpful suggestion: while developing you can set a default solution for you to test against. At the top of mastermind() , simply set const solution = 'abcd'; as a global variable. Spec 1 - Detect a correct solution : In mastermind() , if the guess you passed in equals the solution , return 'You guessed it!'; Spec 2 - Generate a hint: generateHint() should take one argument, guess. Spec 2.1 - Split up the solution and guess : In generateHint() , create variables solutionArray and guessArray that each split up passed in arguments, [.split](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/splitting on '' (empty string). Spec 2.2 - Determine correct \"letter-locations\" : Create a variable correctLetterLocations and set it to 0 . This variable will record how many correct \"letter-locations\" were guessed. For instance, a guess of aabc against a solution of deba would yield one correct \"letter-location\" (b). In a for loop, iterate over the solutionArray, comparing each index of solutionArray against the same index of guessArray . If the item matches, increment correctLetterLocations , and set that index in solutionArray to null . Spec 2.3 - Determine correct \"letters\" : Now that we have null ed the already counted correctLetterLocations , we can see if the guessArray contains any correctLetters that were not in the correct location. Set a variable correctLetters equal to 0 , and in a for loop, again iterate over the solutionArray . Using . indexOf , determine if the item at the current index in guessArray appears inside of solutionArray . Save that index in a variable called targetIndex . Now, if targetIndex is greater than -1 (it exists in the array), increment correctLetters and set the item in solutionArray at that index equal to null . Spec 2.4 - return hint string : Optionally, you can use the colors package , return a string that prints out the hints you generated, with correctLetterLocations being red, correctLetters being white, and separated by a hyphen. > (NOTE: If you choose to use this color package, only console.log the result. If you return the result your program will fail the tests.) Spec 3 - Add guess and hint to the board : Define a variable called hint that collects the returned value of generateHint(guess) . .push the guess and the hint (as a combined string) into the board. Spec 4 - End the game : After 10 incorrect guesses, if the board length equals 10 , return 'You ran out of turns! The solution was ' and the solution . Otherwise, return 'Guess again.' .","title":"MasterMind App Specs"},{"location":"module-2/class-7/#additional-resources","text":"Video, Lydia Hallie - map, filter, reduce Video, pressmantoy - How to Play Mastermind","title":"Additional Resources"},{"location":"module-2/class-7/#push-yourself-further","text":"Create a .map() function from scratch in a Repl.it Create a .reduce() function from scratch in a Repl.it Make a GUI representation for your MasterMind logic.","title":"Push Yourself Further"},{"location":"module-2/class-7/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-2/class-7/#exit-recap-attendance-and-reminders-5-mins","text":"Create MasterMind Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-2/class-8/","text":"Class 8: Loops, find(), findIndex() Everything you\u2019ve ever wanted is on the other side of fear.\u2003\u2014George Addair Greet, Outline, and Objectify Today we're going to: OBJECTIVE: Build higher order functions from scratch to learn from creative and effective patterns while strengthening our ability to communicate in code. Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Loops .find( ) from scratch .findIndex() from scratch Push Yourself Further Interview Questions - BlogPost_204 Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Instructor to Demonstrate with Examples, Explain and Set Expectations Group Students in 3s plan and implements Partner with other groups for elaboration Share with the class for evaluation (potentially carry into the next class) By now you should be fairly familiar with loops; however, you can never get enough practice! Loops are used all the time and you should get used to using them and very comfortable with implementing them. Create a new repo & Clone it Create a branch called loops off of master . Complete each of the following exercises: Use a do...while loop to console.log the numbers from 1 to 1000. Create an object (with keys and values) called person with the following data: firstName: \"Jane\", lastName: \"Doe\", birthDate: \"Jan 5, 1925\", gender: \"female\" Create a function that logs out the keys of the object using Object.keys() . Create a function that logs out the keys and values of the object using Object.entries() . Create an arrayOfPersons that contains multiple \"people\" objects. You can simply copy/paste the person object you made above multiple times. Feel free to change the values to reflect multiple people you might have in your database. Create a function that uses a for...of loop and an if statement to console.log the value associated with the key birthDate of each object if the birth year is an odd number. Use .map() to map over the arrayOfPersons and console.log() their information. Use .filter() to filter the persons array and console.log 0only males in the array. Create a function that returns true if the value of birthDate is before Jan 1, 1990. Use .filter() to filter the persons array and console.log only people that were born before Jan 1, 1990. BONUS - Create a function that returns true if the date passed to it is >= 21 years in the past. BONUS - .filter() out the people in the array who are younger than 21. Pt. 2 - From Scratch .find() & .findIndex() Whiteboard Code plan Pseudo code JavaScript code in a Repl.it for both functions Turn in URL of Repl.it Resources YT, dcode - .find() YT, dcode - .findIndex() Push Yourself Further When searching for specific data, regular expression or RegEx is a useful tool to know how to use. Paired with the methods you've been practicing lately, you will be a JavaScript ninja in no time. We're only going to introduce RegEx briefly. It's a subject for you to truly learn only on your own. This is by no means a requirement to pass this course or to graduate. But eventually you will want to know and use RegEx professionally. Do yourself a favor and add reading and practicing RegEx to your daily exercises. 1 2 3 4 5 var re = /p+l/ ; const re = new RegEx ( 'p+l' ) // the two expressions above both match the 'ppl' in 'apple' and the 'pl' in 'people' // the '+' looks for one or as many instances of the character that precedes it. In this case it's 'p'. Solve this problem in a Repl.it Additional Resources YT, DevTips - RegEx Tool - MDN RegEx Cheatsheet Tool - RegEx Pal Tool - RegExr Practice - RegEx on HackerRank Student Feedback Loading\u2026 Blogs to Show You Know Blog Prompts Exit Recap, Attendance, and Reminders, 5 mins Create Loop Practice Assignment Create Scratch: Find & FindIndex Assignment Create 204 Blog Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Class 8 find & findIndex"},{"location":"module-2/class-8/#class-8-loops-find-findindex","text":"Everything you\u2019ve ever wanted is on the other side of fear.\u2003\u2014George Addair","title":"Class 8: Loops, find(), findIndex()"},{"location":"module-2/class-8/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE: Build higher order functions from scratch to learn from creative and effective patterns while strengthening our ability to communicate in code. Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Loops .find( ) from scratch .findIndex() from scratch Push Yourself Further Interview Questions - BlogPost_204 Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-2/class-8/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-2/class-8/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-2/class-8/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-2/class-8/#creation-time-60-90-mins","text":"Instructor to Demonstrate with Examples, Explain and Set Expectations Group Students in 3s plan and implements Partner with other groups for elaboration Share with the class for evaluation (potentially carry into the next class) By now you should be fairly familiar with loops; however, you can never get enough practice! Loops are used all the time and you should get used to using them and very comfortable with implementing them. Create a new repo & Clone it Create a branch called loops off of master . Complete each of the following exercises: Use a do...while loop to console.log the numbers from 1 to 1000. Create an object (with keys and values) called person with the following data: firstName: \"Jane\", lastName: \"Doe\", birthDate: \"Jan 5, 1925\", gender: \"female\" Create a function that logs out the keys of the object using Object.keys() . Create a function that logs out the keys and values of the object using Object.entries() . Create an arrayOfPersons that contains multiple \"people\" objects. You can simply copy/paste the person object you made above multiple times. Feel free to change the values to reflect multiple people you might have in your database. Create a function that uses a for...of loop and an if statement to console.log the value associated with the key birthDate of each object if the birth year is an odd number. Use .map() to map over the arrayOfPersons and console.log() their information. Use .filter() to filter the persons array and console.log 0only males in the array. Create a function that returns true if the value of birthDate is before Jan 1, 1990. Use .filter() to filter the persons array and console.log only people that were born before Jan 1, 1990. BONUS - Create a function that returns true if the date passed to it is >= 21 years in the past. BONUS - .filter() out the people in the array who are younger than 21.","title":"Creation Time, 60-90 mins"},{"location":"module-2/class-8/#pt-2-from-scratch-find-findindex","text":"Whiteboard Code plan Pseudo code JavaScript code in a Repl.it for both functions Turn in URL of Repl.it","title":"Pt. 2 - From Scratch .find() &amp; .findIndex()"},{"location":"module-2/class-8/#resources","text":"YT, dcode - .find() YT, dcode - .findIndex()","title":"Resources"},{"location":"module-2/class-8/#push-yourself-further","text":"When searching for specific data, regular expression or RegEx is a useful tool to know how to use. Paired with the methods you've been practicing lately, you will be a JavaScript ninja in no time. We're only going to introduce RegEx briefly. It's a subject for you to truly learn only on your own. This is by no means a requirement to pass this course or to graduate. But eventually you will want to know and use RegEx professionally. Do yourself a favor and add reading and practicing RegEx to your daily exercises. 1 2 3 4 5 var re = /p+l/ ; const re = new RegEx ( 'p+l' ) // the two expressions above both match the 'ppl' in 'apple' and the 'pl' in 'people' // the '+' looks for one or as many instances of the character that precedes it. In this case it's 'p'. Solve this problem in a Repl.it","title":"Push Yourself Further"},{"location":"module-2/class-8/#additional-resources","text":"YT, DevTips - RegEx Tool - MDN RegEx Cheatsheet Tool - RegEx Pal Tool - RegExr Practice - RegEx on HackerRank","title":"Additional Resources"},{"location":"module-2/class-8/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-2/class-8/#blogs-to-show-you-know","text":"Blog Prompts","title":"Blogs to Show You Know"},{"location":"module-2/class-8/#exit-recap-attendance-and-reminders-5-mins","text":"Create Loop Practice Assignment Create Scratch: Find & FindIndex Assignment Create 204 Blog Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-2/developSeries-FixTheExhaustedBrain/","text":"How to fix the exhausted brain | Brady Wilson Class 6 - How to fix the exhausted brain | Brady Wilson","title":"Develop - Exhausted Brain"},{"location":"module-2/developSeries-FixTheExhaustedBrain/#how-to-fix-the-exhausted-brain-brady-wilson","text":"Class 6 - How to fix the exhausted brain | Brady Wilson","title":"How to fix the exhausted brain | Brady Wilson"},{"location":"module-2/developSeries-MillennialWeakness/","text":"Millennials in the Workforce, A Generation of Weakness - Simon Sinek Class 7 - Millennials in the Workforce, A Generation of Weakness - Simon Sinek","title":"Develop - Millennial Weakness"},{"location":"module-2/developSeries-MillennialWeakness/#millennials-in-the-workforce-a-generation-of-weakness-simon-sinek","text":"Class 7 - Millennials in the Workforce, A Generation of Weakness - Simon Sinek","title":"Millennials in the Workforce, A Generation of Weakness - Simon Sinek"},{"location":"module-2/developSeries-StopThinking/","text":"What if you Stopped Thinking All the Time? Wim Hof","title":"Develop - Stop Thinking"},{"location":"module-2/developSeries-StopThinking/#what-if-you-stopped-thinking-all-the-time-wim-hof","text":"","title":"What if you Stopped Thinking All the Time? Wim Hof"},{"location":"module-2/higherOrderFunctions-pt1/","text":"Higher Order Functions pt. 1 If you set goals and go after them with all the determination you can muster, your gifts will take you places that will amaze you \u2014Les Brown Why You have already learned about arrays and array methods. Some of the most commonly used array methods are higher-order functions, or functions that take another function as one of their parameters. These functions are useful because they make your code more concise and easier to understand. Higher Order Functions(Methods) Intro There are many higher-order functions built into JavaScript that help make our code efficient, readable and reusable. For now, we will discuss three array methods that are higher-order functions: Array.prototype.forEach, Array.prototype.map , and Array.prototype.filter . As you begin to create more complex programs and work with single page applications such as React and Angular, these will be some of the most frequently used methods in your code. Array.prototype.forEach() The .forEach() method can be called on any array. The prototype you see is just the basis of the array in the language of JavaScript. For now, don't worry or focus your attention on prototype, this is something you can figure out later. It is irrelevant at the moment. .forEach() takes a callback function as its only parameter. This function iterates through all of the values in an array and uses the callback function passed to it to do something with the value. If you have ever used a for loop that looks something like this: for (let i = 0; i < arr.length; i++){//do something} then you have essentially created the functionality of a forEach loop in long-hand. Here is an example of a forEach loop: 1 2 3 4 5 const colors = [ 'orange' , 'red' , 'blue' , 'yellow' , 'green' , 'purple' ]; colors . forEach (( color ) => { console . log ( `My favorite color is ${ color } ` ); }); Copy/paste the above code into a Repl.it and run it. You will notice that a sentence starting with \"My favorite color is\" gets logged to the console one time for each value in the array. Unlike the other two higher-order functions you will learn about in today's prep work, forEach will never be assigned to a new variable because it always returns undefined. Also notice the () => {} inside the () of the .forEach() . This () => {} is an anonymous function passed to the forEach. The parameter inside the () of the () => {} like color in the above example represents the individual element in the array as the forEach loops through the array. Array.prototype.map() The .map() method of an array is used to create a new array that is, in some way, a transformation of an existing array. Similarly to a forEach loop, it takes a callback function , () => {} , as its only parameter and passes every value/element in the array into the callback function. In the new array returned by the map method, each new value is assigned to be equal to whatever the callback function returns when passed the original value. Let's look at an example of a map function in action: 1 2 3 4 5 6 7 const colors = [ 'orange' , 'red' , 'blue' , 'yellow' , 'green' , 'purple' ]; const tieDyes = colors . map (( color ) => { return `tieDyed- ${ color } ` ; }); console . log ( tieDyes ); Run the above code in a Repl.it. Notice that what is stored in the tieDye variable is an array that is equal in length to the colors array, but each value from the color array has been transformed to start with \"tieDyed-\" and end with the original color. If you will look at the code, you will see this is exactly what is returned in the callback function passed to colors.map . Video FunFunFunction - .map() Array.prototype.filter() The . filter() method does exactly what it sounds like it would do. It iterates through an array and returns only values that follow a specified rule. The filter method is passed a callback function as its only parameter. The filter method returns a new array by passing each value in the original array into the callback function. If the callback function returns true or any truthy value, that value is included in the new array, but if the callback function returns false or any falsy value, that value is not included in the new array. If all of the values passed into the callback function return a falsy value, then the filter method returns an empty array: [] . Let's look at an example of the filter method: 1 2 3 4 5 6 7 const colors = [ 'orange' , 'red' , 'blue' , 'yellow' , 'green' , 'purple' ]; const sixOrMore = colors . filter (( color ) => { return color . length > 5 ; }); console . log ( sixOrMore ); //=> ['orange', 'yellow', 'purple'] Copy the above code and run it in a Repl.it. Notice that the new array is not equal in length to the original array. This is because the new array only included values which passed the test of containing strings with a length greater than five. For all of the words with five or fewer letters the callback function returned false and thus the values were not included in the new array. Before moving on make sure you watch the video Functional Programming w/Anjana Vakil , in the Additional Resources ! Video FunFunFunction - .filter() Practice It - pt. 1 Go to the CodePen below, click the top-right corner. Fork it to your account. If not already collapsed, drag the HTML and CSS windows to the left so you're only looking at the JS file. Follow the instructions in the comment lines in the JS file. See the Pen Higher-Order Functions Part I - Practice by Keith ( @kdybvig ) on CodePen . Practice It - pt. 2 in a Repl.it... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 forEach const colors = [ 'orange' , 'red' , 'blue' , 'yellow' , 'green' , 'purple' ]; // build a function that returns the sentence: \"The color we're on right now is: orange\" // remember to invoke the function map const users = [ 'Olivia' , 'Victoria' , 'Paulina' , 'Yolanda' , 'Georgina' , 'Bill' ]; // Build a function that return the sentence: `The user's name is: ${name}` // remember to invoke the function filter const colors = [ 'peaceful' , 'red' , 'ants' , 'lovely' , 'bud' , 'witness' , 'purple' , 'clouds' ]; // build a function that only returns words that are less than 4 letters in length // remember to invoke the function Additional Resources Video Traversy - JS Higher Order Functions + Arrays Video JS Conf - Functional Programming w/Anjana Vakil Know Your Docs MDN Docs - filter() Method MDN Docs - forEach() Method MDN Docs - map() Method","title":"HOF pt. 1"},{"location":"module-2/higherOrderFunctions-pt1/#higher-order-functions-pt-1","text":"If you set goals and go after them with all the determination you can muster, your gifts will take you places that will amaze you \u2014Les Brown","title":"Higher Order Functions pt. 1"},{"location":"module-2/higherOrderFunctions-pt1/#why","text":"You have already learned about arrays and array methods. Some of the most commonly used array methods are higher-order functions, or functions that take another function as one of their parameters. These functions are useful because they make your code more concise and easier to understand.","title":"Why"},{"location":"module-2/higherOrderFunctions-pt1/#higher-order-functionsmethods-intro","text":"There are many higher-order functions built into JavaScript that help make our code efficient, readable and reusable. For now, we will discuss three array methods that are higher-order functions: Array.prototype.forEach, Array.prototype.map , and Array.prototype.filter . As you begin to create more complex programs and work with single page applications such as React and Angular, these will be some of the most frequently used methods in your code.","title":"Higher Order Functions(Methods) Intro"},{"location":"module-2/higherOrderFunctions-pt1/#arrayprototypeforeach","text":"The .forEach() method can be called on any array. The prototype you see is just the basis of the array in the language of JavaScript. For now, don't worry or focus your attention on prototype, this is something you can figure out later. It is irrelevant at the moment. .forEach() takes a callback function as its only parameter. This function iterates through all of the values in an array and uses the callback function passed to it to do something with the value. If you have ever used a for loop that looks something like this: for (let i = 0; i < arr.length; i++){//do something} then you have essentially created the functionality of a forEach loop in long-hand. Here is an example of a forEach loop: 1 2 3 4 5 const colors = [ 'orange' , 'red' , 'blue' , 'yellow' , 'green' , 'purple' ]; colors . forEach (( color ) => { console . log ( `My favorite color is ${ color } ` ); }); Copy/paste the above code into a Repl.it and run it. You will notice that a sentence starting with \"My favorite color is\" gets logged to the console one time for each value in the array. Unlike the other two higher-order functions you will learn about in today's prep work, forEach will never be assigned to a new variable because it always returns undefined. Also notice the () => {} inside the () of the .forEach() . This () => {} is an anonymous function passed to the forEach. The parameter inside the () of the () => {} like color in the above example represents the individual element in the array as the forEach loops through the array.","title":"Array.prototype.forEach()"},{"location":"module-2/higherOrderFunctions-pt1/#arrayprototypemap","text":"The .map() method of an array is used to create a new array that is, in some way, a transformation of an existing array. Similarly to a forEach loop, it takes a callback function , () => {} , as its only parameter and passes every value/element in the array into the callback function. In the new array returned by the map method, each new value is assigned to be equal to whatever the callback function returns when passed the original value. Let's look at an example of a map function in action: 1 2 3 4 5 6 7 const colors = [ 'orange' , 'red' , 'blue' , 'yellow' , 'green' , 'purple' ]; const tieDyes = colors . map (( color ) => { return `tieDyed- ${ color } ` ; }); console . log ( tieDyes ); Run the above code in a Repl.it. Notice that what is stored in the tieDye variable is an array that is equal in length to the colors array, but each value from the color array has been transformed to start with \"tieDyed-\" and end with the original color. If you will look at the code, you will see this is exactly what is returned in the callback function passed to colors.map . Video FunFunFunction - .map()","title":"Array.prototype.map()"},{"location":"module-2/higherOrderFunctions-pt1/#arrayprototypefilter","text":"The . filter() method does exactly what it sounds like it would do. It iterates through an array and returns only values that follow a specified rule. The filter method is passed a callback function as its only parameter. The filter method returns a new array by passing each value in the original array into the callback function. If the callback function returns true or any truthy value, that value is included in the new array, but if the callback function returns false or any falsy value, that value is not included in the new array. If all of the values passed into the callback function return a falsy value, then the filter method returns an empty array: [] . Let's look at an example of the filter method: 1 2 3 4 5 6 7 const colors = [ 'orange' , 'red' , 'blue' , 'yellow' , 'green' , 'purple' ]; const sixOrMore = colors . filter (( color ) => { return color . length > 5 ; }); console . log ( sixOrMore ); //=> ['orange', 'yellow', 'purple'] Copy the above code and run it in a Repl.it. Notice that the new array is not equal in length to the original array. This is because the new array only included values which passed the test of containing strings with a length greater than five. For all of the words with five or fewer letters the callback function returned false and thus the values were not included in the new array. Before moving on make sure you watch the video Functional Programming w/Anjana Vakil , in the Additional Resources ! Video FunFunFunction - .filter()","title":"Array.prototype.filter()"},{"location":"module-2/higherOrderFunctions-pt1/#practice-it-pt-1","text":"Go to the CodePen below, click the top-right corner. Fork it to your account. If not already collapsed, drag the HTML and CSS windows to the left so you're only looking at the JS file. Follow the instructions in the comment lines in the JS file. See the Pen Higher-Order Functions Part I - Practice by Keith ( @kdybvig ) on CodePen .","title":"Practice It - pt. 1"},{"location":"module-2/higherOrderFunctions-pt1/#practice-it-pt-2","text":"in a Repl.it... 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 forEach const colors = [ 'orange' , 'red' , 'blue' , 'yellow' , 'green' , 'purple' ]; // build a function that returns the sentence: \"The color we're on right now is: orange\" // remember to invoke the function map const users = [ 'Olivia' , 'Victoria' , 'Paulina' , 'Yolanda' , 'Georgina' , 'Bill' ]; // Build a function that return the sentence: `The user's name is: ${name}` // remember to invoke the function filter const colors = [ 'peaceful' , 'red' , 'ants' , 'lovely' , 'bud' , 'witness' , 'purple' , 'clouds' ]; // build a function that only returns words that are less than 4 letters in length // remember to invoke the function","title":"Practice It - pt. 2"},{"location":"module-2/higherOrderFunctions-pt1/#additional-resources","text":"Video Traversy - JS Higher Order Functions + Arrays Video JS Conf - Functional Programming w/Anjana Vakil","title":"Additional Resources"},{"location":"module-2/higherOrderFunctions-pt1/#know-your-docs","text":"MDN Docs - filter() Method MDN Docs - forEach() Method MDN Docs - map() Method","title":"Know Your Docs"},{"location":"module-2/higherOrderFunctions-pt2/","text":"Higher Order Functions pt. 2 Hard times don\u2019t create heroes. It is during the hard times when the \u2018hero\u2019 within us is revealed.\u2003\u2014Bob Riley Reg ular Ex pression Regular Expression is a shortcut for finding patterns in data. It looks scary at first but it's actually really easy because it, itself, follows a pattern. You can use RegEx to quickly and efficiently find keywords or characters that you would otherwise have to type out manually. While we're learning callbacks like .filter() and .reduce(), we should also learn about RegEx and start thinking about ways we can use this new tool to our advantage. What's even better? RegEx translates to all languages. Use the RegEx docs on Mozilla to figure your way through the following practice section. See It - RegEx YT, TechSith - RegEx in JS YT, Corey Shafer - How to Match Any Pattern Practice RegEx RegEx Tutorial Reduce We've covered quite a bit of ground in JavaScript so far. Think about it: you've learned how to create variables, access objects, loop over arrays, build functions, pass variables to functions, and now you're passing arrays to functions that then get passed to functions!! We have just one more higher order function to cover: .reduce() . Like the other higher order functions we learned about, .reduce() takes a callback function, but instead of an argument representing each element it's iterating over in the array, the first argument in the callback is an accumulator. This accumulator keeps up with the total value of the elements it has iterated over and the current element respective of operations you put inside the callback function. Look at the example on the Mozilla docs on .reduce() . See how the accumulator and the currentValue are added together in the callback function on line 2, then how the callback function is passed to the .reduce() function on line 5? See It - Reduce YT, FunFunFunction- Reduce Practice It - Loops, Array Methods, HOFs Copy/paste the following code into a Repl.it and make sure you know how each loop works. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // For Loop for ( let x = 1 ; x <= 10 ; x ++ ){ console . log ( x ); } // create a for loop to print out every multiple of 3 up to 100. // Do....While Loop let age = 0 ; do { age += 1 ; console . log ( \"You are \" + age + \" years old and cannot buy alcohol!\" ); } while ( age < 21 ); While Loop let grade = 0 ; while ( grade < 60 ) { grade += 10 ; console . log ( \"You have a \" + grade + \" in this class and cannot move on to the next class until your grade is higher than a 70.\" ); } .some() : In a Repl.it, build a .some() function from scratch Make sure you know the specifications of .some() Use this resource as well. .every() : In a Repl.it, build a .every() function from scratch Make sure you know the specifications of .every() Use this resource as well. .reduce() : Use a .reduce() function to add up an array of numbers Use a .reduce() function to find the product of an array of numbers Make sure you know the specifications of .reduce() Additional Resources YT, TechSith - RegEx in JS YT, Corey Shafer - How to Match Any Pattern YT, FunFunFunction - Reduce YT, Steve Griffith - JS .every() YT, Steve Griffith - JS .some()","title":"HOF pt. 2"},{"location":"module-2/higherOrderFunctions-pt2/#higher-order-functions-pt-2","text":"Hard times don\u2019t create heroes. It is during the hard times when the \u2018hero\u2019 within us is revealed.\u2003\u2014Bob Riley","title":"Higher Order Functions pt. 2"},{"location":"module-2/higherOrderFunctions-pt2/#regular-expression","text":"Regular Expression is a shortcut for finding patterns in data. It looks scary at first but it's actually really easy because it, itself, follows a pattern. You can use RegEx to quickly and efficiently find keywords or characters that you would otherwise have to type out manually. While we're learning callbacks like .filter() and .reduce(), we should also learn about RegEx and start thinking about ways we can use this new tool to our advantage. What's even better? RegEx translates to all languages. Use the RegEx docs on Mozilla to figure your way through the following practice section.","title":"Regular Expression"},{"location":"module-2/higherOrderFunctions-pt2/#see-it-regex","text":"YT, TechSith - RegEx in JS YT, Corey Shafer - How to Match Any Pattern","title":"See It - RegEx"},{"location":"module-2/higherOrderFunctions-pt2/#practice-regex","text":"RegEx Tutorial","title":"Practice RegEx"},{"location":"module-2/higherOrderFunctions-pt2/#reduce","text":"We've covered quite a bit of ground in JavaScript so far. Think about it: you've learned how to create variables, access objects, loop over arrays, build functions, pass variables to functions, and now you're passing arrays to functions that then get passed to functions!! We have just one more higher order function to cover: .reduce() . Like the other higher order functions we learned about, .reduce() takes a callback function, but instead of an argument representing each element it's iterating over in the array, the first argument in the callback is an accumulator. This accumulator keeps up with the total value of the elements it has iterated over and the current element respective of operations you put inside the callback function. Look at the example on the Mozilla docs on .reduce() . See how the accumulator and the currentValue are added together in the callback function on line 2, then how the callback function is passed to the .reduce() function on line 5?","title":"Reduce"},{"location":"module-2/higherOrderFunctions-pt2/#see-it-reduce","text":"YT, FunFunFunction- Reduce","title":"See It - Reduce"},{"location":"module-2/higherOrderFunctions-pt2/#practice-it-loops-array-methods-hofs","text":"Copy/paste the following code into a Repl.it and make sure you know how each loop works. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // For Loop for ( let x = 1 ; x <= 10 ; x ++ ){ console . log ( x ); } // create a for loop to print out every multiple of 3 up to 100. // Do....While Loop let age = 0 ; do { age += 1 ; console . log ( \"You are \" + age + \" years old and cannot buy alcohol!\" ); } while ( age < 21 ); While Loop let grade = 0 ; while ( grade < 60 ) { grade += 10 ; console . log ( \"You have a \" + grade + \" in this class and cannot move on to the next class until your grade is higher than a 70.\" ); } .some() : In a Repl.it, build a .some() function from scratch Make sure you know the specifications of .some() Use this resource as well. .every() : In a Repl.it, build a .every() function from scratch Make sure you know the specifications of .every() Use this resource as well. .reduce() : Use a .reduce() function to add up an array of numbers Use a .reduce() function to find the product of an array of numbers Make sure you know the specifications of .reduce()","title":"Practice It - Loops, Array Methods, HOFs"},{"location":"module-2/higherOrderFunctions-pt2/#additional-resources","text":"YT, TechSith - RegEx in JS YT, Corey Shafer - How to Match Any Pattern YT, FunFunFunction - Reduce YT, Steve Griffith - JS .every() YT, Steve Griffith - JS .some()","title":"Additional Resources"},{"location":"module-2/theDom/","text":"The DOM Hardships often prepare ordinary people for an extraordinary destiny. \u2014C.S. Lewis Overview In the next class you'll be creating GUI s, or Graphical User Interfaces, for your Pig Latin and Tic Tac Toe apps. So far you've built those apps with a CLI, command line interface. Be sure to brush up on your DOM knowledge and skills. The DOM (Document Object Model) is a representation of our webpage and our code in the index.html file. Think of it as a go-between. It has a memory of all the elements you've coded as well as all the texts and attributes. These \"memories\" are called nodes . The DOM represents the document as nodes and objects in an upside-down like tree so that programming languages can connect to the page to do interesting things with the elements. Therefore, each HTML tag you code is a node. Each attribute inside those tags is a node, and each text in between the tags is a node. The DOM, then, has access to all of these nodes and can do neat things with each one using built-in functions or methods. For instance, we can tell the browser to welcome the user to our website with a pop-up alert as soon as the page loads by including: <body onload=\"window.alert('Welcome to my home page!');\"> inside the opening body tag. Notice the attribute: onload ? This is just a built-in method telling the browser to do whatever is after the = when the page loads. Then, we see window that is telling the browser to access the window object of the webpage, which is the entire browser window. The . then tells the browser to go inside the window node and find something called alert() which is a built-in method. The () after the alert is how we invoke, or call, a method. To give the method/function the stuff we want it to do something with, we pass in an argument in between the ( and ) . In this case we're asking the alert() method/function to display: 'Welcome to my home page!' It's as simple as that! Try it yourself. Go to your landing page's index.html file and replace your opening body tag with this line of code: <body onload=\"window.alert('Welcome to my home page!');\"> Then try changing the text: \"Welcome to my home page!\". Run live-server and see what happens. Now google different methods you can call on for your <body/> element. Play around. Nerd out! This is how you get good! A very short, non-exhaustive, list of some of the built-in methods on the DOM: 1 2 3 4 5 6 7 8 9 10 11 12 13 document . getElementById ( id ) document . getElementsByTagName ( name ) document . createElement ( name ) parentNode . appendChild ( node ) element . innerHTML element . style . left element . setAttribute () element . getAttribute () element . addEventListener () window . content window . onload window . dump () window . scrollTo () NOTE: While you've been coding HTML elements you have been blissfully unaware of these methods...until now\u2014but now you know that every element you build comes with these and many more methods baked right in! NOTE 2: A method is actually a little more than a function. It can be invoked like a function but because it is an object on another object, the Document, it is read and stored slightly differently than a function you build. This is a pretty advanced topic, so don't worry too much about it right now. However, if you'd like to learn more, you can read this forum to get a deeper understanding. Know Your Docs MDN Docs - the DOM Additional Resources Before you move on, read the documentation over the DOM. This is a requirement! These videos are assigned learning but also might be useful during your next project. Video - JS & DOM pt. 1 Video - HTML/JS TicTacToe Practice It - Accessing the DOM Open and fork the CodePen below. Click on the button. What happens? Why? Refresh the page. Now try to change the number of rows that are created. > Hint: Look at line 16 in the JS file. Be sure to save each time you change the code. Refresh and try to change the number of columns created when you click the button. In the JS file, change the name of the function from \"generate_table()\" to \"make_a_table()\" Click the button. What happened? Why? Now look in the HTML file and change the value of \"onclick=\" from \"generate_table()\" to \"make_a_table()\" Run it. Now what happens? Do you see how the two connect? NOTE: In the CodePen, you do not see the actual links between the JS file, CSS file and the HTML file, this is happening behind the scenes. When you start writing JS, you will need to link your JS file in the head tag of your HTML, much the same way you link your CSS files. You will use something like this: <script src=\"myscripts.js\"></script> See the Pen Example: Creating a HTML table dynamically (Sample1.html) by Clayton Berger ( @hipperger ) on CodePen .","title":"The DOM"},{"location":"module-2/theDom/#the-dom","text":"Hardships often prepare ordinary people for an extraordinary destiny. \u2014C.S. Lewis","title":"The DOM"},{"location":"module-2/theDom/#overview","text":"In the next class you'll be creating GUI s, or Graphical User Interfaces, for your Pig Latin and Tic Tac Toe apps. So far you've built those apps with a CLI, command line interface. Be sure to brush up on your DOM knowledge and skills. The DOM (Document Object Model) is a representation of our webpage and our code in the index.html file. Think of it as a go-between. It has a memory of all the elements you've coded as well as all the texts and attributes. These \"memories\" are called nodes . The DOM represents the document as nodes and objects in an upside-down like tree so that programming languages can connect to the page to do interesting things with the elements. Therefore, each HTML tag you code is a node. Each attribute inside those tags is a node, and each text in between the tags is a node. The DOM, then, has access to all of these nodes and can do neat things with each one using built-in functions or methods. For instance, we can tell the browser to welcome the user to our website with a pop-up alert as soon as the page loads by including: <body onload=\"window.alert('Welcome to my home page!');\"> inside the opening body tag. Notice the attribute: onload ? This is just a built-in method telling the browser to do whatever is after the = when the page loads. Then, we see window that is telling the browser to access the window object of the webpage, which is the entire browser window. The . then tells the browser to go inside the window node and find something called alert() which is a built-in method. The () after the alert is how we invoke, or call, a method. To give the method/function the stuff we want it to do something with, we pass in an argument in between the ( and ) . In this case we're asking the alert() method/function to display: 'Welcome to my home page!' It's as simple as that! Try it yourself. Go to your landing page's index.html file and replace your opening body tag with this line of code: <body onload=\"window.alert('Welcome to my home page!');\"> Then try changing the text: \"Welcome to my home page!\". Run live-server and see what happens. Now google different methods you can call on for your <body/> element. Play around. Nerd out! This is how you get good! A very short, non-exhaustive, list of some of the built-in methods on the DOM: 1 2 3 4 5 6 7 8 9 10 11 12 13 document . getElementById ( id ) document . getElementsByTagName ( name ) document . createElement ( name ) parentNode . appendChild ( node ) element . innerHTML element . style . left element . setAttribute () element . getAttribute () element . addEventListener () window . content window . onload window . dump () window . scrollTo () NOTE: While you've been coding HTML elements you have been blissfully unaware of these methods...until now\u2014but now you know that every element you build comes with these and many more methods baked right in! NOTE 2: A method is actually a little more than a function. It can be invoked like a function but because it is an object on another object, the Document, it is read and stored slightly differently than a function you build. This is a pretty advanced topic, so don't worry too much about it right now. However, if you'd like to learn more, you can read this forum to get a deeper understanding.","title":"Overview"},{"location":"module-2/theDom/#know-your-docs","text":"MDN Docs - the DOM","title":"Know Your Docs"},{"location":"module-2/theDom/#additional-resources","text":"Before you move on, read the documentation over the DOM. This is a requirement! These videos are assigned learning but also might be useful during your next project. Video - JS & DOM pt. 1 Video - HTML/JS TicTacToe","title":"Additional Resources"},{"location":"module-2/theDom/#practice-it-accessing-the-dom","text":"Open and fork the CodePen below. Click on the button. What happens? Why? Refresh the page. Now try to change the number of rows that are created. > Hint: Look at line 16 in the JS file. Be sure to save each time you change the code. Refresh and try to change the number of columns created when you click the button. In the JS file, change the name of the function from \"generate_table()\" to \"make_a_table()\" Click the button. What happened? Why? Now look in the HTML file and change the value of \"onclick=\" from \"generate_table()\" to \"make_a_table()\" Run it. Now what happens? Do you see how the two connect? NOTE: In the CodePen, you do not see the actual links between the JS file, CSS file and the HTML file, this is happening behind the scenes. When you start writing JS, you will need to link your JS file in the head tag of your HTML, much the same way you link your CSS files. You will use something like this: <script src=\"myscripts.js\"></script> See the Pen Example: Creating a HTML table dynamically (Sample1.html) by Clayton Berger ( @hipperger ) on CodePen .","title":"Practice It - Accessing the DOM"},{"location":"module-3/algorithms-pt1/","text":"Algorithms Part One Start by doing what\u2019s necessary; then do what\u2019s possible; and suddenly you are doing the impossible.\u2003\u2014Francis of Assisi Why Algorithms? Algorithms! This is a fancy buzz word I'm sure you hear all the time. It may even strike a little fear or awe in you heart that either you don't know them or that only really smart people can build them. The truth is, an algorithm is simply a recipe. It's a list of tasks given to a computer to do in order, over and over again until the job is complete (the condition is met.) Today we're going to go over the most common and basic algorithms so you can get a feel for what they are before you start building your own and conquering the world!! See It - Algorithms Sorting Algorithms Algorithms are actually numbered and named like species of animals. Number one is bubble sort. Bubble Sort Bubble sort is the least efficient of algorithms in that it takes a longer time to do the task it accomplishes than another algorithm could do. The basis of this algorithm is that it checks to see if the number after another number is greater than the first number. If so, it moves on to the next number. If not, it switches the order and then moves to the next number. But this doesn't change the fact that the first numbers could still be greater than the ones we just switched. Because of this the computer has to loop back through the array and redo the tasks, over and over again until the entire array is in ascending (or descending) order. The video below uses Java to build this algorithm but you can do it for yourself in JavaScript. And you should in a new Repl.it. Insertion Sort With insertion sort , we start with a marker, telling us we have one number in the sort portion of the array. We then move over one number at a time to see if it's greater than the one to its left. If it's less, move it to the left of the number. We repeat this for each number in the unsorted part of the array. When the number is greater than the number it's compared to it stays in place and we grab the next unsorted number. Merge Sort For merge sort and quick sort we'll need to know something about a strange word called: recursion . We won't be covering this in class in detail for another week. For now, read this recursion article and make sure you understand that a function can call itself. In the following algorithms you'll need a function that can call itself if the condition is not met. NOTE: In this video, Rob works backwards to make sure we know how to merge two lists. Then he shows how to separate them before merging again. Quick Sort Like merge, quick sort uses a pivot element as a partition then looks at numbers to the left and right of the partition to see if they need to be moved over or not. Then it repeats the sequence on the left and right sides of the partitions. Then again and again until all the numbers are in order. BIG NOTE HERE: The woman in the video is Gayle Laakmann-McDowell . She wrote Cracking the Coding Interview which is the bible on coding interviews. Practice It Part 1: First Algorithms In a Repl.it: Build a bubble sort Build an insertion sort Part 2: JS Fundamentals We're now at a point where we'll be introducing new features and concepts of JavaScript that will then require your full understanding of how to program and code in JavaScript. To make sure you're ready for next class and the rest of 211, work through these 116 problems . Start with just the evens. Commit to solving 4 per day for the next two weeks. Put each in a new Repl.it so you have a journal and reference of your learning and code. Your future self will thank you so much for this!! Know Your Docs Geeks4Geeks - quick sort Geeks4Geeks - merge sort Geeks4Geeks - bubble sort","title":"Algorithms pt.1"},{"location":"module-3/algorithms-pt1/#algorithms-part-one","text":"Start by doing what\u2019s necessary; then do what\u2019s possible; and suddenly you are doing the impossible.\u2003\u2014Francis of Assisi","title":"Algorithms Part One"},{"location":"module-3/algorithms-pt1/#why-algorithms","text":"Algorithms! This is a fancy buzz word I'm sure you hear all the time. It may even strike a little fear or awe in you heart that either you don't know them or that only really smart people can build them. The truth is, an algorithm is simply a recipe. It's a list of tasks given to a computer to do in order, over and over again until the job is complete (the condition is met.) Today we're going to go over the most common and basic algorithms so you can get a feel for what they are before you start building your own and conquering the world!!","title":"Why Algorithms?"},{"location":"module-3/algorithms-pt1/#see-it-algorithms","text":"","title":"See It - Algorithms"},{"location":"module-3/algorithms-pt1/#sorting-algorithms","text":"Algorithms are actually numbered and named like species of animals. Number one is bubble sort.","title":"Sorting Algorithms"},{"location":"module-3/algorithms-pt1/#bubble-sort","text":"Bubble sort is the least efficient of algorithms in that it takes a longer time to do the task it accomplishes than another algorithm could do. The basis of this algorithm is that it checks to see if the number after another number is greater than the first number. If so, it moves on to the next number. If not, it switches the order and then moves to the next number. But this doesn't change the fact that the first numbers could still be greater than the ones we just switched. Because of this the computer has to loop back through the array and redo the tasks, over and over again until the entire array is in ascending (or descending) order. The video below uses Java to build this algorithm but you can do it for yourself in JavaScript. And you should in a new Repl.it.","title":"Bubble Sort"},{"location":"module-3/algorithms-pt1/#insertion-sort","text":"With insertion sort , we start with a marker, telling us we have one number in the sort portion of the array. We then move over one number at a time to see if it's greater than the one to its left. If it's less, move it to the left of the number. We repeat this for each number in the unsorted part of the array. When the number is greater than the number it's compared to it stays in place and we grab the next unsorted number.","title":"Insertion Sort"},{"location":"module-3/algorithms-pt1/#merge-sort","text":"For merge sort and quick sort we'll need to know something about a strange word called: recursion . We won't be covering this in class in detail for another week. For now, read this recursion article and make sure you understand that a function can call itself. In the following algorithms you'll need a function that can call itself if the condition is not met. NOTE: In this video, Rob works backwards to make sure we know how to merge two lists. Then he shows how to separate them before merging again.","title":"Merge Sort"},{"location":"module-3/algorithms-pt1/#quick-sort","text":"Like merge, quick sort uses a pivot element as a partition then looks at numbers to the left and right of the partition to see if they need to be moved over or not. Then it repeats the sequence on the left and right sides of the partitions. Then again and again until all the numbers are in order. BIG NOTE HERE: The woman in the video is Gayle Laakmann-McDowell . She wrote Cracking the Coding Interview which is the bible on coding interviews.","title":"Quick Sort"},{"location":"module-3/algorithms-pt1/#practice-it","text":"","title":"Practice It"},{"location":"module-3/algorithms-pt1/#part-1-first-algorithms","text":"In a Repl.it: Build a bubble sort Build an insertion sort","title":"Part 1: First Algorithms"},{"location":"module-3/algorithms-pt1/#part-2-js-fundamentals","text":"We're now at a point where we'll be introducing new features and concepts of JavaScript that will then require your full understanding of how to program and code in JavaScript. To make sure you're ready for next class and the rest of 211, work through these 116 problems . Start with just the evens. Commit to solving 4 per day for the next two weeks. Put each in a new Repl.it so you have a journal and reference of your learning and code. Your future self will thank you so much for this!!","title":"Part 2: JS Fundamentals"},{"location":"module-3/algorithms-pt1/#know-your-docs","text":"Geeks4Geeks - quick sort Geeks4Geeks - merge sort Geeks4Geeks - bubble sort","title":"Know Your Docs"},{"location":"module-3/algorithms-pt2/","text":"Algorithms Part Two I attribute my success to this: I never gave or took any excuse.\u2003\u2014Florence Nightingale Overview Solving problems is what developers do. We figure out how to make things work. Today we're going to work on a few challenges in preparation for our class tomorrow. Make sure you work on all three challenges in separate Repl.its. There are videos for each but you won't know you can do it until you do it by yourself. Once you've whiteboarded, code planned and coded it along with a video, REDO it by yourself. Continue the process for everything you do. We learn from other developers, we do it for ourselves and then we teach others. It's the cycle we live in. BE SURE TO WHITEBOARD EVERY SOLUTION BEFORE YOU CODE IT!! This is incredibly important!! Remove Duplicates In a new Repl.it: Create a function that removes duplicate numbers from an array. YT, TechSith - Remove Duplicates Longest Sub-Sequence In a new Repl.it: Given an array of N numbers, find the length of the longest subset of sorted increasing numbers. NOTE: N just means the length of the array could be anything. 1 2 3 4 5 const myArr = [ 3 , 1 , 2 , 7 , 10 , 8 , 11 , 9 ] longestSubSet ( myArr ) // => 5 // because, in order, 1, 2, 7, 8 and 9 are the longest ascending subset in the array. YT, Tushar Roy (Coding Made Simple) Longest Increasing Sequence Length of Longest Alternating Sub-Array In a new Repl.it: Given an array of N arrays including positive and negative numbers only, find the length of the longest alternating (meaning negative-positive-negative or positive-negative-positive) sub array present in the array. Preparing for Interview Questions Before you come into class tomorrow make sure you've watched and understood each of the following videos: YT, Irfan Baqui - Fibonacci Series #1 YT, TechSith - Tricky Interview Questions & Answers YT, Learn Code Tutorials - 10 JS Interview Questions & Answers","title":"Algorithms pt.2"},{"location":"module-3/algorithms-pt2/#algorithms-part-two","text":"I attribute my success to this: I never gave or took any excuse.\u2003\u2014Florence Nightingale","title":"Algorithms Part Two"},{"location":"module-3/algorithms-pt2/#overview","text":"Solving problems is what developers do. We figure out how to make things work. Today we're going to work on a few challenges in preparation for our class tomorrow. Make sure you work on all three challenges in separate Repl.its. There are videos for each but you won't know you can do it until you do it by yourself. Once you've whiteboarded, code planned and coded it along with a video, REDO it by yourself. Continue the process for everything you do. We learn from other developers, we do it for ourselves and then we teach others. It's the cycle we live in. BE SURE TO WHITEBOARD EVERY SOLUTION BEFORE YOU CODE IT!! This is incredibly important!!","title":"Overview"},{"location":"module-3/algorithms-pt2/#remove-duplicates","text":"In a new Repl.it: Create a function that removes duplicate numbers from an array. YT, TechSith - Remove Duplicates","title":"Remove Duplicates"},{"location":"module-3/algorithms-pt2/#longest-sub-sequence","text":"In a new Repl.it: Given an array of N numbers, find the length of the longest subset of sorted increasing numbers. NOTE: N just means the length of the array could be anything. 1 2 3 4 5 const myArr = [ 3 , 1 , 2 , 7 , 10 , 8 , 11 , 9 ] longestSubSet ( myArr ) // => 5 // because, in order, 1, 2, 7, 8 and 9 are the longest ascending subset in the array. YT, Tushar Roy (Coding Made Simple) Longest Increasing Sequence","title":"Longest Sub-Sequence"},{"location":"module-3/algorithms-pt2/#length-of-longest-alternating-sub-array","text":"In a new Repl.it: Given an array of N arrays including positive and negative numbers only, find the length of the longest alternating (meaning negative-positive-negative or positive-negative-positive) sub array present in the array.","title":"Length of Longest Alternating Sub-Array"},{"location":"module-3/algorithms-pt2/#preparing-for-interview-questions","text":"Before you come into class tomorrow make sure you've watched and understood each of the following videos: YT, Irfan Baqui - Fibonacci Series #1 YT, TechSith - Tricky Interview Questions & Answers YT, Learn Code Tutorials - 10 JS Interview Questions & Answers","title":"Preparing for Interview Questions"},{"location":"module-3/class-10/","text":"Class 10: Bank Account Success is not final, failure is not fatal: it is the courage to continue that counts.\u2003\u2014Winston Churchill Greet, Outline, and Objectify Today we're going to: OBJECTIVE: Create a banking app that uses classes to manage fund accurately. Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Discuss how to create the BankAccount and Transaction classes. Create the BankAccount and Transaction classes. Push Yourself Further Interview Questions - BlogPost_205 Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Instructor to Demonstrate with Examples, Explain and Set Expectations Group Students in 3s plan and implements Partner with other groups for elaboration Share with the class for evaluation (potentially carry into the next class) Today students will apply their knowledge of object-oriented programming to create two classes: one that can be used to represent a bank account and another to represent the transactions the bank account holds. BankAccount class - This class represents a bank account. The class should have the following fields: accountNumber - String representing the account number owner - String representing the owner of the account transactions - An array of transactions representing the history of all transactions associated with this account The constructor should take in the following input: accountNumber - The account Number owner - The name of the person who owns this account NOTE: When an account is created, you should initialize the transactions array to be an empty array The class should have the following 3 methods: balance() - This method does not take any input, and returns the current balance on the account. The balance is computed by summing up the amounts in the transactions array. deposit(amt) - This method takes in a single input, the deposit amount. This method should create a new transaction representing the deposit, and add it to the transactions array. NOTE: You should not be able to deposit a negative amount charge(payee, amt) - This method takes in the payee and amount, creates a new transaction with the payee and amount, and adds the transaction to the transaction array. NOTE: You should not be able to charge an amount that would make your balance dip below 0 Transaction class - This class represents a single transaction in a bank account. The class should have the following fields: date - The date of the transaction amount - The amount of the transaction. Positive amounts are money going into the account (deposit, refund). Negative amounts are money coming out of the account (a charge or debit). payee - The description or payee on the transaction The constructor should take in the following input: amount - The amount on the transaction payee - The payee or description on the transaction NOTE: The date is not passed into the constructor. The constructor should set the date to be the current date automatically. Additional Resources Video, Yousif Seedhom - Bank Account Walk-through Push Yourself Further SavingsAccount class - This class should extend the BankAccount class. The class should have an additional field: interestRate - This value represents the rate at which the account earns interest The constructor should take the following as input: accountNumber - See BankAccount class owner - See BankAccount class interestRate - The rate that is used to compute interest Additional methods: accrueInterest() - This method should use the balance() to get the current balance and add a new transaction representing a deposit of the appropriate amount. Checkers This is a very challenging game to build but if you're ready, go for it: Checkers Student Feedback Loading\u2026 Blogs to Show You Know Blog Prompts Exit Recap, Attendance, and Reminders, 5 mins Create Bank Account Assignment Create BlogPost_205 Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Class 10 Bank Account"},{"location":"module-3/class-10/#class-10-bank-account","text":"Success is not final, failure is not fatal: it is the courage to continue that counts.\u2003\u2014Winston Churchill","title":"Class 10: Bank Account"},{"location":"module-3/class-10/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE: Create a banking app that uses classes to manage fund accurately. Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Discuss how to create the BankAccount and Transaction classes. Create the BankAccount and Transaction classes. Push Yourself Further Interview Questions - BlogPost_205 Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-3/class-10/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-3/class-10/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-3/class-10/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-3/class-10/#creation-time-60-90-mins","text":"Instructor to Demonstrate with Examples, Explain and Set Expectations Group Students in 3s plan and implements Partner with other groups for elaboration Share with the class for evaluation (potentially carry into the next class) Today students will apply their knowledge of object-oriented programming to create two classes: one that can be used to represent a bank account and another to represent the transactions the bank account holds. BankAccount class - This class represents a bank account. The class should have the following fields: accountNumber - String representing the account number owner - String representing the owner of the account transactions - An array of transactions representing the history of all transactions associated with this account The constructor should take in the following input: accountNumber - The account Number owner - The name of the person who owns this account NOTE: When an account is created, you should initialize the transactions array to be an empty array The class should have the following 3 methods: balance() - This method does not take any input, and returns the current balance on the account. The balance is computed by summing up the amounts in the transactions array. deposit(amt) - This method takes in a single input, the deposit amount. This method should create a new transaction representing the deposit, and add it to the transactions array. NOTE: You should not be able to deposit a negative amount charge(payee, amt) - This method takes in the payee and amount, creates a new transaction with the payee and amount, and adds the transaction to the transaction array. NOTE: You should not be able to charge an amount that would make your balance dip below 0 Transaction class - This class represents a single transaction in a bank account. The class should have the following fields: date - The date of the transaction amount - The amount of the transaction. Positive amounts are money going into the account (deposit, refund). Negative amounts are money coming out of the account (a charge or debit). payee - The description or payee on the transaction The constructor should take in the following input: amount - The amount on the transaction payee - The payee or description on the transaction NOTE: The date is not passed into the constructor. The constructor should set the date to be the current date automatically.","title":"Creation Time, 60-90 mins"},{"location":"module-3/class-10/#additional-resources","text":"Video, Yousif Seedhom - Bank Account Walk-through","title":"Additional Resources"},{"location":"module-3/class-10/#push-yourself-further","text":"","title":"Push Yourself Further"},{"location":"module-3/class-10/#savingsaccount-class-this-class-should-extend-the-bankaccount-class","text":"The class should have an additional field: interestRate - This value represents the rate at which the account earns interest The constructor should take the following as input: accountNumber - See BankAccount class owner - See BankAccount class interestRate - The rate that is used to compute interest Additional methods: accrueInterest() - This method should use the balance() to get the current balance and add a new transaction representing a deposit of the appropriate amount.","title":"SavingsAccount class - This class should extend the BankAccount class."},{"location":"module-3/class-10/#checkers","text":"This is a very challenging game to build but if you're ready, go for it: Checkers","title":"Checkers"},{"location":"module-3/class-10/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-3/class-10/#blogs-to-show-you-know","text":"Blog Prompts","title":"Blogs to Show You Know"},{"location":"module-3/class-10/#exit-recap-attendance-and-reminders-5-mins","text":"Create Bank Account Assignment Create BlogPost_205 Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-3/class-11/","text":"Class 11: Sorting & JS Fundamentals Some of the most revolutionary new ideas come from spotting something old to leave out rather than thinking of something new to put in.\u2003\u2014Douglas Adams Greet, Outline, and Objectify Today we're going to: OBJECTIVE: Review and revisit the fundamentals of programming to deepen our understanding and prepare for development in Node. Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Questions/assistance on BankAccount Git refresher Functional (higher-order from scratch) programming rebuild Sorting practice Push Yourself Further Javascripting.js Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Part 1: Git and BankAccount Review Instructor led discussion over Git and BankAccount Part 2: Functional Programming Rebuild By now you should very much know how to build higher-order functions from scratch. Today you will warm-up on the more important and useful higher order functions: .map() , .reduce() and .filter() . Whiteboard, make a code plan and build each of the following methods: .map() - function that takes an array of items and a function that returns an array with each item manipulated by that function. .reduce() - function that takes an array of food orders with their amounts and returns the total amount of all the food orders. .filter() - function that takes an array of items and a function that returns an array with only the items that return true in the function. Create a repo called \"Higher-Order-From-Scratch\". Practice working from branches by creating a new branch called: \"HigherOrder\". Place your code in a file called main.js . Create a pull request (PR) for Higher-Order-From-Scratch to be merged into master . Part 3: Sorting Sorting Practice Push Yourself Further JavaScripting.js Student Feedback Loading\u2026 Exit Recap, Attendance, and Reminders, 5 mins Create Sorting Practice Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Class 11 Sorting & Fundamentals"},{"location":"module-3/class-11/#class-11-sorting-js-fundamentals","text":"Some of the most revolutionary new ideas come from spotting something old to leave out rather than thinking of something new to put in.\u2003\u2014Douglas Adams","title":"Class 11: Sorting &amp; JS Fundamentals"},{"location":"module-3/class-11/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE: Review and revisit the fundamentals of programming to deepen our understanding and prepare for development in Node. Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Questions/assistance on BankAccount Git refresher Functional (higher-order from scratch) programming rebuild Sorting practice Push Yourself Further Javascripting.js Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-3/class-11/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-3/class-11/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-3/class-11/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-3/class-11/#creation-time-60-90-mins","text":"","title":"Creation Time, 60-90 mins"},{"location":"module-3/class-11/#part-1-git-and-bankaccount-review","text":"Instructor led discussion over Git and BankAccount","title":"Part 1: Git and BankAccount Review"},{"location":"module-3/class-11/#part-2-functional-programming-rebuild","text":"By now you should very much know how to build higher-order functions from scratch. Today you will warm-up on the more important and useful higher order functions: .map() , .reduce() and .filter() . Whiteboard, make a code plan and build each of the following methods: .map() - function that takes an array of items and a function that returns an array with each item manipulated by that function. .reduce() - function that takes an array of food orders with their amounts and returns the total amount of all the food orders. .filter() - function that takes an array of items and a function that returns an array with only the items that return true in the function. Create a repo called \"Higher-Order-From-Scratch\". Practice working from branches by creating a new branch called: \"HigherOrder\". Place your code in a file called main.js . Create a pull request (PR) for Higher-Order-From-Scratch to be merged into master .","title":"Part 2: Functional Programming Rebuild"},{"location":"module-3/class-11/#part-3-sorting","text":"Sorting Practice","title":"Part 3: Sorting"},{"location":"module-3/class-11/#push-yourself-further","text":"JavaScripting.js","title":"Push Yourself Further"},{"location":"module-3/class-11/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-3/class-11/#exit-recap-attendance-and-reminders-5-mins","text":"Create Sorting Practice Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-3/class-12/","text":"Class 12: Hackathon Believe in yourself. You are braver than you think, more talented than you know, and capable of more than you imagine.\u2003\u2015Roy T. Bennett Greet, Outline, and Objectify Today we're going to: OBJECTIVE: Today is about creation, synthesis using previously learned skills. This is where you become a programmer! Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Choose a challenge Choose a team of 2-3 Whiteboard, code plan, pseudo code, JavaScript Test Present! Push Yourself Further Interview Questions - BlogPost_206 Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Using the algorithms you've been learning about so far you will join forces with a group of 3 total students and choose one of the following prompts to build a solution for the challenge. Work as a team, divide the work, share a repo and get a working prototype up by the end of class. Prompt 1: Hang Man Project Objective - This is a terminal based app. Reveal a letter from a word if a user inputs that letter and it exists in the word. If it doesn't let the user know. Example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Input: Any letter _ _ _ _ _ L (input) _ _ L L _ (return) H (input) H _ L L _ E (input) H E L L _ O (input) H E L L O Instructions 1 2 3 4 5 6 7 8 1. First build this project in the terminal 2. Then attach it to the DOM 3. Work through the challenge together 4. As always whiteboard it and make a code plan 5. Translate from English to pseudo code then to JavaScript 6. Test 7. Present to class 8. Turn in the URL to your repo, once for each person in your group Push Yourself Further 1 2 3 4 5 6 7 8 9 10 11 Further Practice Challenge - Keep track of the user's lives, so if they guess incorrectly they lose a life. Challenge example: _ _ _ _ _ V (input) \"V\" is not in the word! 4 lives left! _ _ _ _ _ Prompt 2: Ramp Numbers A ramp number is a number whose digits from left to right either only rise or stay the same. 1234 is a ramp number and so is 1124 and 13569. But 1032 is not and neither is 1528. Challenge: Given the input of a number, build a program that will find the total number of ramp numbers that are less than it. Example: Code Example 1 2 3 4 5 const numOfRampsBelow = ( num ) => { // Your code goes here } numOfRampsBelow ( 99999 ) // => \"2001 total ramp numbers are less than 99999\" Example 2 1 2 3 4 5 6 7 Given: A positive integer, n. Output: The number of total ramp numbers less than n. Example input: 123 Example output: 65 total ramp numbers are less than 123 Instructions 1 2 3 4 5 6 7 8 9 1. First build this project in the terminal 2. Then attach it to the DOM 3. Work through the challenge together 4. As always whiteboard it and make a code plan 5. Translate from English to pseudo code then to JavaScript 6. When you finish work on the Further Practice Challenge 7. Test 8. Present to class 9. Turn in the URL to your repo, once for each person in your group Push Yourself Further 1 Further Practice Challenge - Display all of the ramp numbers that are less than the input number (n). Prompt 3: Count It Given a sentence, paragraph or novel, count the letters in the string. Ignore whitespace and anything not [a-z][A-Z] , i.e. punctuations and numbers. Example 1 2 3 Given: A string - like \"Hello World\" Output: Letters and how often they show up. - d:1 e:1 h:1 l:3 o:2 r:1 w:1 Instructions 1 2 3 4 5 6 7 8 9 10 11 1. First build this project in the terminal 2. Then attach it to the DOM 3. Work through the challenge together 4. As always whiteboard it and make a code plan > Hint: convert all to lowercase first 5. Translate from English to pseudo code then to JavaScript 6. Test 7. Present to class 8. Turn in the URL to your repo, once for each person in your group > Use this challenge input: \"The quick brown fox jumps over the lazy dog and the sleeping cat early in the day.\" Push Yourself Further 1 2 3 4 1. Use RegEx 2. Make a word count 3. Count each word's appearance 4. [ Calculate the grade level/proficiency of English ]( https://www.thoughtco.com/calculating-reading-level-1857103 ) for the sentence, paragraph or novel Student Feedback Loading\u2026 Blogs to Show You Know Blog Prompts Exit Recap, Attendance, and Reminders, 5 mins Create Hackathon CHECKPOINT Assignment Create 206 Blog Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Class 12 Hackathon"},{"location":"module-3/class-12/#class-12-hackathon","text":"Believe in yourself. You are braver than you think, more talented than you know, and capable of more than you imagine.\u2003\u2015Roy T. Bennett","title":"Class 12: Hackathon"},{"location":"module-3/class-12/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE: Today is about creation, synthesis using previously learned skills. This is where you become a programmer! Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Choose a challenge Choose a team of 2-3 Whiteboard, code plan, pseudo code, JavaScript Test Present! Push Yourself Further Interview Questions - BlogPost_206 Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-3/class-12/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-3/class-12/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-3/class-12/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-3/class-12/#creation-time-60-90-mins","text":"Using the algorithms you've been learning about so far you will join forces with a group of 3 total students and choose one of the following prompts to build a solution for the challenge. Work as a team, divide the work, share a repo and get a working prototype up by the end of class.","title":"Creation Time, 60-90 mins"},{"location":"module-3/class-12/#prompt-1-hang-man","text":"Project Objective - This is a terminal based app. Reveal a letter from a word if a user inputs that letter and it exists in the word. If it doesn't let the user know. Example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 Input: Any letter _ _ _ _ _ L (input) _ _ L L _ (return) H (input) H _ L L _ E (input) H E L L _ O (input) H E L L O Instructions 1 2 3 4 5 6 7 8 1. First build this project in the terminal 2. Then attach it to the DOM 3. Work through the challenge together 4. As always whiteboard it and make a code plan 5. Translate from English to pseudo code then to JavaScript 6. Test 7. Present to class 8. Turn in the URL to your repo, once for each person in your group Push Yourself Further 1 2 3 4 5 6 7 8 9 10 11 Further Practice Challenge - Keep track of the user's lives, so if they guess incorrectly they lose a life. Challenge example: _ _ _ _ _ V (input) \"V\" is not in the word! 4 lives left! _ _ _ _ _","title":"Prompt 1: Hang Man"},{"location":"module-3/class-12/#prompt-2-ramp-numbers","text":"A ramp number is a number whose digits from left to right either only rise or stay the same. 1234 is a ramp number and so is 1124 and 13569. But 1032 is not and neither is 1528. Challenge: Given the input of a number, build a program that will find the total number of ramp numbers that are less than it. Example: Code Example 1 2 3 4 5 const numOfRampsBelow = ( num ) => { // Your code goes here } numOfRampsBelow ( 99999 ) // => \"2001 total ramp numbers are less than 99999\" Example 2 1 2 3 4 5 6 7 Given: A positive integer, n. Output: The number of total ramp numbers less than n. Example input: 123 Example output: 65 total ramp numbers are less than 123 Instructions 1 2 3 4 5 6 7 8 9 1. First build this project in the terminal 2. Then attach it to the DOM 3. Work through the challenge together 4. As always whiteboard it and make a code plan 5. Translate from English to pseudo code then to JavaScript 6. When you finish work on the Further Practice Challenge 7. Test 8. Present to class 9. Turn in the URL to your repo, once for each person in your group Push Yourself Further 1 Further Practice Challenge - Display all of the ramp numbers that are less than the input number (n).","title":"Prompt 2: Ramp Numbers"},{"location":"module-3/class-12/#prompt-3-count-it","text":"Given a sentence, paragraph or novel, count the letters in the string. Ignore whitespace and anything not [a-z][A-Z] , i.e. punctuations and numbers. Example 1 2 3 Given: A string - like \"Hello World\" Output: Letters and how often they show up. - d:1 e:1 h:1 l:3 o:2 r:1 w:1 Instructions 1 2 3 4 5 6 7 8 9 10 11 1. First build this project in the terminal 2. Then attach it to the DOM 3. Work through the challenge together 4. As always whiteboard it and make a code plan > Hint: convert all to lowercase first 5. Translate from English to pseudo code then to JavaScript 6. Test 7. Present to class 8. Turn in the URL to your repo, once for each person in your group > Use this challenge input: \"The quick brown fox jumps over the lazy dog and the sleeping cat early in the day.\" Push Yourself Further 1 2 3 4 1. Use RegEx 2. Make a word count 3. Count each word's appearance 4. [ Calculate the grade level/proficiency of English ]( https://www.thoughtco.com/calculating-reading-level-1857103 ) for the sentence, paragraph or novel","title":"Prompt 3: Count It"},{"location":"module-3/class-12/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-3/class-12/#blogs-to-show-you-know","text":"Blog Prompts","title":"Blogs to Show You Know"},{"location":"module-3/class-12/#exit-recap-attendance-and-reminders-5-mins","text":"Create Hackathon CHECKPOINT Assignment Create 206 Blog Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-3/class-9/","text":"Class 9: Mission To Mars Don't give your past the power to define your future. Greet, Outline, and Objectify Today we're going to: OBJECTIVE: Practice OOP by creating an app that uses the class keyword. Questions for Student Led Discussion Interview Challenge Student Presentations Instructor Presentation __prototype__ Creation Time: Mission to Mars App Push Yourself Further Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Instructor Presentation: prototype The instructor will discuss how __prototype__ is used in the building of JavaScript and its many built-in methods as they relate to the principles of OOP: abstractions, inheritance, encapsulation, and polymorphism. Further resources: JavaScript is Sexy: OOP Creation Time, 60-90 mins Instructor to Demonstrate with Examples, Explain and Set Expectations Group Students in 3s plan and implements Partner with other groups for elaboration Share with the class for evaluation (potentially carry into the next class) Fork, clone, install dependencies and make new branch on this repo . Begin by reading the tests in the bottom of the file. Make sure you understand them. Build a class for CrewMember. Build a class for Ship. Make sure CrewMembers can enter Ships. Make sure to return a mission statement. Student Feedback Loading\u2026 Exit Recap, Attendance, and Reminders, 5 mins Create Mission To Mars Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Class 9 Mission to Mars"},{"location":"module-3/class-9/#class-9-mission-to-mars","text":"Don't give your past the power to define your future.","title":"Class 9: Mission To Mars"},{"location":"module-3/class-9/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE: Practice OOP by creating an app that uses the class keyword. Questions for Student Led Discussion Interview Challenge Student Presentations Instructor Presentation __prototype__ Creation Time: Mission to Mars App Push Yourself Further Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-3/class-9/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-3/class-9/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-3/class-9/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-3/class-9/#instructor-presentation-prototype","text":"The instructor will discuss how __prototype__ is used in the building of JavaScript and its many built-in methods as they relate to the principles of OOP: abstractions, inheritance, encapsulation, and polymorphism. Further resources: JavaScript is Sexy: OOP","title":"Instructor Presentation: prototype"},{"location":"module-3/class-9/#creation-time-60-90-mins","text":"Instructor to Demonstrate with Examples, Explain and Set Expectations Group Students in 3s plan and implements Partner with other groups for elaboration Share with the class for evaluation (potentially carry into the next class) Fork, clone, install dependencies and make new branch on this repo . Begin by reading the tests in the bottom of the file. Make sure you understand them. Build a class for CrewMember. Build a class for Ship. Make sure CrewMembers can enter Ships. Make sure to return a mission statement.","title":"Creation Time, 60-90 mins"},{"location":"module-3/class-9/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-3/class-9/#exit-recap-attendance-and-reminders-5-mins","text":"Create Mission To Mars Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-3/closures/","text":"Closures Overview While not quite tied to OOP, closures are an important concept to begin to understand. If you haven't come across this word in your readings so far, you're doing well, don't worry. Closure refers to the scope of a variable, meaning: if it is accessible within a function, outside the function, or to other functions. In the most basic of terms scope is the area (or context) available for a function to access variables. You've probably heard of the global scope or local scope. You're using global scope when you install npm modules with: npm install lodash --global . This means that lodash, an npm package we'll work with at the end of 211 , would be available to every program on your computer. This isn't needed and we shouldn't do this because we only need it to be available to our program's scope, not our word processor or Chrome. But it works the same for the functions we build. When a function needs a variable it will look for the variable within its own context first . If it doesn't find it it will go up a level to its parent's scope. If it doesn't find it there it will go up to its grandparent's scope, and so on until it gets up to the global scope. Closure is a tricky concept to internalize and many developers don't understand it fully without years of practice. For now, give yourself a break and just try to be aware of what variables are available to a function. There is no substitute for the MDN Docs on JavaScript when you're learning JavaScript. Dig into this article and find ways to use closure to your advantage. If you can master closure you can master any programming concept. MDN Docs - Closures See It - Closures Practice It - Closures Go to this JSFiddle . Create a new line after line 3. Create variable called name and assign it a different name than Mozilla. Run the Fiddle. Cmd + Enter or Ctrl + Enter . What's different? Now remove it and see what happens. Why? Additional Resources YT, FunFunFunction - Closure Know Your Docs MDN Docs - Closures","title":"Closures"},{"location":"module-3/closures/#closures","text":"","title":"Closures"},{"location":"module-3/closures/#overview","text":"While not quite tied to OOP, closures are an important concept to begin to understand. If you haven't come across this word in your readings so far, you're doing well, don't worry. Closure refers to the scope of a variable, meaning: if it is accessible within a function, outside the function, or to other functions. In the most basic of terms scope is the area (or context) available for a function to access variables. You've probably heard of the global scope or local scope. You're using global scope when you install npm modules with: npm install lodash --global . This means that lodash, an npm package we'll work with at the end of 211 , would be available to every program on your computer. This isn't needed and we shouldn't do this because we only need it to be available to our program's scope, not our word processor or Chrome. But it works the same for the functions we build. When a function needs a variable it will look for the variable within its own context first . If it doesn't find it it will go up a level to its parent's scope. If it doesn't find it there it will go up to its grandparent's scope, and so on until it gets up to the global scope. Closure is a tricky concept to internalize and many developers don't understand it fully without years of practice. For now, give yourself a break and just try to be aware of what variables are available to a function. There is no substitute for the MDN Docs on JavaScript when you're learning JavaScript. Dig into this article and find ways to use closure to your advantage. If you can master closure you can master any programming concept. MDN Docs - Closures","title":"Overview"},{"location":"module-3/closures/#see-it-closures","text":"","title":"See It - Closures"},{"location":"module-3/closures/#practice-it-closures","text":"Go to this JSFiddle . Create a new line after line 3. Create variable called name and assign it a different name than Mozilla. Run the Fiddle. Cmd + Enter or Ctrl + Enter . What's different? Now remove it and see what happens. Why?","title":"Practice It - Closures"},{"location":"module-3/closures/#additional-resources","text":"YT, FunFunFunction - Closure","title":"Additional Resources"},{"location":"module-3/closures/#know-your-docs","text":"MDN Docs - Closures","title":"Know Your Docs"},{"location":"module-3/developeSeries-thinkingLikeAProgrammer/","text":"Develop Series: Thinking Like a Programmer Now that you've been in coding school for a while, I hope you've learned there is a difference between coding and programming. If not, check back on your pre-course work. As you develop your coding skills it's very important to develop your programming skills. You need to be able to walk through tasks one at a time to make the most of your coding skills. If you can't problem-solve you can't use code! What a dilemma! Luckily the problem solving skills can be developed just like a muscle. Your brain now is wired to do well at the tasks it's used to doing. If you're a server it's good at memorizing menu items, prices and locations of menu item buttons in your POS and managing customer relations at a table. If you're a teacher your brain is geared to manage behaviors, inspire students, develop lesson plans, walk fine lines with angry parents and project manage your entire calendar year while balancing grading, administration demands and hopefully life at home. ;) There are many other jobs you might have, and each of them has a unique skill set your brain has grown to be good at. As a developer, all of those skills will come in handy, but you must also ask your brain to train for new tasks. Problem solving with code! White board every day at HackerRank . Start recognizing problem patterns and their solutions at Program Creek . Buy and study Think Like a Programmer by V. Anton Spraul.","title":"Develop - Thinking Programmer"},{"location":"module-3/developeSeries-thinkingLikeAProgrammer/#develop-series-thinking-like-a-programmer","text":"Now that you've been in coding school for a while, I hope you've learned there is a difference between coding and programming. If not, check back on your pre-course work. As you develop your coding skills it's very important to develop your programming skills. You need to be able to walk through tasks one at a time to make the most of your coding skills. If you can't problem-solve you can't use code! What a dilemma! Luckily the problem solving skills can be developed just like a muscle. Your brain now is wired to do well at the tasks it's used to doing. If you're a server it's good at memorizing menu items, prices and locations of menu item buttons in your POS and managing customer relations at a table. If you're a teacher your brain is geared to manage behaviors, inspire students, develop lesson plans, walk fine lines with angry parents and project manage your entire calendar year while balancing grading, administration demands and hopefully life at home. ;) There are many other jobs you might have, and each of them has a unique skill set your brain has grown to be good at. As a developer, all of those skills will come in handy, but you must also ask your brain to train for new tasks. Problem solving with code! White board every day at HackerRank . Start recognizing problem patterns and their solutions at Program Creek . Buy and study Think Like a Programmer by V. Anton Spraul.","title":"Develop Series: Thinking Like a Programmer"},{"location":"module-3/extendClasses/","text":"Extending a Class The extends keyword is used in class declarations or class expressions to create a class as a child of another class. Below the child class - AcaStudent inherits from the parent class Human. 1 2 3 4 5 6 7 8 9 class AcaStudent extends Human { constructor ( codingLanguage , name , height , weight , dob ){ super ( name , height , weight , dob ); this . codingLanguage = codingLanguage ; } greeting () { console . log ( \"Hello, my name is \" + this . name + \"! I am learning how to code!\" ); } } We use the extends keyword, followed by the parent class to attach the properties of Human to AcaStudent along with the properties of AcaStudent . To add an additional property to the AcaStudent class, we put the new property codingLanguage with all the properties from the Human class name , height , weight , dob in the constructor function. NOTICE the super() keyword. It's used to pass in the original Human class properties name , height , weight , dob . Think of it as going to the supervisor of the extended class. In order to get the benefits of having a supervisor or using another class we have to call the super() method inside the constructor. This is required! NOTICE that we were able to reassign greeting() without using super() . This illustrates one of the differences between properties and methods. greeting() is a property but is ALSO a method because it is a function. Each of the other attributes: name , height , weight , dob and codingLanguage are only properties. Copy the following code into a Repl.it and experiment with the example below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Human { constructor ( name , height , weight , dob ){ this . name = name ; this . height = height ; this . weight = weight ; this . dob = dob ; } greeting () { return \"Hello \" + this . name + \"!\" ; } } class AcaStudent extends Human { constructor ( codingLanguage , name , height , weight , dob ){ super ( name , height , weight , dob ); this . codingLanguage = codingLanguage ; } greeting () { console . log ( \"Hello, my name is \" + this . name + \"! I am learning how to code!\" ); } } const dan = new AcaStudent ( \"JavaScript\" , \"Dan\" , \"5 ft 6 in\" , \"160 lbs\" , \"February 25th, 1986\" ); dan . greeting (); dan . codingLanguage ; Extend the Human class again with your own properties. Practice adding properties and methods. 1 2 3 4 5 6 7 8 9 10 11 class Human { constructor ( name , height , weight , dob ){ this . name = name ; this . height = height ; this . weight = weight ; this . dob = dob ; } greeting () { return \"Hello \" + this . name + \"!\" ; } } Practice It - Extending Classes Solve these problems on your own before coming to class. Classes Practice 1 Classes Practice 2","title":"Extending Classes"},{"location":"module-3/extendClasses/#extending-a-class","text":"The extends keyword is used in class declarations or class expressions to create a class as a child of another class. Below the child class - AcaStudent inherits from the parent class Human. 1 2 3 4 5 6 7 8 9 class AcaStudent extends Human { constructor ( codingLanguage , name , height , weight , dob ){ super ( name , height , weight , dob ); this . codingLanguage = codingLanguage ; } greeting () { console . log ( \"Hello, my name is \" + this . name + \"! I am learning how to code!\" ); } } We use the extends keyword, followed by the parent class to attach the properties of Human to AcaStudent along with the properties of AcaStudent . To add an additional property to the AcaStudent class, we put the new property codingLanguage with all the properties from the Human class name , height , weight , dob in the constructor function. NOTICE the super() keyword. It's used to pass in the original Human class properties name , height , weight , dob . Think of it as going to the supervisor of the extended class. In order to get the benefits of having a supervisor or using another class we have to call the super() method inside the constructor. This is required! NOTICE that we were able to reassign greeting() without using super() . This illustrates one of the differences between properties and methods. greeting() is a property but is ALSO a method because it is a function. Each of the other attributes: name , height , weight , dob and codingLanguage are only properties. Copy the following code into a Repl.it and experiment with the example below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class Human { constructor ( name , height , weight , dob ){ this . name = name ; this . height = height ; this . weight = weight ; this . dob = dob ; } greeting () { return \"Hello \" + this . name + \"!\" ; } } class AcaStudent extends Human { constructor ( codingLanguage , name , height , weight , dob ){ super ( name , height , weight , dob ); this . codingLanguage = codingLanguage ; } greeting () { console . log ( \"Hello, my name is \" + this . name + \"! I am learning how to code!\" ); } } const dan = new AcaStudent ( \"JavaScript\" , \"Dan\" , \"5 ft 6 in\" , \"160 lbs\" , \"February 25th, 1986\" ); dan . greeting (); dan . codingLanguage ; Extend the Human class again with your own properties. Practice adding properties and methods. 1 2 3 4 5 6 7 8 9 10 11 class Human { constructor ( name , height , weight , dob ){ this . name = name ; this . height = height ; this . weight = weight ; this . dob = dob ; } greeting () { return \"Hello \" + this . name + \"!\" ; } }","title":"Extending a Class"},{"location":"module-3/extendClasses/#practice-it-extending-classes","text":"Solve these problems on your own before coming to class. Classes Practice 1 Classes Practice 2","title":"Practice It - Extending Classes"},{"location":"module-3/oop-nuts%2Bbolts/","text":"Nuts & Bolts of OOP Example 2 Review the material below and practice ALL of the code snippets to make sure you start to see how objects can use other objects as part of their properties and how we can assign new properties to objects as needed. We'll use the this keyword in functions when we want to assign something to this instance of the object. Object-oriented programming consists of classes and objects. Classes are like templates. For example, a template of a human may include: name, height, weight, date of birth, etc. A class is named with a capital letter. We use a constructor function to define the properties of class. We use the this keyword to set individual properties. See the example below: 1 2 3 4 5 6 7 8 class Human { constructor ( name , height , weight , dob ){ this . name = name ; this . height = height ; this . weight = weight ; this . dob = dob ; } } We can assign methods to classes using the following syntax: 1 2 3 4 5 6 7 8 9 10 11 12 class Human { constructor ( name , height , weight , dob ){ this . name = name ; this . height = height ; this . weight = weight ; this . dob = dob ; } greeting () { return \"Hello \" + this . name + \"!\" ; } } We can instantiate or copy an object from a class just as a chef can use a recipe to replicate the same entree. To instantiate means to create an instance of. Below we create an instance of the class Human , which will be an object named 'chris': 1 const chris = new Human ( \"Chris\" , \"6 ft 2 in\" , \"230 lbs\" , \"July 24th, 1988\" ); See It - Class Keyword Practice It Part 1: Using a Class In a Repl.it, copy the code examples below and follow along with the objectives. Experiment with accessing the properties and methods below using dot-notation( . ): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Human { constructor ( name , height , weight , dob ){ this . name = name ; this . height = height ; this . weight = weight ; this . dob = dob ; } greeting () { return \"Hello \" + this . name + \"!\" ; } } const chris = new Human ( \"Chris\" , \"6 ft 2 in\" , \"230 lbs\" , \"July 24th, 1988\" ); console . log ( chris . name ); console . log ( chris . dob ); console . log ( 'replace me to get weight ' ); chris . greeting (); Instantiate a new Human with your name, height, weight, and DoB. Work on accessing the properties and call the greeting method. 1 2 3 4 5 6 7 8 9 10 11 class Human { constructor ( name , height , weight , dob ){ this . name = name ; this . height = height ; this . weight = weight ; this . dob = dob ; } greeting () { return \"Hello \" + this . name + \"!\" ; } } Experiment further with the example below: 1 2 3 4 5 6 7 8 9 10 11 12 13 class Square { constructor ( sideLength ) { this . sideLength = sideLength ; } calcArea () { return this . sideLength * this . sideLength ; } } const square1 = new Square ( 10 ); console . log ( square1 . sideLength ); square1 . calcArea (); Part 2: Create Your Own Classes Build these in a Repl.it. Seriously, this will prepare you for the BankAccount project. Create a Rectangle class. Instantiate at least one object that takes two arguments in its constructor and calculate its area. Create a Triangle class. Instantiate at least one object and calculate its area. Additional Resources YT, FunFunFunction - Class Keyword","title":"Class Keyword"},{"location":"module-3/oop-nuts%2Bbolts/#nuts-bolts-of-oop","text":"","title":"Nuts &amp; Bolts of OOP"},{"location":"module-3/oop-nuts%2Bbolts/#example-2","text":"Review the material below and practice ALL of the code snippets to make sure you start to see how objects can use other objects as part of their properties and how we can assign new properties to objects as needed. We'll use the this keyword in functions when we want to assign something to this instance of the object. Object-oriented programming consists of classes and objects. Classes are like templates. For example, a template of a human may include: name, height, weight, date of birth, etc. A class is named with a capital letter. We use a constructor function to define the properties of class. We use the this keyword to set individual properties. See the example below: 1 2 3 4 5 6 7 8 class Human { constructor ( name , height , weight , dob ){ this . name = name ; this . height = height ; this . weight = weight ; this . dob = dob ; } } We can assign methods to classes using the following syntax: 1 2 3 4 5 6 7 8 9 10 11 12 class Human { constructor ( name , height , weight , dob ){ this . name = name ; this . height = height ; this . weight = weight ; this . dob = dob ; } greeting () { return \"Hello \" + this . name + \"!\" ; } } We can instantiate or copy an object from a class just as a chef can use a recipe to replicate the same entree. To instantiate means to create an instance of. Below we create an instance of the class Human , which will be an object named 'chris': 1 const chris = new Human ( \"Chris\" , \"6 ft 2 in\" , \"230 lbs\" , \"July 24th, 1988\" );","title":"Example 2"},{"location":"module-3/oop-nuts%2Bbolts/#see-it-class-keyword","text":"","title":"See It - Class Keyword"},{"location":"module-3/oop-nuts%2Bbolts/#practice-it","text":"","title":"Practice It"},{"location":"module-3/oop-nuts%2Bbolts/#part-1-using-a-class","text":"In a Repl.it, copy the code examples below and follow along with the objectives. Experiment with accessing the properties and methods below using dot-notation( . ): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Human { constructor ( name , height , weight , dob ){ this . name = name ; this . height = height ; this . weight = weight ; this . dob = dob ; } greeting () { return \"Hello \" + this . name + \"!\" ; } } const chris = new Human ( \"Chris\" , \"6 ft 2 in\" , \"230 lbs\" , \"July 24th, 1988\" ); console . log ( chris . name ); console . log ( chris . dob ); console . log ( 'replace me to get weight ' ); chris . greeting (); Instantiate a new Human with your name, height, weight, and DoB. Work on accessing the properties and call the greeting method. 1 2 3 4 5 6 7 8 9 10 11 class Human { constructor ( name , height , weight , dob ){ this . name = name ; this . height = height ; this . weight = weight ; this . dob = dob ; } greeting () { return \"Hello \" + this . name + \"!\" ; } } Experiment further with the example below: 1 2 3 4 5 6 7 8 9 10 11 12 13 class Square { constructor ( sideLength ) { this . sideLength = sideLength ; } calcArea () { return this . sideLength * this . sideLength ; } } const square1 = new Square ( 10 ); console . log ( square1 . sideLength ); square1 . calcArea ();","title":"Part 1: Using a Class"},{"location":"module-3/oop-nuts%2Bbolts/#part-2-create-your-own-classes","text":"Build these in a Repl.it. Seriously, this will prepare you for the BankAccount project. Create a Rectangle class. Instantiate at least one object that takes two arguments in its constructor and calculate its area. Create a Triangle class. Instantiate at least one object and calculate its area.","title":"Part 2: Create Your Own Classes"},{"location":"module-3/oop-nuts%2Bbolts/#additional-resources","text":"YT, FunFunFunction - Class Keyword","title":"Additional Resources"},{"location":"module-3/oop-pt1/","text":"Object-Oriented Programming Part One I really think a champion is defined not by their wins but by how they can recover when they fall.\u2003\u2014Serena Williams Context of OOP As you read over, watch the videos, and play with the practice problems, you might feel there is some redundancy or repetition from previous homework lessons. While this is partly true, it is very important for you to understand these concepts: OOP, functional programming, closure, class , constructors, function factories, bind , and this . Because these ideas can be complex and take time for one to construct a mental model of, we are covering them a little at a time, building up, gradually, your knowledge and understanding of each of them. Read It - OOP Object-oriented programming is a fundamental way to program. Most languages use this model, and JavaScript is no different. However, JavaScript is very different in that it also implements functional programming, but we won't get into all of its wonderful characteristics just yet. For now, let's get to what OOP (object-oriented programming) is. Let's say we want to build a bicycle. Before we go shopping for all of the pieces to build a bike, it would be a good idea to know what we will need for the bicycle. We could say we need a frame, wheels, seat, brakes, handlebars, and reflectors. Wonderful! Now we have a shopping list of the parts needed to build a bicycle. But what if now we wanted to build a new bicycle for each of our family members and friends? There really isn't a point in re-writing our shopping list for each bike. On top of that, each person might just want a different color of frame, type of wheels or handlebars! We could call these different colors and types values and the basic items we need properties or keys. Do you remember building objects before where we had key-value pairs? I hope so, because it's going to come in handy here. Let's build an object-literal called myBicycle : 1 2 3 4 5 6 7 8 const myBicycle = { frame : \"green mountain\" , wheels : \"all-terrain\" , seat : \"soft leather\" , brakes : \"dual-discs\" , handlebars : \"straight\" , reflectors : 0 } Now we have an object that represents the bicycle I want to build, or a list of items to buy. But now Kate wants a blue bicycle with road touring wheels, a synthetic seat and horn shaped handlebars. Let's build a kateBicycle : 1 2 3 4 5 6 7 8 const kateBicycle = { frame : \"blue road\" , wheels : \"road touring\" , seat : \"small synthetic\" , brakes : \"dual-discs\" , handlebars : \"horned\" , reflectors : 4 } Do you notice a pattern? Even as I typed this example, I copy/pasted the key-value pairs of myBicycle and changed the values for kateBicycle . It can get pretty old doing this over and over again (repeating ourselves), especially if we plan to build dozens of bicycles or have thousands of users on our app. The solution to this problem is object-oriented programming . We know what our object is going to look like so we build a class that can then be called over and over again to have new values put inside it. Here are all the parts of a bicycle that make up myBicycle and kateBicycle turned into a class : 1 2 3 4 5 6 7 8 9 10 class Bicycle { constructor ( frame , wheels , seat , brakes , handlebars , reflectors ){ this . frame = frame ; this . wheels = wheels ; this . seat = seat ; this . brakes = brakes ; this . handlebars = handlebars ; this . reflectors = reflectors ; } } Let's take a minute to look at what we just did. First, we figured out the \"shopping-list\" we need to build a bicycle. Then we put all of the things into something called a class . After that we called it something generic like bicycle or user . Then we added a special method to it called constructor. Inside the ( arguments ) of the constructor we passed in all the things NEEDED to make a bicycle. This is the syntax you're going to be using. Just familiarize yourself with it and start memorizing it by typing it out each time to do the practice problems. Inside the code block of the constructor we have a weird word called this . You've seen this before but let's cover it again. this refers to this instance of the class . Think about it as a reference to the object as we pass through the class . A class is a function that returns an object. Each time we call the class bicycle we are going to pass through it declaring certain values to each of the keys. Remember the key-value pairs?? So on this next pass-through with the creation of myBicycle we'll assign values to it based on this instance of the pass-through. If we didn't have the this we wouldn't be able to use the class bicycle as a template to be used multiple times and still keep the memory of each bicycle we made like kateBicycle and momBicycle , etc. If you could talk to the constructor it might say something like this: \"Hey, I'm a constructor and I require a value for every argument inside my (). If you don't give a value for every argument I will assign undefined to the last arguments. Meaning, the order of the arguments matters! And if you want null for something you better put null in for the value.\" From here we can make new bicycles using the class bicycle object. Take a look below at how we call the class bicycle with the keyword new and pass in the values we want to assign it. 1 2 3 4 5 6 const myBicycle = new Bicycle ( \"Green-Mountain\" , \"All-Terrain\" , \"Soft-Leather\" , \"Dual-Discs\" , \"Straight\" , 0 ) console . log ( myBicycle . brakes ); // Dual-Discs console . log ( myBicycle . seat ); // Soft-Leather console . log ( myBicycle . reflectors ); // 0 console . log ( myBicycle . frame ); // Green-Mountain Notice the new keyword. I've made sure to bold all mentions of new throughout this text so you can anticipate a new thing being made with the keyword new . Above we're creating a variable called myBicycle and we're assigning it the value of a new object that has the same structure as class Bicycle and passing to the constructor the values we want to assign to each of the keys. After calling new Bicycle the way we did just above, we would have an object that looks like this: 1 2 3 4 5 6 7 8 const myBicycle = { frame : \"green mountain\" , wheels : \"all-terrain\" , seat : \"soft leather\" , brakes : \"dual-discs\" , handlebars : \"straight\" , reflectors : 0 } Look familiar? We could do this again for Kate's bicycle: 1 2 3 const kateBicycle = new Bicycle ( \"blue road\" , \"road touring\" , \"small synthetic\" , \"dual-discs\" , \"horned\" , 4 ) console . log ( kateBicycle ) // => {frame: \"blue road\", wheels: \"road touring\", seat: \"small synthetic\", brakes: \"dual-discs\", handlebars: \"horned\", reflectors: 4 } In short, object-oriented programming allows us to type less, reuse more, standardize our data structures and pass objects to other objects. See It - OOP & Bind-This OOP In this video we see the big four of OOP and why it's useful. Follow along and notice the use of methods that are created on the objects. We didn't build methods on our class bicycle above but we could have!! Now might be a good time to introduce D.R.Y. In programming there are a few principles to follow while you build any program. As a noobie-developer it isn't so important to focus on these principles, so much as it is to be aware of them. This DRY principle simply says, D on't R epeat Y ourself! In the class bicycle example above, we could have created a new object for each bicycle manually but that would be R epeating ourselves. Instead, we build one template and call it each time we need to create a new bicycle object. Bind and This Pause and play it as you need. Really take the time to look at the code and figure out what each .bind() and this is doing. Practice It - OOP Practice It Pt. 1 Go to the practice problems in the link and work through all 18 Object problems . Seriously, do this for yourself. Yeah, you're tired and want to sleep but you came to school to change your career to improve your lifestyle and sleep more and work less. Let's put the time in now! It's called sacrifice. Sacrifice makes us stronger, more flexible, and better humans. W3S Tutorial - OOP in JS Practice It Pt. 2 In the markdown code below, read through to see what you can make of it. Copy the code into Repl.it and run it. Create a new human with your name and information. Now make your human say their name. Next, create a new AcaStudent that extends Human and is learning 'C#'. Add a new method to the AcaStudent class that lets the human say the language they are learning. Make them say what language they're learning. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 constructor ( name , height , weight , dob ){ this . name = name ; this . height = height ; this . weight = weight ; this . dob = dob ; } greeting () { return \"Hello \" + this . name + \"!\" ; } } class AcaStudent extends Human { constructor ( codingLanguage , name , height , weight , dob ){ super ( name , height , weight , dob ); this . codingLanguage = codingLanguage ; } greeting () { console . log ( \"Hello, my name is \" + this . name + \"! I am learning how to code!\" ); } } const dan = new AcaStudent ( \"JavaScript\" , \"Dan\" , \"5 ft 6 in\" , \"160 lbs\" , \"February 25th, 1986\" ); dan . greeting (); dan . codingLanguage ; Additional Resources The best two things you can read to get a solid grasp of classes are: Article, Javascript.info - OOP Article, CodeProject - OOP YT, FunFunFunction - Bind & this YT, Programming with Mosh - OOP in 7 mins Know Your Docs MDN Docs - Class + OOP","title":"OOP-pt.1"},{"location":"module-3/oop-pt1/#object-oriented-programming-part-one","text":"I really think a champion is defined not by their wins but by how they can recover when they fall.\u2003\u2014Serena Williams","title":"Object-Oriented Programming Part One"},{"location":"module-3/oop-pt1/#context-of-oop","text":"As you read over, watch the videos, and play with the practice problems, you might feel there is some redundancy or repetition from previous homework lessons. While this is partly true, it is very important for you to understand these concepts: OOP, functional programming, closure, class , constructors, function factories, bind , and this . Because these ideas can be complex and take time for one to construct a mental model of, we are covering them a little at a time, building up, gradually, your knowledge and understanding of each of them.","title":"Context of OOP"},{"location":"module-3/oop-pt1/#read-it-oop","text":"Object-oriented programming is a fundamental way to program. Most languages use this model, and JavaScript is no different. However, JavaScript is very different in that it also implements functional programming, but we won't get into all of its wonderful characteristics just yet. For now, let's get to what OOP (object-oriented programming) is. Let's say we want to build a bicycle. Before we go shopping for all of the pieces to build a bike, it would be a good idea to know what we will need for the bicycle. We could say we need a frame, wheels, seat, brakes, handlebars, and reflectors. Wonderful! Now we have a shopping list of the parts needed to build a bicycle. But what if now we wanted to build a new bicycle for each of our family members and friends? There really isn't a point in re-writing our shopping list for each bike. On top of that, each person might just want a different color of frame, type of wheels or handlebars! We could call these different colors and types values and the basic items we need properties or keys. Do you remember building objects before where we had key-value pairs? I hope so, because it's going to come in handy here. Let's build an object-literal called myBicycle : 1 2 3 4 5 6 7 8 const myBicycle = { frame : \"green mountain\" , wheels : \"all-terrain\" , seat : \"soft leather\" , brakes : \"dual-discs\" , handlebars : \"straight\" , reflectors : 0 } Now we have an object that represents the bicycle I want to build, or a list of items to buy. But now Kate wants a blue bicycle with road touring wheels, a synthetic seat and horn shaped handlebars. Let's build a kateBicycle : 1 2 3 4 5 6 7 8 const kateBicycle = { frame : \"blue road\" , wheels : \"road touring\" , seat : \"small synthetic\" , brakes : \"dual-discs\" , handlebars : \"horned\" , reflectors : 4 } Do you notice a pattern? Even as I typed this example, I copy/pasted the key-value pairs of myBicycle and changed the values for kateBicycle . It can get pretty old doing this over and over again (repeating ourselves), especially if we plan to build dozens of bicycles or have thousands of users on our app. The solution to this problem is object-oriented programming . We know what our object is going to look like so we build a class that can then be called over and over again to have new values put inside it. Here are all the parts of a bicycle that make up myBicycle and kateBicycle turned into a class : 1 2 3 4 5 6 7 8 9 10 class Bicycle { constructor ( frame , wheels , seat , brakes , handlebars , reflectors ){ this . frame = frame ; this . wheels = wheels ; this . seat = seat ; this . brakes = brakes ; this . handlebars = handlebars ; this . reflectors = reflectors ; } } Let's take a minute to look at what we just did. First, we figured out the \"shopping-list\" we need to build a bicycle. Then we put all of the things into something called a class . After that we called it something generic like bicycle or user . Then we added a special method to it called constructor. Inside the ( arguments ) of the constructor we passed in all the things NEEDED to make a bicycle. This is the syntax you're going to be using. Just familiarize yourself with it and start memorizing it by typing it out each time to do the practice problems. Inside the code block of the constructor we have a weird word called this . You've seen this before but let's cover it again. this refers to this instance of the class . Think about it as a reference to the object as we pass through the class . A class is a function that returns an object. Each time we call the class bicycle we are going to pass through it declaring certain values to each of the keys. Remember the key-value pairs?? So on this next pass-through with the creation of myBicycle we'll assign values to it based on this instance of the pass-through. If we didn't have the this we wouldn't be able to use the class bicycle as a template to be used multiple times and still keep the memory of each bicycle we made like kateBicycle and momBicycle , etc. If you could talk to the constructor it might say something like this: \"Hey, I'm a constructor and I require a value for every argument inside my (). If you don't give a value for every argument I will assign undefined to the last arguments. Meaning, the order of the arguments matters! And if you want null for something you better put null in for the value.\" From here we can make new bicycles using the class bicycle object. Take a look below at how we call the class bicycle with the keyword new and pass in the values we want to assign it. 1 2 3 4 5 6 const myBicycle = new Bicycle ( \"Green-Mountain\" , \"All-Terrain\" , \"Soft-Leather\" , \"Dual-Discs\" , \"Straight\" , 0 ) console . log ( myBicycle . brakes ); // Dual-Discs console . log ( myBicycle . seat ); // Soft-Leather console . log ( myBicycle . reflectors ); // 0 console . log ( myBicycle . frame ); // Green-Mountain Notice the new keyword. I've made sure to bold all mentions of new throughout this text so you can anticipate a new thing being made with the keyword new . Above we're creating a variable called myBicycle and we're assigning it the value of a new object that has the same structure as class Bicycle and passing to the constructor the values we want to assign to each of the keys. After calling new Bicycle the way we did just above, we would have an object that looks like this: 1 2 3 4 5 6 7 8 const myBicycle = { frame : \"green mountain\" , wheels : \"all-terrain\" , seat : \"soft leather\" , brakes : \"dual-discs\" , handlebars : \"straight\" , reflectors : 0 } Look familiar? We could do this again for Kate's bicycle: 1 2 3 const kateBicycle = new Bicycle ( \"blue road\" , \"road touring\" , \"small synthetic\" , \"dual-discs\" , \"horned\" , 4 ) console . log ( kateBicycle ) // => {frame: \"blue road\", wheels: \"road touring\", seat: \"small synthetic\", brakes: \"dual-discs\", handlebars: \"horned\", reflectors: 4 } In short, object-oriented programming allows us to type less, reuse more, standardize our data structures and pass objects to other objects.","title":"Read It - OOP"},{"location":"module-3/oop-pt1/#see-it-oop-bind-this","text":"","title":"See It - OOP &amp; Bind-This"},{"location":"module-3/oop-pt1/#oop","text":"In this video we see the big four of OOP and why it's useful. Follow along and notice the use of methods that are created on the objects. We didn't build methods on our class bicycle above but we could have!! Now might be a good time to introduce D.R.Y. In programming there are a few principles to follow while you build any program. As a noobie-developer it isn't so important to focus on these principles, so much as it is to be aware of them. This DRY principle simply says, D on't R epeat Y ourself! In the class bicycle example above, we could have created a new object for each bicycle manually but that would be R epeating ourselves. Instead, we build one template and call it each time we need to create a new bicycle object.","title":"OOP"},{"location":"module-3/oop-pt1/#bind-and-this","text":"Pause and play it as you need. Really take the time to look at the code and figure out what each .bind() and this is doing.","title":"Bind and This"},{"location":"module-3/oop-pt1/#practice-it-oop","text":"","title":"Practice It - OOP"},{"location":"module-3/oop-pt1/#practice-it-pt-1","text":"Go to the practice problems in the link and work through all 18 Object problems . Seriously, do this for yourself. Yeah, you're tired and want to sleep but you came to school to change your career to improve your lifestyle and sleep more and work less. Let's put the time in now! It's called sacrifice. Sacrifice makes us stronger, more flexible, and better humans. W3S Tutorial - OOP in JS","title":"Practice It Pt. 1"},{"location":"module-3/oop-pt1/#practice-it-pt-2","text":"In the markdown code below, read through to see what you can make of it. Copy the code into Repl.it and run it. Create a new human with your name and information. Now make your human say their name. Next, create a new AcaStudent that extends Human and is learning 'C#'. Add a new method to the AcaStudent class that lets the human say the language they are learning. Make them say what language they're learning. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 constructor ( name , height , weight , dob ){ this . name = name ; this . height = height ; this . weight = weight ; this . dob = dob ; } greeting () { return \"Hello \" + this . name + \"!\" ; } } class AcaStudent extends Human { constructor ( codingLanguage , name , height , weight , dob ){ super ( name , height , weight , dob ); this . codingLanguage = codingLanguage ; } greeting () { console . log ( \"Hello, my name is \" + this . name + \"! I am learning how to code!\" ); } } const dan = new AcaStudent ( \"JavaScript\" , \"Dan\" , \"5 ft 6 in\" , \"160 lbs\" , \"February 25th, 1986\" ); dan . greeting (); dan . codingLanguage ;","title":"Practice It Pt. 2"},{"location":"module-3/oop-pt1/#additional-resources","text":"The best two things you can read to get a solid grasp of classes are: Article, Javascript.info - OOP Article, CodeProject - OOP YT, FunFunFunction - Bind & this YT, Programming with Mosh - OOP in 7 mins","title":"Additional Resources"},{"location":"module-3/oop-pt1/#know-your-docs","text":"MDN Docs - Class + OOP","title":"Know Your Docs"},{"location":"module-3/oop-pt2/","text":"Object-Oriented Programming Part Two Your mind is a powerful thing. When you fill it with positive thoughts, your life will start to change. Overview We covered the the basics of object-oriented programming through very visual tasks and concrete ideas. Today we're going to go into a little more detail as to why OOP is a common paradigm of programming, including weird words like: _proto_ , prototype and prototypal inheritance . The meaning behind these words isn't absolutely necessary for you to understand at this very moment or this week, but it is important that you know of them because eventually, when you're a mid-level programmer, you will need to understand them to advance to the next stage of your career. Today, let's just get into what each are and what we can do with them now. proto vs prototype We won't spend too much time on this because it's an advanced subject in a very muddy part of JavaScript. If you remember in the pre-work to this class, JavaScript was a language that wasn't planned, designed and built well by a full team. It was, for the most part, hacked together because the internet was becoming a thing and the people at the time didn't understand the full capacity of the internet or how dependent we would be on JavaScript in the future. Because of that, the language has grown organically and, more or less, been patched as developers recognized flaws. Like null returns an object!?! This is actually a bug and can't be fixed else it would break the internet! Again, if you look at all these \"flaws\" as bits of character you can truly fall in love with this language and learn to enjoy these amusing quirks. For short, remember: _proto_ is a property on an object while prototype is a property on a function. These two properties are used by the objects and functions we create so that we have built-in methods that follow each of our objects or functions around. This following around is called delegation. The objects or functions you create don't have to be painstakingly written out to have all the methods we like to use. Remember when we learned the methods of an array like .split() , .pop() , etc.? The objects and functions we build can delegate the task of acquiring those fun and useful methods through the internal prototype chain. For now, don't worry about knowing all the ins-and-outs of the prototype chain . Just know 1) that it's there so when you need to access the _proto_ or prototype object you're not bewildered by it and 2) that inheritance should really be called delegation . Read It - proto vs prototype Forum, Quora - Prototypal Inheritance Blog, Medium - Master the JS Interview See It - proto vs prototype Object.create() The .create() method was added to JavaScript as a way to utilize prototype inheritance more effectively. Remember, prototype inheritance, or delegation, is useful to us not only because we can use the built-in methods but also because it builds faster in the JavaScript engine. All of the fun and useful methods we've grown to love don't have to be built again and again for every single object we make. Instead, we can just reference the methods we need, exactly when we need them through the prototype chain. However, there may be a case like: we want to add a specific method to an object that we will use multiple times throughout the app, just not on every object we make. We don't want to add it to the proto or prototype because then it would be added as a method for ALL of the objects in our app and slow down our JS engine making our app less performant[sic]. A work around is .create() . Object.create() lets us point the new object(s) we create in our app to another object to use as it's prototype. If you're lost, it's okay. This is tough stuff. Luckily you don't have to master this yet but it may help you to start understanding the power of JavaScript's \"flaws\" and begin to use them to your advantage. Check out the upcoming video to get a better understanding of .create() . Read It - Creating Objects using the Prototype Chain Article, CodeBurst - Ways to Create Object in JS Article, SitePoint - Object Creation Best Practices See It - Object.Create Know Your Docs MDN Docs - Object.create() Additional Resources YT, FunFunFunction - _proto_ vs prototype YT, FunFunFunction - Object.create()","title":"OOP-pt.2"},{"location":"module-3/oop-pt2/#object-oriented-programming-part-two","text":"Your mind is a powerful thing. When you fill it with positive thoughts, your life will start to change.","title":"Object-Oriented Programming Part Two"},{"location":"module-3/oop-pt2/#overview","text":"We covered the the basics of object-oriented programming through very visual tasks and concrete ideas. Today we're going to go into a little more detail as to why OOP is a common paradigm of programming, including weird words like: _proto_ , prototype and prototypal inheritance . The meaning behind these words isn't absolutely necessary for you to understand at this very moment or this week, but it is important that you know of them because eventually, when you're a mid-level programmer, you will need to understand them to advance to the next stage of your career. Today, let's just get into what each are and what we can do with them now.","title":"Overview"},{"location":"module-3/oop-pt2/#proto-vs-prototype","text":"We won't spend too much time on this because it's an advanced subject in a very muddy part of JavaScript. If you remember in the pre-work to this class, JavaScript was a language that wasn't planned, designed and built well by a full team. It was, for the most part, hacked together because the internet was becoming a thing and the people at the time didn't understand the full capacity of the internet or how dependent we would be on JavaScript in the future. Because of that, the language has grown organically and, more or less, been patched as developers recognized flaws. Like null returns an object!?! This is actually a bug and can't be fixed else it would break the internet! Again, if you look at all these \"flaws\" as bits of character you can truly fall in love with this language and learn to enjoy these amusing quirks. For short, remember: _proto_ is a property on an object while prototype is a property on a function. These two properties are used by the objects and functions we create so that we have built-in methods that follow each of our objects or functions around. This following around is called delegation. The objects or functions you create don't have to be painstakingly written out to have all the methods we like to use. Remember when we learned the methods of an array like .split() , .pop() , etc.? The objects and functions we build can delegate the task of acquiring those fun and useful methods through the internal prototype chain. For now, don't worry about knowing all the ins-and-outs of the prototype chain . Just know 1) that it's there so when you need to access the _proto_ or prototype object you're not bewildered by it and 2) that inheritance should really be called delegation .","title":"proto vs prototype"},{"location":"module-3/oop-pt2/#read-it-proto-vs-prototype","text":"Forum, Quora - Prototypal Inheritance Blog, Medium - Master the JS Interview","title":"Read It - proto vs prototype"},{"location":"module-3/oop-pt2/#see-it-proto-vs-prototype","text":"","title":"See It - proto vs prototype"},{"location":"module-3/oop-pt2/#objectcreate","text":"The .create() method was added to JavaScript as a way to utilize prototype inheritance more effectively. Remember, prototype inheritance, or delegation, is useful to us not only because we can use the built-in methods but also because it builds faster in the JavaScript engine. All of the fun and useful methods we've grown to love don't have to be built again and again for every single object we make. Instead, we can just reference the methods we need, exactly when we need them through the prototype chain. However, there may be a case like: we want to add a specific method to an object that we will use multiple times throughout the app, just not on every object we make. We don't want to add it to the proto or prototype because then it would be added as a method for ALL of the objects in our app and slow down our JS engine making our app less performant[sic]. A work around is .create() . Object.create() lets us point the new object(s) we create in our app to another object to use as it's prototype. If you're lost, it's okay. This is tough stuff. Luckily you don't have to master this yet but it may help you to start understanding the power of JavaScript's \"flaws\" and begin to use them to your advantage. Check out the upcoming video to get a better understanding of .create() .","title":"Object.create()"},{"location":"module-3/oop-pt2/#read-it-creating-objects-using-the-prototype-chain","text":"Article, CodeBurst - Ways to Create Object in JS Article, SitePoint - Object Creation Best Practices","title":"Read It - Creating Objects using the Prototype Chain"},{"location":"module-3/oop-pt2/#see-it-objectcreate","text":"","title":"See It - Object.Create"},{"location":"module-3/oop-pt2/#know-your-docs","text":"MDN Docs - Object.create()","title":"Know Your Docs"},{"location":"module-3/oop-pt2/#additional-resources","text":"YT, FunFunFunction - _proto_ vs prototype YT, FunFunFunction - Object.create()","title":"Additional Resources"},{"location":"module-4/api-keys/","text":"API Documentation and API Keys Most of the important things in the world have been accomplished by people who have kept on trying when there seemed to be no hope at all.\u2003\u2014Dale Carnegie As mentioned in the last pre-homework, some APIs require the setup of an account with an API key attached to it. This process is pretty standard and common. You should get familiar with this process and understand it before your next assignment which is to build a small app that uses an API that requires an API key, or permission and proof of permission. APIs - Setting up an Account The process for each API is usually the same: agree to the terms, create an account, verify the account through email then get the key through email. Each may have it's own quirks but it generally looks like that. For tonight's homework we're going to get an API key from the NYC MTA . Go ahead and click the link to get an API key and fill out the Google Form. See It - API Keys Keeping Your API key a Secret with a .env file Obviously you don't want your API key to be used by other people. Therefore you shouldn't commit it to your repo on GitHub. To make sure you can still use your API keys while keeping them secret, make sure you understand how to use the node package: dotenv to keep up with your private api keys. We'll also go deeper into this in class. Practice It Use the previous See it - API Keys video to request data just in your browser for now. Here's the Chrome Extension she mentions in the video: JSON-Formatter from Chrome Reading API Documentation Documentation is key!! To work with an API you must, must, must read the documentation . Someone else, another person, has built the program you want to interface with and has given you, in English, how to interact with it and use the data. Quite honestly, if developers build an API and fail to deliver the documentation for it, the API will not get used and fall out of favor and fashion. As an example, even this funny, strange, and offensive API has very clear documentation. As you can see, changing the path /version \"Will return content with the current FOAAS version number.\" You can practice the request in your browser, then bring it into a fetch() request. See it - REST API Concepts YT, WebConcepts - REST API Concepts and Examples","title":"API Keys"},{"location":"module-4/api-keys/#api-documentation-and-api-keys","text":"Most of the important things in the world have been accomplished by people who have kept on trying when there seemed to be no hope at all.\u2003\u2014Dale Carnegie As mentioned in the last pre-homework, some APIs require the setup of an account with an API key attached to it. This process is pretty standard and common. You should get familiar with this process and understand it before your next assignment which is to build a small app that uses an API that requires an API key, or permission and proof of permission.","title":"API Documentation and API Keys"},{"location":"module-4/api-keys/#apis-setting-up-an-account","text":"The process for each API is usually the same: agree to the terms, create an account, verify the account through email then get the key through email. Each may have it's own quirks but it generally looks like that. For tonight's homework we're going to get an API key from the NYC MTA . Go ahead and click the link to get an API key and fill out the Google Form.","title":"APIs - Setting up an Account"},{"location":"module-4/api-keys/#see-it-api-keys","text":"","title":"See It - API Keys"},{"location":"module-4/api-keys/#keeping-your-api-key-a-secret-with-a-env-file","text":"Obviously you don't want your API key to be used by other people. Therefore you shouldn't commit it to your repo on GitHub. To make sure you can still use your API keys while keeping them secret, make sure you understand how to use the node package: dotenv to keep up with your private api keys. We'll also go deeper into this in class.","title":"Keeping Your API key a Secret with a .env file"},{"location":"module-4/api-keys/#practice-it","text":"Use the previous See it - API Keys video to request data just in your browser for now. Here's the Chrome Extension she mentions in the video: JSON-Formatter from Chrome","title":"Practice It"},{"location":"module-4/api-keys/#reading-api-documentation","text":"Documentation is key!! To work with an API you must, must, must read the documentation . Someone else, another person, has built the program you want to interface with and has given you, in English, how to interact with it and use the data. Quite honestly, if developers build an API and fail to deliver the documentation for it, the API will not get used and fall out of favor and fashion. As an example, even this funny, strange, and offensive API has very clear documentation. As you can see, changing the path /version \"Will return content with the current FOAAS version number.\" You can practice the request in your browser, then bring it into a fetch() request.","title":"Reading API Documentation"},{"location":"module-4/api-keys/#see-it-rest-api-concepts","text":"YT, WebConcepts - REST API Concepts and Examples","title":"See it - REST API Concepts"},{"location":"module-4/class-13/","text":"Class 13: Address Book I learned that courage was not the absence of fear, but the triumph over it. The brave man is not he who does not feel afraid, but he who conquers that fear.\u2003\u2014Nelson Mandela Greet, Outline, and Objectify Today we're going to: OBJECTIVE: By re-engaging with previously learned knowledge and applying it to a new challenge the student will deepen their understanding and be prepared to creatively reuse these techniques in new ways. Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time: Build an address book with the provided API Push Yourself Further Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins If you worked on the practice problem in the pre-work you should have a firm grasp of an API and how to request data from it. Today we're going to build an address book using a free API as our server of data. In pairs, create a list of users and display their info: Read these instructions and understand the requirements FIRST Whiteboard your app Make a code plan Pseudo code and then translate to JavaScript Create a new repo (name it descriptively well), clone it to your local machine and share it with your partner Open the directory and create an index.html and main.js file to fetch a user and display them one at at time Use the API: https://randomuser.me/api/ to fetch a user now Fetch a new user multiple times and store them in an array Then list out all the users in your address book array by name and picture Figure out how to fetch multiple users in one fetch request Fetch multiple users on window load Add a button to each user that when clicked displays the rest of their information like DOB , address and so forth Once you have the functionality working, feel free to style and structure your address book with CSS and HTML YOU KNOW HOW TO DO ALL OF THIS BY NOW. TRUST YOURSELF!! Push Yourself Further Display your users alphabetically Add another button to hide the information Request only users from AU, then US, then FR and then GB Figure out how to only request name, picture and cell Figure out how to exclude: dob, registered, nationality, location ABSOLUTELY THE LAST THING YOU SHOULD DO: Style your address book with some flare by adding a CSS file Student Feedback Loading\u2026 Exit Recap, Attendance, and Reminders, 5 mins Create Address Book Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Class 13 Address Book"},{"location":"module-4/class-13/#class-13-address-book","text":"I learned that courage was not the absence of fear, but the triumph over it. The brave man is not he who does not feel afraid, but he who conquers that fear.\u2003\u2014Nelson Mandela","title":"Class 13: Address Book"},{"location":"module-4/class-13/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE: By re-engaging with previously learned knowledge and applying it to a new challenge the student will deepen their understanding and be prepared to creatively reuse these techniques in new ways. Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time: Build an address book with the provided API Push Yourself Further Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-4/class-13/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-4/class-13/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-4/class-13/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-4/class-13/#creation-time-60-90-mins","text":"If you worked on the practice problem in the pre-work you should have a firm grasp of an API and how to request data from it. Today we're going to build an address book using a free API as our server of data. In pairs, create a list of users and display their info: Read these instructions and understand the requirements FIRST Whiteboard your app Make a code plan Pseudo code and then translate to JavaScript Create a new repo (name it descriptively well), clone it to your local machine and share it with your partner Open the directory and create an index.html and main.js file to fetch a user and display them one at at time Use the API: https://randomuser.me/api/ to fetch a user now Fetch a new user multiple times and store them in an array Then list out all the users in your address book array by name and picture Figure out how to fetch multiple users in one fetch request Fetch multiple users on window load Add a button to each user that when clicked displays the rest of their information like DOB , address and so forth Once you have the functionality working, feel free to style and structure your address book with CSS and HTML YOU KNOW HOW TO DO ALL OF THIS BY NOW. TRUST YOURSELF!!","title":"Creation Time, 60-90 mins"},{"location":"module-4/class-13/#push-yourself-further","text":"Display your users alphabetically Add another button to hide the information Request only users from AU, then US, then FR and then GB Figure out how to only request name, picture and cell Figure out how to exclude: dob, registered, nationality, location ABSOLUTELY THE LAST THING YOU SHOULD DO: Style your address book with some flare by adding a CSS file","title":"Push Yourself Further"},{"location":"module-4/class-13/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-4/class-13/#exit-recap-attendance-and-reminders-5-mins","text":"Create Address Book Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-4/class-14/","text":"Class 14: Pair Programming New API App There is only one thing that makes a dream impossible to achieve: the fear of failure.\u2003\u2015Paulo Coelho Greet, Outline, and Objectify Today we're going to: OBJECTIVE: By re-engaging with previously learned knowledge and applying it to a new challenge the student will deepen their understanding and be prepared to creatively reuse these techniques in new ways. Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Choose a prompt that interests you Partner up and plan your app The instructor will help students learn to create a .env file!! Whiteboard, code plan and build your app in a new repo Push Yourself Further Interview Questions: Blog to Show You Know Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins We've done a lot of programming by ourselves but rarely do we program in a bubble alone. Most of the time we are usually working with a team. Today you are going to choose an app you want to build, pair up with someone based on your mutual interests, create a repo, clone it to each of your machines, work in separate branches and collaborate to figure out the docs of the API you choose and the layout and style of the app you want to build. Choose an app you want to build Pair up with someone based on your interests Create a repo using your template Clone it to one of your machines npm init Understand dotenv npm install dotenv --save require('dotenv').config() at the top of your main.js create a .gitignore file in the root folder add .env to the .gitignore file create a .env in the root folder and save your API key in it by... adding something like SECRET_KEY=abcd1234 to the .env file git add commit push ... Now clone it to your partner's machine Repeat the .env file process so each of you have a copy of the API key Work in separate branches (be careful of merge conflicts) Focus on functionality first Only style after you have all the functionality working The projects can become a final project if you like. You can continue building them on your own or together. In class, however, we are just going to focus on accessing the API and doing a few simple things with the data we get back. Prompts Brewery App [https://www.brewerydb.com/developers](https://www.brewerydb.com/developers) Build an app that allows a user to find breweries near them. Remember the Geolocation API you learned in 101! Allow users to \"heart\" their favorite places. Pokemon Collection [https://www.pokeapi.co/](https://pokeapi.co/) Sign up for api key Create an arena that displays two Pokemon battling each other. Compare the two to see who is likely to win. Marvel Character Look-Up [https://developer.marvel.com/documentation/getting_started](https://developer.marvel.com/documentation/getting_started) Sign up for an api key Create a collector catalog of all the characters a person has/wants to collect. Push Yourself Further Find more APIs to spark your imagination. Check out this API of APIs! Student Feedback Loading\u2026 Blogs to Show You Know Blog Prompts Exit Recap, Attendance, and Reminders, 5 mins Create PairProgramming-API App Assignment Create 207 Blog Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Class 14 New API App"},{"location":"module-4/class-14/#class-14-pair-programming-new-api-app","text":"There is only one thing that makes a dream impossible to achieve: the fear of failure.\u2003\u2015Paulo Coelho","title":"Class 14: Pair Programming New API App"},{"location":"module-4/class-14/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE: By re-engaging with previously learned knowledge and applying it to a new challenge the student will deepen their understanding and be prepared to creatively reuse these techniques in new ways. Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Choose a prompt that interests you Partner up and plan your app The instructor will help students learn to create a .env file!! Whiteboard, code plan and build your app in a new repo Push Yourself Further Interview Questions: Blog to Show You Know Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-4/class-14/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-4/class-14/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-4/class-14/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-4/class-14/#creation-time-60-90-mins","text":"We've done a lot of programming by ourselves but rarely do we program in a bubble alone. Most of the time we are usually working with a team. Today you are going to choose an app you want to build, pair up with someone based on your mutual interests, create a repo, clone it to each of your machines, work in separate branches and collaborate to figure out the docs of the API you choose and the layout and style of the app you want to build. Choose an app you want to build Pair up with someone based on your interests Create a repo using your template Clone it to one of your machines npm init Understand dotenv npm install dotenv --save require('dotenv').config() at the top of your main.js create a .gitignore file in the root folder add .env to the .gitignore file create a .env in the root folder and save your API key in it by... adding something like SECRET_KEY=abcd1234 to the .env file git add commit push ... Now clone it to your partner's machine Repeat the .env file process so each of you have a copy of the API key Work in separate branches (be careful of merge conflicts) Focus on functionality first Only style after you have all the functionality working The projects can become a final project if you like. You can continue building them on your own or together. In class, however, we are just going to focus on accessing the API and doing a few simple things with the data we get back.","title":"Creation Time, 60-90 mins"},{"location":"module-4/class-14/#prompts","text":"","title":"Prompts"},{"location":"module-4/class-14/#brewery-app","text":"[https://www.brewerydb.com/developers](https://www.brewerydb.com/developers) Build an app that allows a user to find breweries near them. Remember the Geolocation API you learned in 101! Allow users to \"heart\" their favorite places.","title":"Brewery App"},{"location":"module-4/class-14/#pokemon-collection","text":"[https://www.pokeapi.co/](https://pokeapi.co/) Sign up for api key Create an arena that displays two Pokemon battling each other. Compare the two to see who is likely to win.","title":"Pokemon Collection"},{"location":"module-4/class-14/#marvel-character-look-up","text":"[https://developer.marvel.com/documentation/getting_started](https://developer.marvel.com/documentation/getting_started) Sign up for an api key Create a collector catalog of all the characters a person has/wants to collect.","title":"Marvel Character Look-Up"},{"location":"module-4/class-14/#push-yourself-further","text":"Find more APIs to spark your imagination. Check out this API of APIs!","title":"Push Yourself Further"},{"location":"module-4/class-14/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-4/class-14/#blogs-to-show-you-know","text":"Blog Prompts","title":"Blogs to Show You Know"},{"location":"module-4/class-14/#exit-recap-attendance-and-reminders-5-mins","text":"Create PairProgramming-API App Assignment Create 207 Blog Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-4/class-15/","text":"Class 15: Testing Fetch & Recursion Your true success in life begins only when you make the commitment to become excellent at what you do.\u2003\u2014Brian Tracy Greet, Outline, and Objectify Today we're going to: OBJECTIVE: By re-engaging with previously learned knowledge and applying it to a new challenge the student will deepen their understanding and be prepared to creatively reuse these techniques in new ways. Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Project 1: Unit Testing Project 2: Recursion, Exponent of Number Project 3: Recursion, Sum of Array Push Yourself Further Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List Creation Time, 60-90 mins Part 1: Testing Your Fetch Last week you paired up and built an app that fetches data from an API. Today you're going to add unit tests for multiple situations: Mistyped address Out of range request Wrong API key Hypothetical 4 Hypothetical 5 Instructions Pair up with your partner again git status to make sure you each have pushed up and merge all of your changes Work on one computer and add the 5 unit tests mentioned. You will have to refactor your request a bit to add in fetch as a dependency Part 2: Recursive Exponent In a Repl.it called Exponent of Number - Recursively Write a recursive JavaScript program to compute the exponent of any number given. Note: The exponent of a number says how many times the base number is used as a factor. Example: If you were given the number 64: 8 ** 2 = 8 x 8 = 64 . Here 8 is the base and 2 is the exponent. MDN Docs- Exponentiation** Turn in the URL. Part 3: Recursive Sum of Array In a new Repl.it called Sum of Array - Recursively Write a recursive JavaScript program to compute the sum of an array of integers. Example : const array1 = [1, 2, 3, 4, 5, 6] sumArr(array1) // => Expected Output : 21 Turn in the URL. Student Feedback Loading\u2026 Exit Recap, Attendance, and Reminders, 5 mins Create FetchTesting Assignment Create 1 Recursion Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Class 15 Testing Fetch"},{"location":"module-4/class-15/#class-15-testing-fetch-recursion","text":"Your true success in life begins only when you make the commitment to become excellent at what you do.\u2003\u2014Brian Tracy","title":"Class 15: Testing Fetch &amp; Recursion"},{"location":"module-4/class-15/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE: By re-engaging with previously learned knowledge and applying it to a new challenge the student will deepen their understanding and be prepared to creatively reuse these techniques in new ways. Questions for Student Led Discussion Interview Challenge Student Presentations Creation Time Project 1: Unit Testing Project 2: Recursion, Exponent of Number Project 3: Recursion, Sum of Array Push Yourself Further Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-4/class-15/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-4/class-15/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-4/class-15/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-4/class-15/#creation-time-60-90-mins","text":"","title":"Creation Time, 60-90 mins"},{"location":"module-4/class-15/#part-1-testing-your-fetch","text":"Last week you paired up and built an app that fetches data from an API. Today you're going to add unit tests for multiple situations: Mistyped address Out of range request Wrong API key Hypothetical 4 Hypothetical 5","title":"Part 1: Testing Your Fetch"},{"location":"module-4/class-15/#instructions","text":"Pair up with your partner again git status to make sure you each have pushed up and merge all of your changes Work on one computer and add the 5 unit tests mentioned. You will have to refactor your request a bit to add in fetch as a dependency","title":"Instructions"},{"location":"module-4/class-15/#part-2-recursive-exponent","text":"In a Repl.it called Exponent of Number - Recursively Write a recursive JavaScript program to compute the exponent of any number given. Note: The exponent of a number says how many times the base number is used as a factor. Example: If you were given the number 64: 8 ** 2 = 8 x 8 = 64 . Here 8 is the base and 2 is the exponent. MDN Docs- Exponentiation** Turn in the URL.","title":"Part 2: Recursive Exponent"},{"location":"module-4/class-15/#part-3-recursive-sum-of-array","text":"In a new Repl.it called Sum of Array - Recursively Write a recursive JavaScript program to compute the sum of an array of integers. Example : const array1 = [1, 2, 3, 4, 5, 6] sumArr(array1) // => Expected Output : 21 Turn in the URL.","title":"Part 3: Recursive Sum of Array"},{"location":"module-4/class-15/#student-feedback","text":"Loading\u2026","title":"Student Feedback"},{"location":"module-4/class-15/#exit-recap-attendance-and-reminders-5-mins","text":"Create FetchTesting Assignment Create 1 Recursion Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-4/class-16/","text":"Class 16: Lodash + Recursion Believe in yourself, take on your challenges, dig deep within yourself to conquer fears. Never let anyone bring you down. You got to keep going.\u2003\u2014Chantal Sutherland Greet, Outline, and Objectify Today we're going to: OBJECTIVE: By re-engaging with previously learned knowledge and applying it to a new challenge the student will deepen their understanding and be prepared to creatively reuse these techniques in new ways. Questions for Student Led Discussion Interview Challenge Student Presentations: Graduation App Pitches - 60 minutes End of Course Evaluation Creation Time Project 1: Lodash - 20 minutes Project 2: Recursion, find GCD - 30 minutes Push Yourself Further Interview Questions: Blog to Show You Know Exit Recap, Attendance, and Reminders Questions for Student Led Discussion, 15 mins Questions to prompt discussion Interview Challenge, 15 mins See Your Challenge Here Student Presentations, 15 mins See Student Presentations List End of Course Feedback Take 5 - 10 minutes now to complete the End of Course Evaluation. This information is incredibly important to our organization to improve, grow our instructors, textbooks, and community. End of Course Evaluation Creation Time, 60-90 mins Part 1: Lodash You've used dotenv already so you know about Node and npm. Now bring in this npm module and learn to use it. Yes, it will be a little challenging because you've never worked with this module before but often times interviews will go like this. You don't really know the library but they ask you about it, you've probably heard about it and now you're going to figure out how to use it. While pair-programming, create a new repo: \"Lodash-Practice\". git clone the repo. Then use npm init to initialize the repo for Node. Hit Enter multiple times to generate an empty and basic package.json. Install lodash. Use this blog on lodash to understand the power. Use the lodash documentation . Use this video to see how to use lodash. Build a simple terminal app that uses at least 5 lodash methods. Use fake data or APIs you have worked with in previous projects or google fake data you can use. - [ ] Either make a fetch or save it in a few variables. Console.log the output of each lodash method called on the fake data. Use at least these methods: _.chunk() , _.reverse() , _.without() , _.shuffle() . Create unit tests with Mocha for each function you build. TIP: use the data from day 11 for arrays and objects to tinker with. Or google fake data. Part 2: Recursion, find GCD In a new Repl.it called: GCD-Recursion Write a recursive JavaScript program to find the greatest common divisor (gcd) of two positive numbers. Example: findGCD(25, 20) // => 5 findGCD(50, 20) // => 10 Push Yourself Further Continue on! After you finish these five, switch roles\u2014navigator is now the driver and the driver is now the navigator. Create 5 more inputs, buttons and displays for 5 more lodash methods. Create unit tests for each of your functions. End of Course Feedback Please take 5 - 10 minutes now to complete the End of Course Evaluation . This information is incredibly important for our organization to improve, grow our instructors, textbooks, and community. Blogs to Show You Know Blog Prompts Exit Recap, Attendance, and Reminders, 5 mins Create Lodash Assignment Create 208 Blog Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Class 16 Lodash & Recursion"},{"location":"module-4/class-16/#class-16-lodash-recursion","text":"Believe in yourself, take on your challenges, dig deep within yourself to conquer fears. Never let anyone bring you down. You got to keep going.\u2003\u2014Chantal Sutherland","title":"Class 16: Lodash + Recursion"},{"location":"module-4/class-16/#greet-outline-and-objectify","text":"Today we're going to: OBJECTIVE: By re-engaging with previously learned knowledge and applying it to a new challenge the student will deepen their understanding and be prepared to creatively reuse these techniques in new ways. Questions for Student Led Discussion Interview Challenge Student Presentations: Graduation App Pitches - 60 minutes End of Course Evaluation Creation Time Project 1: Lodash - 20 minutes Project 2: Recursion, find GCD - 30 minutes Push Yourself Further Interview Questions: Blog to Show You Know Exit Recap, Attendance, and Reminders","title":"Greet, Outline, and Objectify"},{"location":"module-4/class-16/#questions-for-student-led-discussion-15-mins","text":"Questions to prompt discussion","title":"Questions for Student Led Discussion, 15 mins"},{"location":"module-4/class-16/#interview-challenge-15-mins","text":"See Your Challenge Here","title":"Interview Challenge, 15 mins"},{"location":"module-4/class-16/#student-presentations-15-mins","text":"See Student Presentations List","title":"Student Presentations, 15 mins"},{"location":"module-4/class-16/#end-of-course-feedback","text":"Take 5 - 10 minutes now to complete the End of Course Evaluation. This information is incredibly important to our organization to improve, grow our instructors, textbooks, and community. End of Course Evaluation","title":"End of Course Feedback"},{"location":"module-4/class-16/#creation-time-60-90-mins","text":"","title":"Creation Time, 60-90 mins"},{"location":"module-4/class-16/#part-1-lodash","text":"You've used dotenv already so you know about Node and npm. Now bring in this npm module and learn to use it. Yes, it will be a little challenging because you've never worked with this module before but often times interviews will go like this. You don't really know the library but they ask you about it, you've probably heard about it and now you're going to figure out how to use it. While pair-programming, create a new repo: \"Lodash-Practice\". git clone the repo. Then use npm init to initialize the repo for Node. Hit Enter multiple times to generate an empty and basic package.json. Install lodash. Use this blog on lodash to understand the power. Use the lodash documentation . Use this video to see how to use lodash. Build a simple terminal app that uses at least 5 lodash methods. Use fake data or APIs you have worked with in previous projects or google fake data you can use. - [ ] Either make a fetch or save it in a few variables. Console.log the output of each lodash method called on the fake data. Use at least these methods: _.chunk() , _.reverse() , _.without() , _.shuffle() . Create unit tests with Mocha for each function you build. TIP: use the data from day 11 for arrays and objects to tinker with. Or google fake data.","title":"Part 1: Lodash"},{"location":"module-4/class-16/#part-2-recursion-find-gcd","text":"In a new Repl.it called: GCD-Recursion Write a recursive JavaScript program to find the greatest common divisor (gcd) of two positive numbers. Example: findGCD(25, 20) // => 5 findGCD(50, 20) // => 10","title":"Part 2: Recursion, find GCD"},{"location":"module-4/class-16/#push-yourself-further","text":"Continue on! After you finish these five, switch roles\u2014navigator is now the driver and the driver is now the navigator. Create 5 more inputs, buttons and displays for 5 more lodash methods. Create unit tests for each of your functions.","title":"Push Yourself Further"},{"location":"module-4/class-16/#end-of-course-feedback_1","text":"Please take 5 - 10 minutes now to complete the End of Course Evaluation . This information is incredibly important for our organization to improve, grow our instructors, textbooks, and community.","title":"End of Course Feedback"},{"location":"module-4/class-16/#blogs-to-show-you-know","text":"Blog Prompts","title":"Blogs to Show You Know"},{"location":"module-4/class-16/#exit-recap-attendance-and-reminders-5-mins","text":"Create Lodash Assignment Create 208 Blog Assignment Prepare for next by completing all of your pre-class lessons Complete the feedback survey","title":"Exit Recap, Attendance, and Reminders, 5 mins"},{"location":"module-4/dataFromAPIs/","text":"Data From APIs Whatever you hold in your mind on a consistent basis is exactly what you will experience in your life.\u2003\u2015Tony Robbins Overview So far we've learned how to access arrays and objects, extract their values, return them in functions and display them in the DOM. But all of the arrays and objects we've worked with have been static , in that they don't change. We know how many items are in the array and exactly what key-value pairs are in the objects. But to work with a real, production-ready websites we'll need to know how to access data we don't exactly know the structure of or number of items yet, in order to build a dynamic website! This data will be given to us from a database via an API , or application programming interface . This is a big fancy word for a computer program that gives us something when we ask for it. The reason it's a programming interface is that it doesn't have a screen for us as humans to see. Instead the computer program takes requests via promises. These promises are simply functions that request information, wait for a response and when they get a response they promise to do something with it afterwards. The reason we have to have it promise to us to do something after the response is that these APIs we'll be requesting information from are remote; they can be hundreds and thousands of miles away from us or our users. Therefore, there will be some time latency between the request and the return of the requested information. Let's get into the details and syntax of this, shall we? What's an API? As we just discussed, an API is a program that takes a request, passes it to the right place and returns to you the thing you requested. There are hundreds of thousands of APIs available for you to use . Some are completely free and you can request from them now! Others require you to sign up and get an API key to have permission to request from the API, while others require you to pay a certain amount of money either per request or per month. So you can get started for free to practice and eventually graduate to integrate someone else's API into an app you build and deploy! Either way, two things are certain, 1) we will be using some free APIs in the next few classes along with a couple that require you to register an account to get an API key, and 2) in the next course term after 211 you will learn how to build your own API to serve your own app and/or share with the world!! See It - APIs","title":"Data From APIs"},{"location":"module-4/dataFromAPIs/#data-from-apis","text":"Whatever you hold in your mind on a consistent basis is exactly what you will experience in your life.\u2003\u2015Tony Robbins","title":"Data From APIs"},{"location":"module-4/dataFromAPIs/#overview","text":"So far we've learned how to access arrays and objects, extract their values, return them in functions and display them in the DOM. But all of the arrays and objects we've worked with have been static , in that they don't change. We know how many items are in the array and exactly what key-value pairs are in the objects. But to work with a real, production-ready websites we'll need to know how to access data we don't exactly know the structure of or number of items yet, in order to build a dynamic website! This data will be given to us from a database via an API , or application programming interface . This is a big fancy word for a computer program that gives us something when we ask for it. The reason it's a programming interface is that it doesn't have a screen for us as humans to see. Instead the computer program takes requests via promises. These promises are simply functions that request information, wait for a response and when they get a response they promise to do something with it afterwards. The reason we have to have it promise to us to do something after the response is that these APIs we'll be requesting information from are remote; they can be hundreds and thousands of miles away from us or our users. Therefore, there will be some time latency between the request and the return of the requested information. Let's get into the details and syntax of this, shall we?","title":"Overview"},{"location":"module-4/dataFromAPIs/#whats-an-api","text":"As we just discussed, an API is a program that takes a request, passes it to the right place and returns to you the thing you requested. There are hundreds of thousands of APIs available for you to use . Some are completely free and you can request from them now! Others require you to sign up and get an API key to have permission to request from the API, while others require you to pay a certain amount of money either per request or per month. So you can get started for free to practice and eventually graduate to integrate someone else's API into an app you build and deploy! Either way, two things are certain, 1) we will be using some free APIs in the next few classes along with a couple that require you to register an account to get an API key, and 2) in the next course term after 211 you will learn how to build your own API to serve your own app and/or share with the world!!","title":"What's an API?"},{"location":"module-4/dataFromAPIs/#see-it-apis","text":"","title":"See It - APIs"},{"location":"module-4/developSeries-MusicForYourBrain/","text":"Develop Series: Music for Your Brain If you haven't already started finding music to help you focus your attention in on the problem at hand, now's your chance. Just like working or cleaning the house is always made better and easier with music, so is coding! Having the right rhythm to think and type to can contribute so much to your efficiency as a programmer. While finding music can be a daunting task, using a few focused searches can help you narrow in on the best music for you. My personal favorite is the Focus tracks on Brain.fm . It's an app that offers a variety of 2 hour tracks of binaural sounds, each with a beginning, middle and end, to help you focus, meditate, relax, recharge and sleep. It has a monthly membership but in my experience with it so far, it is worth way more than I pay! I can code for hours with the focus tracks and sleep peacefully with the relax tracks. Google Play : search Coding Music Spotify : search Brain Food, focus, concentration, electronic, dub step or coding YouTube : Joma Tech, chill lofi beats to code to Meditative Mind ZenLifeRelax Binaural meditation music Brain.fm : Focus track! Action Item Start your search and save your personal tracks that keep you in the groove longer. This will pay huge dividends in the future! Create a playlist of music that keeps you going.","title":"Develop - Code Music"},{"location":"module-4/developSeries-MusicForYourBrain/#develop-series-music-for-your-brain","text":"If you haven't already started finding music to help you focus your attention in on the problem at hand, now's your chance. Just like working or cleaning the house is always made better and easier with music, so is coding! Having the right rhythm to think and type to can contribute so much to your efficiency as a programmer. While finding music can be a daunting task, using a few focused searches can help you narrow in on the best music for you. My personal favorite is the Focus tracks on Brain.fm . It's an app that offers a variety of 2 hour tracks of binaural sounds, each with a beginning, middle and end, to help you focus, meditate, relax, recharge and sleep. It has a monthly membership but in my experience with it so far, it is worth way more than I pay! I can code for hours with the focus tracks and sleep peacefully with the relax tracks. Google Play : search Coding Music Spotify : search Brain Food, focus, concentration, electronic, dub step or coding YouTube : Joma Tech, chill lofi beats to code to Meditative Mind ZenLifeRelax Binaural meditation music Brain.fm : Focus track!","title":"Develop Series: Music for Your Brain"},{"location":"module-4/developSeries-MusicForYourBrain/#action-item","text":"Start your search and save your personal tracks that keep you in the groove longer. This will pay huge dividends in the future! Create a playlist of music that keeps you going.","title":"Action Item"},{"location":"module-4/fetch-API/","text":"The Fetch API Now to what we'll really be using in class... fetch() . Fetch is actually REALLY, VERY EXTREMELY easy to use! As you can see in the following video: fetch() takes a URL to request data from then its response, usually shortened as res, is turned into Javascript Object Notation, JSON, with the method: .json() like so: res.json() . then, the now JSON formatted response is passed to a callback function as a named argument like post and the callback function does something with it. In the case we see in the video it's logged to the console. In the Practice It section ahead you'll get it into the DOM. See It - Fetch API YT, Paul Halliday - How to Use Fetch with JavaScript Practice It - Fetch Create a new repo in your GitHub called FetchPractice-1 Clone it into your devFolder Inside the new repo create two files: index.html and main.js Copy/paste the code below into the respective files While working throughout this fetch practice make sure you reference and read in its entirety the MDN Docs on fetch() Using the documents at jsonplaceholder , for each of the buttons listed in the index.html file: Create a function that fetches the data the button should fetch Push the response into an array: arrayOfPosts Display them as an li in a ul Using the docs on jsonplaceholder , post a new post to the database. Using the docs, put (edit) a post. Get this all finished before coming into class. If you don't you will be very unprepared index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Fetch Practice </ title > </ head > < body > <!-- When you click this button, the posts collected in the fetch request will be logged in the console in your devtools tray --> < button onclick = \"consolePosts()\" > Console Posts </ button > <!-- When you click this button the posts collected from the fetch request will be displayed below in the ul element with the id='all-posts' --> < button onclick = \"displayPost()\" > Display Posts </ button > < button onclick = \"\" > Fetch 5 Posts </ button > < button onclick = \"\" > Fetch Comments </ button > < button onclick = \"\" > Fetch Users </ button > < div > < h3 > All Posts </ h3 > < ul id = 'all-posts' ></ ul > </ div > < script src = \"./main.js\" ></ script > </ body > </ html > main.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 let arrayOfPosts ; // This function waits for the web page to be loaded, when it does it will run the code inside of it which happens to be getPosts() window . onload = function () { getPosts () } // This function is going to make a fetch request to the URL inside its parameter brackets (). Then it will turn the response (data it's getting back), saved here as res. The res.json will not be saved as posts and saved into the variable, arrayOfPosts const getPosts = () => { fetch ( 'http://jsonplaceholder.typicode.com/posts' ) . then ( res => res . json ()) . then ( posts => arrayOfPosts = posts ) } // This function logs the results in your browser's console const consolePosts = () => { console . log ( arrayOfPosts ) } // this function creates elements inside the all-posts ul, then appends text inside it with the posts that were returned in the request. const displayPost = () => { const allPosts = document . getElementById ( 'all-posts' ) arrayOfPosts . map (( post , index ) => { const li = document . createElement ( 'li' ) const text = document . createTextNode ( `# ${ index } , Title: ${ post . title } : ${ post . body } , by user: ${ post . userId } ` ) li . appendChild ( text ) allPosts . append ( li ) }) } /* Your job now is to follow the functions above and use them as templates to build the functionality the buttons in the index.html file already have laid out in it. This way you can learn how to build fetch requests and work with other APIs and become a real developer!! */ Know Your Docs MDN Docs - Web APIs MDN Docs - Fetch","title":"Fetch API"},{"location":"module-4/fetch-API/#the-fetch-api","text":"Now to what we'll really be using in class... fetch() . Fetch is actually REALLY, VERY EXTREMELY easy to use! As you can see in the following video: fetch() takes a URL to request data from then its response, usually shortened as res, is turned into Javascript Object Notation, JSON, with the method: .json() like so: res.json() . then, the now JSON formatted response is passed to a callback function as a named argument like post and the callback function does something with it. In the case we see in the video it's logged to the console. In the Practice It section ahead you'll get it into the DOM.","title":"The Fetch API"},{"location":"module-4/fetch-API/#see-it-fetch-api","text":"YT, Paul Halliday - How to Use Fetch with JavaScript","title":"See It - Fetch API"},{"location":"module-4/fetch-API/#practice-it-fetch","text":"Create a new repo in your GitHub called FetchPractice-1 Clone it into your devFolder Inside the new repo create two files: index.html and main.js Copy/paste the code below into the respective files While working throughout this fetch practice make sure you reference and read in its entirety the MDN Docs on fetch() Using the documents at jsonplaceholder , for each of the buttons listed in the index.html file: Create a function that fetches the data the button should fetch Push the response into an array: arrayOfPosts Display them as an li in a ul Using the docs on jsonplaceholder , post a new post to the database. Using the docs, put (edit) a post. Get this all finished before coming into class. If you don't you will be very unprepared index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Fetch Practice </ title > </ head > < body > <!-- When you click this button, the posts collected in the fetch request will be logged in the console in your devtools tray --> < button onclick = \"consolePosts()\" > Console Posts </ button > <!-- When you click this button the posts collected from the fetch request will be displayed below in the ul element with the id='all-posts' --> < button onclick = \"displayPost()\" > Display Posts </ button > < button onclick = \"\" > Fetch 5 Posts </ button > < button onclick = \"\" > Fetch Comments </ button > < button onclick = \"\" > Fetch Users </ button > < div > < h3 > All Posts </ h3 > < ul id = 'all-posts' ></ ul > </ div > < script src = \"./main.js\" ></ script > </ body > </ html > main.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 let arrayOfPosts ; // This function waits for the web page to be loaded, when it does it will run the code inside of it which happens to be getPosts() window . onload = function () { getPosts () } // This function is going to make a fetch request to the URL inside its parameter brackets (). Then it will turn the response (data it's getting back), saved here as res. The res.json will not be saved as posts and saved into the variable, arrayOfPosts const getPosts = () => { fetch ( 'http://jsonplaceholder.typicode.com/posts' ) . then ( res => res . json ()) . then ( posts => arrayOfPosts = posts ) } // This function logs the results in your browser's console const consolePosts = () => { console . log ( arrayOfPosts ) } // this function creates elements inside the all-posts ul, then appends text inside it with the posts that were returned in the request. const displayPost = () => { const allPosts = document . getElementById ( 'all-posts' ) arrayOfPosts . map (( post , index ) => { const li = document . createElement ( 'li' ) const text = document . createTextNode ( `# ${ index } , Title: ${ post . title } : ${ post . body } , by user: ${ post . userId } ` ) li . appendChild ( text ) allPosts . append ( li ) }) } /* Your job now is to follow the functions above and use them as templates to build the functionality the buttons in the index.html file already have laid out in it. This way you can learn how to build fetch requests and work with other APIs and become a real developer!! */","title":"Practice It - Fetch"},{"location":"module-4/fetch-API/#know-your-docs","text":"MDN Docs - Web APIs MDN Docs - Fetch","title":"Know Your Docs"},{"location":"module-4/fetch-errorHandling/","text":"Error Handing with Fetch One of the downsides to using fetch is that it doesn't have proper error handling. This is one of the reasons we use isomorphic-fetch or Axios, which we will get to next class. For now, we're going to have to figure out a way around error handling because you'll be working with a new API tomorrow and you will almost certainly type in the wrong characters. For this you will want error handling to give you a neat and tidy error message to help you debug. REMEMBER : error messages are good!! See It - Handling a Failed HTTP Request Practice It - Error Handling HEY!! You MUST do these practice problems before class!!! Go back to your practice problem from the last homework and add error handling to it. Use this code to get started: 1 2 3 4 5 6 7 8 9 10 const getPosts = () => { fetch ( 'http://jsonplaceholder.typicode.com/posts' ) . then ( res => { if ( ! res . ok ) { throw Error ( res . statusText ) } return res . json () }) . then ( posts => arrayOfPosts = posts ) . catch ( err => console . log ( `Error, ${ err } ` )) } - [ ] Make sure you add error handling to all your requests in the practice problem. Push Yourself Further Can you move your error handling into a separate function as you saw in the video before? Intentionally break your fetch URL to test your error handling. Hint: simply changing one character in the URL will break the fetch and return and error. Know Your Docs MDN Docs - Using Fetch","title":"Fetch Error Handling"},{"location":"module-4/fetch-errorHandling/#error-handing-with-fetch","text":"One of the downsides to using fetch is that it doesn't have proper error handling. This is one of the reasons we use isomorphic-fetch or Axios, which we will get to next class. For now, we're going to have to figure out a way around error handling because you'll be working with a new API tomorrow and you will almost certainly type in the wrong characters. For this you will want error handling to give you a neat and tidy error message to help you debug. REMEMBER : error messages are good!!","title":"Error Handing with Fetch"},{"location":"module-4/fetch-errorHandling/#see-it-handling-a-failed-http-request","text":"","title":"See It - Handling a Failed HTTP Request"},{"location":"module-4/fetch-errorHandling/#practice-it-error-handling","text":"HEY!! You MUST do these practice problems before class!!! Go back to your practice problem from the last homework and add error handling to it. Use this code to get started: 1 2 3 4 5 6 7 8 9 10 const getPosts = () => { fetch ( 'http://jsonplaceholder.typicode.com/posts' ) . then ( res => { if ( ! res . ok ) { throw Error ( res . statusText ) } return res . json () }) . then ( posts => arrayOfPosts = posts ) . catch ( err => console . log ( `Error, ${ err } ` )) } - [ ] Make sure you add error handling to all your requests in the practice problem.","title":"Practice It - Error Handling"},{"location":"module-4/fetch-errorHandling/#push-yourself-further","text":"Can you move your error handling into a separate function as you saw in the video before? Intentionally break your fetch URL to test your error handling. Hint: simply changing one character in the URL will break the fetch and return and error.","title":"Push Yourself Further"},{"location":"module-4/fetch-errorHandling/#know-your-docs","text":"MDN Docs - Using Fetch","title":"Know Your Docs"},{"location":"module-4/functionCurrying/","text":"Function Currying Strength does not come from physical capacity. It comes from an indomitable will.\u2003\u2014Mahatma Gandhi Functional programming (FP) is an engineering paradigm much like OOP, which is what we've been working on lately. It's definitely an advanced subject and you're going to feel some anxiety when you first approach it. Why? Because it doesn't make as much direct-sense as expressing a function clearly and then invoking it (the imperative way). Today we're going to cover two big pieces of this functional programming thing, but as we work through them you may notice that you have already, inadvertently, been exposed to some of these concepts such as .map() and .reduce() (the declarative approach). However, before we continue, you need to read these two blogs: FIRST: Get the vocab down \u2014and do the homework at the end! SECOND: Prep for libraries They should set the stage for the why, where and what we're going to cover today. PAUSE We'll wait here for you... What is Currying The first thing we'll cover today is a bit of a tricky concept. We'll start by saying this methodology was created by Haskell Curry after whom Haskell was named. The main thing you need to know about currying is that it is something that you will use but you shouldn't be frustrated about now if you don't get it right away. It's totally okay to not understand it as it's an advanced topic. But we're in the end of our Intermediate course so we're getting to be more advanced students of web development and therefore should be excited to jump into new and challenging concepts! By now we're familiar with passing multiple arguments into a function like the example below: 1 2 3 4 5 const myFunction = ( arg1 , arg2 , arg3 , arg4 ) => { const newVariable = // do something with the four arguments return newVariable } Above we can pass in 4 arguments to be used inside the function. We don't have to use all four but we have to use 1 and 2 if we want to use 3 because order matters . To do that we would call the function like this: myFunction(null, null, 68) . Pretty simple right? In fact, you've already used functions that take multiple arguments that you haven't used yet. The callback function that goes inside .filter() takes three arguments: the element, the index of the element and the original array that .filter() was called on. In addition, .filter() takes the contextual this as a second argument after the callback function. 1 arr . filter ( callback ( element [, index [, array ]])[, thisArg ]) You've used .filter() before and have probably not had to use these arguments. That's okay. I only bring them up here because I want you to be aware of unused arguments in functions before we move on to currying. In brief, we can, instead of passing multiple parameters to a single function, pass a single argument to a function that then returns a single function with a single argument in it that also returns a single function that takes a single argument. And that, in short, is currying. Sound confusing? Good! It should be. It's going to take a bit for your mind to figure out how this works and to develop a mental model of it for you to understand it in your mind's eye. More on Currying Currying is when you break down a function that takes multiple arguments into a series of functions that take part of the arguments. Here's an example in JavaScript: 1 2 3 const addTwo = ( num1 , num2 ) => { return num1 + num2 } This is a function that takes two arguments, num1 and num2, and returns their sum. Let's see what this function looks liked curried: 1 2 3 4 const addTwo = ( num1 ) => { return function ( num2 ) { return num1 + num2 } This is now a function that takes one argument, num1, and returns a function that takes another argument, num2, and that function returns their sum. We can call it like this: 1 2 3 4 5 6 7 8 9 addTwo ( 5 )( 6 ) // => 11 // or hold the first function as a variable const addToFive = addTwo ( 5 ) // then add it to what ever number we want: addToFive ( 6 ) // => 11 This is what some people may call a closure. The third statement uses the addToFive operation to add 5 to 6, again producing 11 as a result. Still confused? That's okay, it'll sink in with time. For now, read the 4th part of this FP Blog and then watch the following video. See Currying Practice Currying Open a new Repl.it Name it: Curried Function Paste the code below into it and curry it The result should be able to be called like this: curriedGreet(\"Hi there\")(\"Howard\")(\"Austin,TX\")(\"Angela\"); 1 2 3 const greet = ( greeting , name , location , greeter ) => { console . log ( ` ${ greeting } , ${ name } ! Welcome to ${ location } . My name is ${ greeter } .` ); }; Know Your Docs MDN Docs - Function Javascript.info - Currying","title":"Function Currying"},{"location":"module-4/functionCurrying/#function-currying","text":"Strength does not come from physical capacity. It comes from an indomitable will.\u2003\u2014Mahatma Gandhi Functional programming (FP) is an engineering paradigm much like OOP, which is what we've been working on lately. It's definitely an advanced subject and you're going to feel some anxiety when you first approach it. Why? Because it doesn't make as much direct-sense as expressing a function clearly and then invoking it (the imperative way). Today we're going to cover two big pieces of this functional programming thing, but as we work through them you may notice that you have already, inadvertently, been exposed to some of these concepts such as .map() and .reduce() (the declarative approach). However, before we continue, you need to read these two blogs: FIRST: Get the vocab down \u2014and do the homework at the end! SECOND: Prep for libraries They should set the stage for the why, where and what we're going to cover today. PAUSE We'll wait here for you...","title":"Function Currying"},{"location":"module-4/functionCurrying/#what-is-currying","text":"The first thing we'll cover today is a bit of a tricky concept. We'll start by saying this methodology was created by Haskell Curry after whom Haskell was named. The main thing you need to know about currying is that it is something that you will use but you shouldn't be frustrated about now if you don't get it right away. It's totally okay to not understand it as it's an advanced topic. But we're in the end of our Intermediate course so we're getting to be more advanced students of web development and therefore should be excited to jump into new and challenging concepts! By now we're familiar with passing multiple arguments into a function like the example below: 1 2 3 4 5 const myFunction = ( arg1 , arg2 , arg3 , arg4 ) => { const newVariable = // do something with the four arguments return newVariable } Above we can pass in 4 arguments to be used inside the function. We don't have to use all four but we have to use 1 and 2 if we want to use 3 because order matters . To do that we would call the function like this: myFunction(null, null, 68) . Pretty simple right? In fact, you've already used functions that take multiple arguments that you haven't used yet. The callback function that goes inside .filter() takes three arguments: the element, the index of the element and the original array that .filter() was called on. In addition, .filter() takes the contextual this as a second argument after the callback function. 1 arr . filter ( callback ( element [, index [, array ]])[, thisArg ]) You've used .filter() before and have probably not had to use these arguments. That's okay. I only bring them up here because I want you to be aware of unused arguments in functions before we move on to currying. In brief, we can, instead of passing multiple parameters to a single function, pass a single argument to a function that then returns a single function with a single argument in it that also returns a single function that takes a single argument. And that, in short, is currying. Sound confusing? Good! It should be. It's going to take a bit for your mind to figure out how this works and to develop a mental model of it for you to understand it in your mind's eye.","title":"What is Currying"},{"location":"module-4/functionCurrying/#more-on-currying","text":"Currying is when you break down a function that takes multiple arguments into a series of functions that take part of the arguments. Here's an example in JavaScript: 1 2 3 const addTwo = ( num1 , num2 ) => { return num1 + num2 } This is a function that takes two arguments, num1 and num2, and returns their sum. Let's see what this function looks liked curried: 1 2 3 4 const addTwo = ( num1 ) => { return function ( num2 ) { return num1 + num2 } This is now a function that takes one argument, num1, and returns a function that takes another argument, num2, and that function returns their sum. We can call it like this: 1 2 3 4 5 6 7 8 9 addTwo ( 5 )( 6 ) // => 11 // or hold the first function as a variable const addToFive = addTwo ( 5 ) // then add it to what ever number we want: addToFive ( 6 ) // => 11 This is what some people may call a closure. The third statement uses the addToFive operation to add 5 to 6, again producing 11 as a result. Still confused? That's okay, it'll sink in with time. For now, read the 4th part of this FP Blog and then watch the following video.","title":"More on Currying"},{"location":"module-4/functionCurrying/#see-currying","text":"","title":"See Currying"},{"location":"module-4/functionCurrying/#practice-currying","text":"Open a new Repl.it Name it: Curried Function Paste the code below into it and curry it The result should be able to be called like this: curriedGreet(\"Hi there\")(\"Howard\")(\"Austin,TX\")(\"Angela\"); 1 2 3 const greet = ( greeting , name , location , greeter ) => { console . log ( ` ${ greeting } , ${ name } ! Welcome to ${ location } . My name is ${ greeter } .` ); };","title":"Practice Currying"},{"location":"module-4/functionCurrying/#know-your-docs","text":"MDN Docs - Function Javascript.info - Currying","title":"Know Your Docs"},{"location":"module-4/functionRecursion/","text":"Function Recursion Recursion, put simply, is when a function calls itself until a condition is met and then it stops calling itself. Pretty simple right? It may be hard to imagine what it looks like but a function can call itself inside of itself. 1 2 3 4 5 6 7 8 9 10 11 12 let x = 0 const callMyself = () => { x ++ if ( x > 9 ) return callMyself () return x } callMyself () The function above returns 10. Why? More of Recursion Recursion is very powerful in creating algorithms because you can perform the same tasks on the information over and over with each iteration of the information. Password hashing algorithms use this method. Merging and sorting algorithms use this method. It's all over the place and you need to know how to use it. Watch the following video. Pause and play as you need to make sure you understand what every line is doing. NOTE: MPJ shares some very useful tips to programming in general in the video. Pay attention. See Recursion Practice Recursion In a new Repl.it called: Factorial of n : Write a JavaScript program to calculate the factorial of a number. (In mathematics, the factorial of a non-negative integer n , denoted by n! , is the product of all positive integers less than or equal to n. For example, 5! = 5 x 4 x 3 x 2 x 1 = 120 In a new Repl.it called: Integer Range : Write a JavaScript program to get the integers in range (x, y) Example : range(2, 9) // Expected Output : [3, 4, 5, 6, 7, 8] In a new Repl.it called: Recursive Fibonacci : ( I know... ) Write a JavaScript program to get the first n of the Fibonacci numbers. The Fibonacci Sequence is the series of numbers: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, ... Each subsequent number is the sum of the previous two. Example firstOfFib(6) // [0, 1, 1, 2, 3, 5]","title":"Function Recursion"},{"location":"module-4/functionRecursion/#function-recursion","text":"Recursion, put simply, is when a function calls itself until a condition is met and then it stops calling itself. Pretty simple right? It may be hard to imagine what it looks like but a function can call itself inside of itself. 1 2 3 4 5 6 7 8 9 10 11 12 let x = 0 const callMyself = () => { x ++ if ( x > 9 ) return callMyself () return x } callMyself () The function above returns 10. Why?","title":"Function Recursion"},{"location":"module-4/functionRecursion/#more-of-recursion","text":"Recursion is very powerful in creating algorithms because you can perform the same tasks on the information over and over with each iteration of the information. Password hashing algorithms use this method. Merging and sorting algorithms use this method. It's all over the place and you need to know how to use it. Watch the following video. Pause and play as you need to make sure you understand what every line is doing. NOTE: MPJ shares some very useful tips to programming in general in the video. Pay attention.","title":"More of Recursion"},{"location":"module-4/functionRecursion/#see-recursion","text":"","title":"See Recursion"},{"location":"module-4/functionRecursion/#practice-recursion","text":"In a new Repl.it called: Factorial of n : Write a JavaScript program to calculate the factorial of a number. (In mathematics, the factorial of a non-negative integer n , denoted by n! , is the product of all positive integers less than or equal to n. For example, 5! = 5 x 4 x 3 x 2 x 1 = 120 In a new Repl.it called: Integer Range : Write a JavaScript program to get the integers in range (x, y) Example : range(2, 9) // Expected Output : [3, 4, 5, 6, 7, 8] In a new Repl.it called: Recursive Fibonacci : ( I know... ) Write a JavaScript program to get the first n of the Fibonacci numbers. The Fibonacci Sequence is the series of numbers: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, ... Each subsequent number is the sum of the previous two. Example firstOfFib(6) // [0, 1, 1, 2, 3, 5]","title":"Practice Recursion"},{"location":"module-4/immutability/","text":"Immutability It may sound silly at first but most of the time we do not want things to change in our app's system. In the database? Yes. But that's a different subject for another time. This is something we covered earlier when we introduced array methods like .slice() , .push() and so on. Each of these mutates the original array. But this isn't necessarily the way we want to do things. Instead we want to return new arrays without mutating the original. Unfortunately, JS doesn't yet have immutable data structure like Clojure and some other more sophisticated languages. In fact, the reason we have const now is that var is completely mutable in all scopes. let and const restrain the scope of their variables, but with const you will get warnings if you change the value, hence const ant. So, moving forward, if you plan for something to change, like a for loop, it should be labeled a let variable. And if you plan for it to stay the same, like a function, it should be a const . That's the rule! To make up for JavaScript's lack of truly immutable data structures like immutable objects and arrays, there are a couple of libraries we can use. The most common is immutable.js . This article does a really good job at explaining immutability . See Immutable Data Structures See It Node Modules Practice It Using node modules is pretty easy. In fact, so easy, you will import lodash into a project tonight on your own!! Importing goes just like this: Create a new repo called: \"Module Practice\" Clone it and npm init it. Follow the NPM instructions : npm i --save lodash Then, in your js file at the top add: import _ from 'lodash' And you're done!! Now you can make a fetch request to some API of your choice and use the methods in lodash to manipulate the data you get back. Try it yourself!!! Go to lodash documentation and start finding methods you find interesting. See if you can use a few of them. Honestly, this is how you get good. This is how you get jobs. You nerd out about this fun stuff!! Know Your Docs MDN Docs - Mutable Lodash Docs","title":"Immutability"},{"location":"module-4/immutability/#immutability","text":"It may sound silly at first but most of the time we do not want things to change in our app's system. In the database? Yes. But that's a different subject for another time. This is something we covered earlier when we introduced array methods like .slice() , .push() and so on. Each of these mutates the original array. But this isn't necessarily the way we want to do things. Instead we want to return new arrays without mutating the original. Unfortunately, JS doesn't yet have immutable data structure like Clojure and some other more sophisticated languages. In fact, the reason we have const now is that var is completely mutable in all scopes. let and const restrain the scope of their variables, but with const you will get warnings if you change the value, hence const ant. So, moving forward, if you plan for something to change, like a for loop, it should be labeled a let variable. And if you plan for it to stay the same, like a function, it should be a const . That's the rule! To make up for JavaScript's lack of truly immutable data structures like immutable objects and arrays, there are a couple of libraries we can use. The most common is immutable.js . This article does a really good job at explaining immutability .","title":"Immutability"},{"location":"module-4/immutability/#see-immutable-data-structures","text":"","title":"See Immutable Data Structures"},{"location":"module-4/immutability/#see-it-node-modules","text":"","title":"See It Node Modules"},{"location":"module-4/immutability/#practice-it","text":"Using node modules is pretty easy. In fact, so easy, you will import lodash into a project tonight on your own!! Importing goes just like this: Create a new repo called: \"Module Practice\" Clone it and npm init it. Follow the NPM instructions : npm i --save lodash Then, in your js file at the top add: import _ from 'lodash' And you're done!! Now you can make a fetch request to some API of your choice and use the methods in lodash to manipulate the data you get back. Try it yourself!!! Go to lodash documentation and start finding methods you find interesting. See if you can use a few of them. Honestly, this is how you get good. This is how you get jobs. You nerd out about this fun stuff!!","title":"Practice It"},{"location":"module-4/immutability/#know-your-docs","text":"MDN Docs - Mutable Lodash Docs","title":"Know Your Docs"},{"location":"module-4/promises/","text":"Promises You've already learned and worked with higher order functions like .map() , .filter() and .reduce() . Each of these takes a callback function that does something after the first function does something. Promises do the same thing! They are a function that take a callback function to do something after something else happens. Straight from the MDN Docs on Promises {} : \"Essentially, a Promise is an object that represents an intermediate state of an operation \u2014 in effect, a promise that a result of some kind will be returned at some point in the future. There is no guarantee of exactly when the operation will complete and the result will be returned, but there is a guarantee that you'll be able to set up code to run only when the operation completes, either to do something else with a successful result, or to gracefully handle a failure case.\" We use Promises {} to fetch data from somewhere else when we don't know how long it will take because we need to set up the other code before and after the Promise {} . We call this asynchronous code. Parts of the code can be built by the computer/executed while other parts are still waiting to receive results. As you've seen before, lines of code are executed sequentially or synchronously in your previous terminal apps. With Promises your code will be able to run asynchronously or out of order. This allows fetching of data to happen without your computer crashing. There are multiple ways to request information from APIs including AJAX or Asynchronous Javascript and XML (used with jQuery), isomorphic-fetch which has been a standard in the Node community for the past few years, and recently Axios has become a favorite. Each has their own strengths and weaknesses but each does the job we need. To start out with we'll keep it simple, but as you progress as a developer in your understanding and confidence you will reach to new ways like isomorphic-fetch and Axios which we'll, of course, talk about later. For the next few class days we'll be using the Fetch API in your browser! In the following video we see MPJ using babelify to polyfill , which really means that it fills in sections of the code when certain browsers can't read it. To use it you would have to npm init your working directory/folder and add babel and babelify to your projects via npm install . This is certainly an option and definitely one you may use sooner rather than later. But for our next couple of classes we're going to use Fetch API which is now a standard feature in browser JavaScript environments and, as of this writing, is compatible with all the main browsers: Chrome, Firefox, Safari and Opera. Therefore, we can safely use it without having to use polyfills for the moment. See It - Promises","title":"Promises"},{"location":"module-4/promises/#promises","text":"You've already learned and worked with higher order functions like .map() , .filter() and .reduce() . Each of these takes a callback function that does something after the first function does something. Promises do the same thing! They are a function that take a callback function to do something after something else happens. Straight from the MDN Docs on Promises {} : \"Essentially, a Promise is an object that represents an intermediate state of an operation \u2014 in effect, a promise that a result of some kind will be returned at some point in the future. There is no guarantee of exactly when the operation will complete and the result will be returned, but there is a guarantee that you'll be able to set up code to run only when the operation completes, either to do something else with a successful result, or to gracefully handle a failure case.\" We use Promises {} to fetch data from somewhere else when we don't know how long it will take because we need to set up the other code before and after the Promise {} . We call this asynchronous code. Parts of the code can be built by the computer/executed while other parts are still waiting to receive results. As you've seen before, lines of code are executed sequentially or synchronously in your previous terminal apps. With Promises your code will be able to run asynchronously or out of order. This allows fetching of data to happen without your computer crashing. There are multiple ways to request information from APIs including AJAX or Asynchronous Javascript and XML (used with jQuery), isomorphic-fetch which has been a standard in the Node community for the past few years, and recently Axios has become a favorite. Each has their own strengths and weaknesses but each does the job we need. To start out with we'll keep it simple, but as you progress as a developer in your understanding and confidence you will reach to new ways like isomorphic-fetch and Axios which we'll, of course, talk about later. For the next few class days we'll be using the Fetch API in your browser! In the following video we see MPJ using babelify to polyfill , which really means that it fills in sections of the code when certain browsers can't read it. To use it you would have to npm init your working directory/folder and add babel and babelify to your projects via npm install . This is certainly an option and definitely one you may use sooner rather than later. But for our next couple of classes we're going to use Fetch API which is now a standard feature in browser JavaScript environments and, as of this writing, is compatible with all the main browsers: Chrome, Firefox, Safari and Opera. Therefore, we can safely use it without having to use polyfills for the moment.","title":"Promises"},{"location":"module-4/promises/#see-it-promises","text":"","title":"See It - Promises"},{"location":"module-4/pureFunctions/","text":"Pure Functions or Why FP? The future belongs to those who believe in the beauty of their dreams.\u2003\u2014Franklin D. Roosevelt Why Functional Programming So we've been dabbling in functional programming for a bit. If it's still a little strange and hard to figure out, that's okay. You'll get it a little more each time you work at it. However today we're going to explore what functional programming allows for JavaScript to do, which is Node\u2014or a giant library of libraries (nodes). Each of these nodes are chunks of code we can bring into our apps to use without having to have built it ourselves. The power is near endless and we will play with one of the best ones today. But before we get too far, I need you to read these last two blogs on functional programming: Part 3 and Part 4 . Pure Functions As you saw in the Part 3 blog of the FP series, pure functions have two rules: A pure function is deterministic . If given the same input, the function will always return the same output. A pure function will not cause side effects . A side effect is any change in the system that is visible. Granted, we haven't been building large applications yet and most of our functions have been pure without us even knowing what a pure function is. So why talk about it? Well, for two reasons: 1) you need to think about building your apps with pure functions to limit your bugs and make it easier to read and think about and 2) because pure functions are how Node modules are built! Yes, through the use of functional programming, libraries are built as pure functions which can be short and reusable so they can be curried or called recursively . Really and truly, this functional programming is awesome! It opens up so many possibilities like React, Redux, Node backends and lodash, along with all the other libraries in Node. Don't worry, we'll get to all the stuff in the next course, but for now we're going to get used to bringing in someone else's code and using it for ourselves. See Pure Functions YT, Codexpanse - Pure Functions Additional Resources HackerNoon Blog - FP, Part 3 HackerNoon Blog - FP,Part 4","title":"Pure Functional Programming"},{"location":"module-4/pureFunctions/#pure-functions-or-why-fp","text":"The future belongs to those who believe in the beauty of their dreams.\u2003\u2014Franklin D. Roosevelt","title":"Pure Functions or Why FP?"},{"location":"module-4/pureFunctions/#why-functional-programming","text":"So we've been dabbling in functional programming for a bit. If it's still a little strange and hard to figure out, that's okay. You'll get it a little more each time you work at it. However today we're going to explore what functional programming allows for JavaScript to do, which is Node\u2014or a giant library of libraries (nodes). Each of these nodes are chunks of code we can bring into our apps to use without having to have built it ourselves. The power is near endless and we will play with one of the best ones today. But before we get too far, I need you to read these last two blogs on functional programming: Part 3 and Part 4 .","title":"Why Functional Programming"},{"location":"module-4/pureFunctions/#pure-functions","text":"As you saw in the Part 3 blog of the FP series, pure functions have two rules: A pure function is deterministic . If given the same input, the function will always return the same output. A pure function will not cause side effects . A side effect is any change in the system that is visible. Granted, we haven't been building large applications yet and most of our functions have been pure without us even knowing what a pure function is. So why talk about it? Well, for two reasons: 1) you need to think about building your apps with pure functions to limit your bugs and make it easier to read and think about and 2) because pure functions are how Node modules are built! Yes, through the use of functional programming, libraries are built as pure functions which can be short and reusable so they can be curried or called recursively . Really and truly, this functional programming is awesome! It opens up so many possibilities like React, Redux, Node backends and lodash, along with all the other libraries in Node. Don't worry, we'll get to all the stuff in the next course, but for now we're going to get used to bringing in someone else's code and using it for ourselves.","title":"Pure Functions"},{"location":"module-4/pureFunctions/#see-pure-functions","text":"YT, Codexpanse - Pure Functions","title":"See Pure Functions"},{"location":"module-4/pureFunctions/#additional-resources","text":"HackerNoon Blog - FP, Part 3 HackerNoon Blog - FP,Part 4","title":"Additional Resources"},{"location":"module-4/testingFetch/","text":"Testing Fetch and Dependency Injection By now, you're pretty familiar with building unit tests for your apps. Today we're going to cover how to use dependency injection to create unit tests for your fetch requests so that you can then bring it into your current API-consuming app. See Dependency Injection Practice Fetch Testing Create a new repo called: \"Fetch-Unit-Testing\" Clone the repo into your jsDev folder(directory) npm init Enter , Enter , Enter , Enter , Enter ... npm install -g mocha Build a simple GUI app that uses this api: https://punkapi.com/documentation/v2 Use the previous video to walk through building two tests for this simple app; 1 for a single beer and 1 for 10 beers You should end up with a simple GUI app that has at least two unit tests injected into your fetch request","title":"Dependency Injection"},{"location":"module-4/testingFetch/#testing-fetch-and-dependency-injection","text":"By now, you're pretty familiar with building unit tests for your apps. Today we're going to cover how to use dependency injection to create unit tests for your fetch requests so that you can then bring it into your current API-consuming app.","title":"Testing Fetch and Dependency Injection"},{"location":"module-4/testingFetch/#see-dependency-injection","text":"","title":"See Dependency Injection"},{"location":"module-4/testingFetch/#practice-fetch-testing","text":"Create a new repo called: \"Fetch-Unit-Testing\" Clone the repo into your jsDev folder(directory) npm init Enter , Enter , Enter , Enter , Enter ... npm install -g mocha Build a simple GUI app that uses this api: https://punkapi.com/documentation/v2 Use the previous video to walk through building two tests for this simple app; 1 for a single beer and 1 for 10 beers You should end up with a simple GUI app that has at least two unit tests injected into your fetch request","title":"Practice Fetch Testing"},{"location":"preCourse/codingAndProgramming/","text":"Coding & Programming Programming is the process of solving a problem. Coding is the process of communicating that solution for the computer to execute. Programming For the sake of the class I want you to think of programming as figuring out the steps of a process(program) and telling the computer in a very detailed, non-ambiguous way how to execute the steps in the process(program). In this way, you're looking at a problem from a higher point-of-view using your vision, hearing and even touch to figure out solutions to the problem and then to implement a process of steps whereby to arrive at the solution. For instance: A Simple Program Example Given a list of numbers: 2, 5, 6, 7 and 9, add 1 to each number and return a list of the new values and the sum of all of those new values Perfect! Let's walk through this step by step to see how we might program a solution to this problem. Our given input is [2, 5, 6, 7, 9] . We have the first action: add 1 to each number in the list. A second action: return the list of new numbers. And we have a third action: return the sum of the new list of numbers! We can even deduce another piece of the puzzle: If our input is a list of numbers like: [2, 5, 6, 7, 9] into our program, our expect output will be [3, 6, 7, 8, 10] with a sum value of 34 . Now that we know what our program's actions(steps) are and what the expected output or our program should be we can begin to reverse-engineer the solution. Action 1: add 1 to each number tell the computer to loop though the list of numbers and for each number add 1 to its value Action 2: return the list of new numbers collect the new values in another list [ ]in the return statement include the new list Action 3: Return the sum of the new list hold the value of the new numbers in a place in the return statement include the place you were holding sum of new numbers Hopefully, you can see now how we can approach any problem. We begin with a bigger view of the problem and work our way down to the small details of it. In this way we use our natural human ability to solve complex problems with mental models and abstraction then list them into short, clear directives to give to the computer. And this, for our purposes, is programming. We have been given a challenge and we found a solution and listed out the steps needed to make it a process. From here we can translate(code) it into any language we want: C, C++, C#, Python, Swift, Rust, Go, Dart, Java, Erlang, or Cobol. In the next section, we're going to translate(code)these steps into Javascript. What is Coding? As you just saw, programming is listing out all the steps a program will need to accomplish a task given by a human so that it can return an expected result. Coding , on the other hand, is the language we use to communicate to other humans our intent for a computer's task while also telling the computer what we expect it to repeat over and over in a precise and predictable way. It is also important to note that no coding language is actually what the computer reads. All languages are compiled down to binary , the language a computer can understand. Therefore, you could use nearly any language you want to accomplish most tasks. There are restrictions, of course (i.e. all front-end apps have to be written in JS), preferences (Python for analytics), and logistical things (full coverage testing, support, open-source, and technical cost) to consider but keep in mind, the characters ( tokens you type into the text editor) are not really read by the computer the same way you see them on the screen. Now we're going to turn those programming steps from the last section into JavaScript code so that a computer can complete the tasks we created for it. Below are the instructions we wrote out while learning to program , next to code that describes the action steps in JavaScript code. You'll see //comments in the code that describe what's happening But, STOP , create a new Repl.it and follow along! ...SERIOUSLY!! Simple Coding Example Before we can perform Action 1, let's build a function (program/process) we can call to do something at some point. Let's call it: addOneWithSum 1 2 3 const addOneWithSum = () => { } Then let's make sure it can take in an array of numbers like the one given to us in the example above: const exampleArray = [2, 5, 6, 7, 9] 1 2 3 const addOneWithSum = ( ourArray ) => { } Now let's do Action 1: add 1 to each number 1 2 3 4 5 6 7 8 9 10 11 12 13 const addOneWithSum = ( ourArray ) => { // tell the computer to loop though the list of numbers and for each number add 1 to its value for ( let i = 0 ; i < ourArray . length ; i ++ ) { ourArray [ i ] + 1 } } // More details: // the for() loop states: // let i = 0; - set i to 0, (i stands for iterator) // i < ourArray.length; - and while i is less than the length of ourArray keep doing what is inside the code block // i++ - and each time you loop through ourArray once add 1 to the value of i so that we keep iterating through all of the numbers in the list. // ourArray[i] + 1 - inside the {} of the for() loop we add 1 to each item in ourArray Action 2: return the list of new numbers 1 2 3 4 5 6 7 8 9 10 11 12 13 const addOneWithSum = ( ourArray ) => { // collect the new values in another list(array) let newList = [] for ( let i = 0 ; i < ourArray . length ; i ++ ) { newList . push ( ourArray [ i ] + 1 ) } // in the return statement include the new list return newList } // let newList = [] - creates a place we can hold the new values of the list // newList.push(ourArray[i] + 1) - the .push() method pushes the new values into the newList array/list // return newList - and then we returned the newList as the output of this program Action 3: Return the sum of the new list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 const addOneWithSum = ( ourArray ) => { let newList = [] // hold the value of the new numbers in a place/variable let sum = 0 for ( let i = 0 ; i < ourArray . length ; i ++ ) { sum += ( ourArray [ i ] + 1 ) newList . push ( ourArray [ i ] + 1 ) } // in the return statement include the place you were holding sum of new numbers return newList + ' ' + sum } // let sum = 0 - Now we create a place to hold the sum of the new numbers: sum // sum += (ourArray[i] + 1) - and inside our for() loop we continually add to the value of sum // then we return sum as part of our output. // in the return we added a space, ' ' , between newList and sum so that the return would be easier to read. The final step to this is to feed our function(program) the input and call our newly built function(program): 1 2 3 4 5 6 7 8 9 10 11 12 13 const exampleArray = [ 2 , 5 , 6 , 7 , 9 ] const addOneWithSum = ( ourArray ) => { let newList = [] let sum = 0 for ( let i = 0 ; i < ourArray . length ; i ++ ) { sum += ( ourArray [ i ] + 1 ) newList . push ( ourArray [ i ] + 1 ) } return newList + ' ' + sum } addOneWithSum ( exampleArray ) Practice It Throw this code into a repl.it and practice for yourself! Solve this problem: given an array of numbers: [2, 4, 6, 8, 10], divide each number by two, return the new array and the product (multiplied all together) of the new array. Continue reading about the differences btw coding vs programming . Summary A deciding factor in your success with programming is your ability to think critically about how to solve problems. After all, that's really what we do as engineers; whether we're building software or designing rocket ships\u2014we solve problems. To ensure your success as a web developer, our hope is not just that you learn how to code, but that you develop the skills necessary to be an effective problem-solver. The latter is arguably more important when it comes down to what will get you hired. With that in mind, consider this section as your first lesson in fundamental programming concepts, as well as a guided tour of the kind of thinking we'd like we need you to practice as you move forward in the course. Programming and problem-solving go hand in hand\u2014so long as you practice, ask questions and seek answers, you'll develop proficiency with both skill sets.","title":"Coding + Programming"},{"location":"preCourse/codingAndProgramming/#coding-programming","text":"Programming is the process of solving a problem. Coding is the process of communicating that solution for the computer to execute.","title":"Coding &amp; Programming"},{"location":"preCourse/codingAndProgramming/#programming","text":"For the sake of the class I want you to think of programming as figuring out the steps of a process(program) and telling the computer in a very detailed, non-ambiguous way how to execute the steps in the process(program). In this way, you're looking at a problem from a higher point-of-view using your vision, hearing and even touch to figure out solutions to the problem and then to implement a process of steps whereby to arrive at the solution. For instance:","title":"Programming"},{"location":"preCourse/codingAndProgramming/#a-simple-program-example","text":"Given a list of numbers: 2, 5, 6, 7 and 9, add 1 to each number and return a list of the new values and the sum of all of those new values Perfect! Let's walk through this step by step to see how we might program a solution to this problem. Our given input is [2, 5, 6, 7, 9] . We have the first action: add 1 to each number in the list. A second action: return the list of new numbers. And we have a third action: return the sum of the new list of numbers! We can even deduce another piece of the puzzle: If our input is a list of numbers like: [2, 5, 6, 7, 9] into our program, our expect output will be [3, 6, 7, 8, 10] with a sum value of 34 . Now that we know what our program's actions(steps) are and what the expected output or our program should be we can begin to reverse-engineer the solution. Action 1: add 1 to each number tell the computer to loop though the list of numbers and for each number add 1 to its value Action 2: return the list of new numbers collect the new values in another list [ ]in the return statement include the new list Action 3: Return the sum of the new list hold the value of the new numbers in a place in the return statement include the place you were holding sum of new numbers Hopefully, you can see now how we can approach any problem. We begin with a bigger view of the problem and work our way down to the small details of it. In this way we use our natural human ability to solve complex problems with mental models and abstraction then list them into short, clear directives to give to the computer. And this, for our purposes, is programming. We have been given a challenge and we found a solution and listed out the steps needed to make it a process. From here we can translate(code) it into any language we want: C, C++, C#, Python, Swift, Rust, Go, Dart, Java, Erlang, or Cobol. In the next section, we're going to translate(code)these steps into Javascript.","title":"A Simple Program Example"},{"location":"preCourse/codingAndProgramming/#what-is-coding","text":"As you just saw, programming is listing out all the steps a program will need to accomplish a task given by a human so that it can return an expected result. Coding , on the other hand, is the language we use to communicate to other humans our intent for a computer's task while also telling the computer what we expect it to repeat over and over in a precise and predictable way. It is also important to note that no coding language is actually what the computer reads. All languages are compiled down to binary , the language a computer can understand. Therefore, you could use nearly any language you want to accomplish most tasks. There are restrictions, of course (i.e. all front-end apps have to be written in JS), preferences (Python for analytics), and logistical things (full coverage testing, support, open-source, and technical cost) to consider but keep in mind, the characters ( tokens you type into the text editor) are not really read by the computer the same way you see them on the screen. Now we're going to turn those programming steps from the last section into JavaScript code so that a computer can complete the tasks we created for it. Below are the instructions we wrote out while learning to program , next to code that describes the action steps in JavaScript code. You'll see //comments in the code that describe what's happening But, STOP , create a new Repl.it and follow along! ...SERIOUSLY!!","title":"What is Coding?"},{"location":"preCourse/codingAndProgramming/#simple-coding-example","text":"Before we can perform Action 1, let's build a function (program/process) we can call to do something at some point. Let's call it: addOneWithSum 1 2 3 const addOneWithSum = () => { } Then let's make sure it can take in an array of numbers like the one given to us in the example above: const exampleArray = [2, 5, 6, 7, 9] 1 2 3 const addOneWithSum = ( ourArray ) => { } Now let's do Action 1: add 1 to each number 1 2 3 4 5 6 7 8 9 10 11 12 13 const addOneWithSum = ( ourArray ) => { // tell the computer to loop though the list of numbers and for each number add 1 to its value for ( let i = 0 ; i < ourArray . length ; i ++ ) { ourArray [ i ] + 1 } } // More details: // the for() loop states: // let i = 0; - set i to 0, (i stands for iterator) // i < ourArray.length; - and while i is less than the length of ourArray keep doing what is inside the code block // i++ - and each time you loop through ourArray once add 1 to the value of i so that we keep iterating through all of the numbers in the list. // ourArray[i] + 1 - inside the {} of the for() loop we add 1 to each item in ourArray Action 2: return the list of new numbers 1 2 3 4 5 6 7 8 9 10 11 12 13 const addOneWithSum = ( ourArray ) => { // collect the new values in another list(array) let newList = [] for ( let i = 0 ; i < ourArray . length ; i ++ ) { newList . push ( ourArray [ i ] + 1 ) } // in the return statement include the new list return newList } // let newList = [] - creates a place we can hold the new values of the list // newList.push(ourArray[i] + 1) - the .push() method pushes the new values into the newList array/list // return newList - and then we returned the newList as the output of this program Action 3: Return the sum of the new list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 const addOneWithSum = ( ourArray ) => { let newList = [] // hold the value of the new numbers in a place/variable let sum = 0 for ( let i = 0 ; i < ourArray . length ; i ++ ) { sum += ( ourArray [ i ] + 1 ) newList . push ( ourArray [ i ] + 1 ) } // in the return statement include the place you were holding sum of new numbers return newList + ' ' + sum } // let sum = 0 - Now we create a place to hold the sum of the new numbers: sum // sum += (ourArray[i] + 1) - and inside our for() loop we continually add to the value of sum // then we return sum as part of our output. // in the return we added a space, ' ' , between newList and sum so that the return would be easier to read. The final step to this is to feed our function(program) the input and call our newly built function(program): 1 2 3 4 5 6 7 8 9 10 11 12 13 const exampleArray = [ 2 , 5 , 6 , 7 , 9 ] const addOneWithSum = ( ourArray ) => { let newList = [] let sum = 0 for ( let i = 0 ; i < ourArray . length ; i ++ ) { sum += ( ourArray [ i ] + 1 ) newList . push ( ourArray [ i ] + 1 ) } return newList + ' ' + sum } addOneWithSum ( exampleArray )","title":"Simple Coding Example"},{"location":"preCourse/codingAndProgramming/#practice-it","text":"Throw this code into a repl.it and practice for yourself! Solve this problem: given an array of numbers: [2, 4, 6, 8, 10], divide each number by two, return the new array and the product (multiplied all together) of the new array. Continue reading about the differences btw coding vs programming .","title":"Practice It"},{"location":"preCourse/codingAndProgramming/#summary","text":"A deciding factor in your success with programming is your ability to think critically about how to solve problems. After all, that's really what we do as engineers; whether we're building software or designing rocket ships\u2014we solve problems. To ensure your success as a web developer, our hope is not just that you learn how to code, but that you develop the skills necessary to be an effective problem-solver. The latter is arguably more important when it comes down to what will get you hired. With that in mind, consider this section as your first lesson in fundamental programming concepts, as well as a guided tour of the kind of thinking we'd like we need you to practice as you move forward in the course. Programming and problem-solving go hand in hand\u2014so long as you practice, ask questions and seek answers, you'll develop proficiency with both skill sets.","title":"Summary"},{"location":"preCourse/comparisonOperators/","text":"Comparison Operators Now that you have the differences between = , == and === , let's look at how to use greater than, less than, bang and the other combinators . Non-Equality Operators Th equality operators == and === are simply checking if both operands are equal to one another. Unlike the single = we saw when we assigned a value to a variable, to check for equality we must use a double == sign or a triple === sign. Both operands on either side must be truthy for the operation to evaluate to true , otherwise, the operation evaluates to false . But what about the opposite? What if we wanted to do something if the evaluation was false? Enter the bang : ! . To evaluate if something is false you can use the bang-equal operators, != / !== . This simply says, \"if these don't equal each other do something\". See the example below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 8 != 7 // => true 90 !== 91 // => true 100 != 100 // => false // -- or -- // evaluates to false ! true // -- or -- const yourVariable = 0 ; // => falsey if ( ! yourVariable ) { console . log ( \"Is not truthy\" ) }; NOTE: This can be literally read: if yourVariable is not truthy then print out \"Is not truthy\". Practice It - Bang Operator !== Copy/paste the following code into a Repl.it. Read the code and try to guess what the console will \"log\" out before you run it . Run it. Replace the \"a\" on line 3 with \"b\" and run it again. What happened? Revert the \"b\" back to an \"a\" but delete \" = 'I am defined'\" from the first line and run the app again. Why do you think that happened? 1 2 3 4 5 6 7 8 9 10 11 let a = \"I am defined\" ; // declared but not defined variable let b ; if ( a !== undefined ) { console . log ( \"'a' is defined, so 'a' is truthy\" ) } else { console . log ( \"'a' isn't truthy\" ) } Greater-Than/Less-Than Operators Just like you learned in 6th grade, < and > are still applicable in comparisons. 1 2 3 6 < 88 // true 88 > 6 // true > means greater than < means less than In combination with == or = the < and > signs can make useful statements: Type first greater than or equal to: >== Type first less than or equal to: <== Greater than or equal to: >= Less than or equal to: <= Try It - Greater-Than/Less-Than Copy/paste the code below into another Repl.it. Assign the value of the variables \"a\" and \"b\" to different values Run the code multiple times to experiment and find out what's going on. Notice the code is using let and not var. Why do you think so? Bring it to class. 1 2 3 4 5 6 7 8 9 10 11 12 13 let a = 5 ; let b = 5 ; if ( a > b ) { // here the \"+\" is being used to concatenate multiple values together console . log ( a + \" is greater than \" + b ) } else if ( a < b ) { console . log ( a + \" is less than b \" + b ) } else if ( a === b ) { console . log ( a + \" is equal to B \" + b ) } else { console . log ( a + \" does not(!) equal \" + b ) } The expressions between parentheses are evaluated for truthiness. JavaScript will try to convert the values inside those parentheses to true or false . Logical Operators && (AND) || (OR) We can also create multiple evaluations to determine if we want to do a specific actions. Using our sign-on procedure we might compare our username and password: 1 2 3 4 5 if ( inputtedUserName === actualUserName && inputtedPassword === actualPassword ) { return logUserIn () } else { return \"Sorry, wrong username or password.\" } The above code says \"If the usernames match AND the passwords match log the user in.\" 1 2 3 4 5 6 const myVariable = 50 ; //truthy const yourVariable = 90 ; // truthy if ( myVariable && yourVariable ) { console . log ( \"Both are truthy\" ) }; This can be literally read as: if myVariable and yourVariable are truthy then print out \"Both are truthy\". && , read as \"And\" is just what it states, 'this and that'. With &&, you can kind of think of your logical operations as, \"If everything in this expression is truthy, then it will evaluate to true\" 1 2 3 4 true && true // true true && false // false false && true // false false && false // false The above statements, like all others are read or evaluated from left to right. If the first expression is true the second expression won't even be evaluated. The \"Or\" Operator - || The double-pipes (||) reads as \"or\" in our comparison statements: 1 2 3 4 5 6 const myVariable = 50 ; // truthy const yourVariable = 0 ; // falsey if ( myVariable || yourVariable ) { console . log ( \"One is truthy\" ) }; The above statement can be literally read: if myVariable or yourVariable are truthy then print out \"One is truthy\". || , read as \"or\": \"If at least one operand in this expression is truthy, it will still evaluate to true\" 1 2 3 4 true || true // true true || false // true false || true // true false || false // false NOTE: An operand is simply a piece of data being evaluated in the expression. Know Your Docs MDN Docs - Logical Operators","title":"Comparison Operator"},{"location":"preCourse/comparisonOperators/#comparison-operators","text":"Now that you have the differences between = , == and === , let's look at how to use greater than, less than, bang and the other combinators .","title":"Comparison Operators"},{"location":"preCourse/comparisonOperators/#non-equality-operators","text":"Th equality operators == and === are simply checking if both operands are equal to one another. Unlike the single = we saw when we assigned a value to a variable, to check for equality we must use a double == sign or a triple === sign. Both operands on either side must be truthy for the operation to evaluate to true , otherwise, the operation evaluates to false . But what about the opposite? What if we wanted to do something if the evaluation was false? Enter the bang : ! . To evaluate if something is false you can use the bang-equal operators, != / !== . This simply says, \"if these don't equal each other do something\". See the example below: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 8 != 7 // => true 90 !== 91 // => true 100 != 100 // => false // -- or -- // evaluates to false ! true // -- or -- const yourVariable = 0 ; // => falsey if ( ! yourVariable ) { console . log ( \"Is not truthy\" ) }; NOTE: This can be literally read: if yourVariable is not truthy then print out \"Is not truthy\".","title":"Non-Equality Operators"},{"location":"preCourse/comparisonOperators/#practice-it-bang-operator","text":"Copy/paste the following code into a Repl.it. Read the code and try to guess what the console will \"log\" out before you run it . Run it. Replace the \"a\" on line 3 with \"b\" and run it again. What happened? Revert the \"b\" back to an \"a\" but delete \" = 'I am defined'\" from the first line and run the app again. Why do you think that happened? 1 2 3 4 5 6 7 8 9 10 11 let a = \"I am defined\" ; // declared but not defined variable let b ; if ( a !== undefined ) { console . log ( \"'a' is defined, so 'a' is truthy\" ) } else { console . log ( \"'a' isn't truthy\" ) }","title":"Practice It - Bang Operator !=="},{"location":"preCourse/comparisonOperators/#greater-thanless-than-operators","text":"Just like you learned in 6th grade, < and > are still applicable in comparisons. 1 2 3 6 < 88 // true 88 > 6 // true > means greater than < means less than In combination with == or = the < and > signs can make useful statements: Type first greater than or equal to: >== Type first less than or equal to: <== Greater than or equal to: >= Less than or equal to: <=","title":"Greater-Than/Less-Than Operators"},{"location":"preCourse/comparisonOperators/#try-it-greater-thanless-than","text":"Copy/paste the code below into another Repl.it. Assign the value of the variables \"a\" and \"b\" to different values Run the code multiple times to experiment and find out what's going on. Notice the code is using let and not var. Why do you think so? Bring it to class. 1 2 3 4 5 6 7 8 9 10 11 12 13 let a = 5 ; let b = 5 ; if ( a > b ) { // here the \"+\" is being used to concatenate multiple values together console . log ( a + \" is greater than \" + b ) } else if ( a < b ) { console . log ( a + \" is less than b \" + b ) } else if ( a === b ) { console . log ( a + \" is equal to B \" + b ) } else { console . log ( a + \" does not(!) equal \" + b ) } The expressions between parentheses are evaluated for truthiness. JavaScript will try to convert the values inside those parentheses to true or false .","title":"Try It - Greater-Than/Less-Than"},{"location":"preCourse/comparisonOperators/#logical-operators","text":"&& (AND) || (OR) We can also create multiple evaluations to determine if we want to do a specific actions. Using our sign-on procedure we might compare our username and password: 1 2 3 4 5 if ( inputtedUserName === actualUserName && inputtedPassword === actualPassword ) { return logUserIn () } else { return \"Sorry, wrong username or password.\" } The above code says \"If the usernames match AND the passwords match log the user in.\" 1 2 3 4 5 6 const myVariable = 50 ; //truthy const yourVariable = 90 ; // truthy if ( myVariable && yourVariable ) { console . log ( \"Both are truthy\" ) }; This can be literally read as: if myVariable and yourVariable are truthy then print out \"Both are truthy\". && , read as \"And\" is just what it states, 'this and that'. With &&, you can kind of think of your logical operations as, \"If everything in this expression is truthy, then it will evaluate to true\" 1 2 3 4 true && true // true true && false // false false && true // false false && false // false The above statements, like all others are read or evaluated from left to right. If the first expression is true the second expression won't even be evaluated.","title":"Logical Operators"},{"location":"preCourse/comparisonOperators/#the-or-operator-","text":"The double-pipes (||) reads as \"or\" in our comparison statements: 1 2 3 4 5 6 const myVariable = 50 ; // truthy const yourVariable = 0 ; // falsey if ( myVariable || yourVariable ) { console . log ( \"One is truthy\" ) }; The above statement can be literally read: if myVariable or yourVariable are truthy then print out \"One is truthy\". || , read as \"or\": \"If at least one operand in this expression is truthy, it will still evaluate to true\" 1 2 3 4 true || true // true true || false // true false || true // true false || false // false NOTE: An operand is simply a piece of data being evaluated in the expression.","title":"The \"Or\" Operator - ||"},{"location":"preCourse/comparisonOperators/#know-your-docs","text":"MDN Docs - Logical Operators","title":"Know Your Docs"},{"location":"preCourse/dataTypes/","text":"Data Types in JavaScript Why Different Data Types? When we program, we need to hold values and access them later on. Think about typing into a calculator: 7 + 54 . We first type 7 which gets held into a variable, Then we type + which gets held into a variable, Then we type 54 which also gets held into a variable, When we type = these three variables get passed into the \"calculate\" function which returns the expected value, 61. With this very simple program we can learn quite a bit. First, 7 is a Number, 54 is a Number, and + and = are both functions. This means we're using two different types of data: type Number and type Function. If we gave our \"calculate\" function the values \"cat\" + 54 it wouldn't be able to calculate a value for us because we gave it two different types of data: type String(\"cat\") and and type Number(54). All the things you see on your screen and the information you send and receive online comes in the form of different types of data. We call these types of data data types . How Many Data Types There are seven main data types in JavaScript in total. We can divide them into two main categories: Complex and Primitive . The Primitive Types String , i.e. \"cat\" , \"dog\" , \"700\" , \"Peter woke at 9 a.m.\" Number , i.e. 70 , 43 , 2 , 10000000 , -1 , 0 Boolean , i.e. true or false Undefined , i.e. undefined (literally undefined) The Complex Types Function , i.e. const add = (num1, num2) => { return num1 + num2 } Object , i.e. const vehicle = {color: \"red\", wheels: 4} Array , i.e. const passengers = [\"David\", \"Julia\", \"Pete\"] There is also \"Not a Number\" - NaN , which technically isn't a primitive or complex type but we'll talk about it when we need to. It occurs when you try to add \"cat\" to 54. Each of the data types can hold specific types of values but also come with special built in methods we can use to compare and manipulate them. For instance, Number type data can be calculated but String type data can't be calculated. And Array type data can be looped over but Functions types can't. Because of this, we need each type of data for specific reasons and we'll learn about each as we move through this course.","title":"Data Types"},{"location":"preCourse/dataTypes/#data-types-in-javascript","text":"","title":"Data Types in JavaScript"},{"location":"preCourse/dataTypes/#why-different-data-types","text":"When we program, we need to hold values and access them later on. Think about typing into a calculator: 7 + 54 . We first type 7 which gets held into a variable, Then we type + which gets held into a variable, Then we type 54 which also gets held into a variable, When we type = these three variables get passed into the \"calculate\" function which returns the expected value, 61. With this very simple program we can learn quite a bit. First, 7 is a Number, 54 is a Number, and + and = are both functions. This means we're using two different types of data: type Number and type Function. If we gave our \"calculate\" function the values \"cat\" + 54 it wouldn't be able to calculate a value for us because we gave it two different types of data: type String(\"cat\") and and type Number(54). All the things you see on your screen and the information you send and receive online comes in the form of different types of data. We call these types of data data types .","title":"Why Different Data Types?"},{"location":"preCourse/dataTypes/#how-many-data-types","text":"There are seven main data types in JavaScript in total. We can divide them into two main categories: Complex and Primitive .","title":"How Many Data Types"},{"location":"preCourse/dataTypes/#the-primitive-types","text":"String , i.e. \"cat\" , \"dog\" , \"700\" , \"Peter woke at 9 a.m.\" Number , i.e. 70 , 43 , 2 , 10000000 , -1 , 0 Boolean , i.e. true or false Undefined , i.e. undefined (literally undefined)","title":"The Primitive Types"},{"location":"preCourse/dataTypes/#the-complex-types","text":"Function , i.e. const add = (num1, num2) => { return num1 + num2 } Object , i.e. const vehicle = {color: \"red\", wheels: 4} Array , i.e. const passengers = [\"David\", \"Julia\", \"Pete\"] There is also \"Not a Number\" - NaN , which technically isn't a primitive or complex type but we'll talk about it when we need to. It occurs when you try to add \"cat\" to 54. Each of the data types can hold specific types of values but also come with special built in methods we can use to compare and manipulate them. For instance, Number type data can be calculated but String type data can't be calculated. And Array type data can be looped over but Functions types can't. Because of this, we need each type of data for specific reasons and we'll learn about each as we move through this course.","title":"The Complex Types"},{"location":"preCourse/dataTypesAndFunctions/","text":"Practice Data Types and Functions Create a new Repl.it called: dataTypesAndFunctions Using the console.log() method, complete each of the following prompts. Place the code you want to execute inside the () ( invocation parenthesis ), like so: 1 2 3 4 5 // subtract one number from another const firstNumber = 9 ; const secondNumber = 3 ; console . log ( firstNumber - secondNumber ); Run the program to see what happens. Start using console.log() as you build all of your future projects to see expect outputs. Make a variable called name and assign its value to be your name as a string Make a variable called userAge and assign its value to be your age as a number Create a function called dividedBy . It should take in any two numbers and return the result of the first number divided by the second. HINT 1: Be sure to hold all of your values in a variable. When you hit \"Run\" ( Cmd + Enter ), the emulator will display the results on the right! Hint 2: You will have to google how to do these. Go figure them out for yourself and have fun doing it!! If you don't know, try HackOverflow. Display the current day and time in JavaScript. Convert a Number, 7 , to a String, \"7\" , in JavaScript. Convert a string, \"7\" , to the number, 7 , in JavaScript. Add two numbers together in JavaScript. Print out \"Both are TRUE\" only when 2 things are true. Print out \"One of these is TRUE\" when 1 of 2 things are true. Print out \"Neither is TRUE\" when both things are not true. Create one variable for each of the following data types: Boolean i.e. const myBool = false; Null Undefined Number NaN String Copy/paste the following variable, function declaration, and function invocation into your Repl.it: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // your variable const myBool = false ; // function declaration const isTypeOf = ( data ) => { return console . log ( typeof data ); } // function invocation isTypeOf ( myBool ); // In the function invocation, replace \"myBool\" with the other names of your variables...isTypeOf(name); isTypeOf(divideBy);...etc. // What is happening? Additional Resources Learn JavaScript in 12 Minutes","title":"Practice Data Types & Functions"},{"location":"preCourse/dataTypesAndFunctions/#practice-data-types-and-functions","text":"Create a new Repl.it called: dataTypesAndFunctions Using the console.log() method, complete each of the following prompts. Place the code you want to execute inside the () ( invocation parenthesis ), like so: 1 2 3 4 5 // subtract one number from another const firstNumber = 9 ; const secondNumber = 3 ; console . log ( firstNumber - secondNumber ); Run the program to see what happens. Start using console.log() as you build all of your future projects to see expect outputs. Make a variable called name and assign its value to be your name as a string Make a variable called userAge and assign its value to be your age as a number Create a function called dividedBy . It should take in any two numbers and return the result of the first number divided by the second. HINT 1: Be sure to hold all of your values in a variable. When you hit \"Run\" ( Cmd + Enter ), the emulator will display the results on the right! Hint 2: You will have to google how to do these. Go figure them out for yourself and have fun doing it!! If you don't know, try HackOverflow. Display the current day and time in JavaScript. Convert a Number, 7 , to a String, \"7\" , in JavaScript. Convert a string, \"7\" , to the number, 7 , in JavaScript. Add two numbers together in JavaScript. Print out \"Both are TRUE\" only when 2 things are true. Print out \"One of these is TRUE\" when 1 of 2 things are true. Print out \"Neither is TRUE\" when both things are not true. Create one variable for each of the following data types: Boolean i.e. const myBool = false; Null Undefined Number NaN String Copy/paste the following variable, function declaration, and function invocation into your Repl.it: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // your variable const myBool = false ; // function declaration const isTypeOf = ( data ) => { return console . log ( typeof data ); } // function invocation isTypeOf ( myBool ); // In the function invocation, replace \"myBool\" with the other names of your variables...isTypeOf(name); isTypeOf(divideBy);...etc. // What is happening?","title":"Practice Data Types and Functions"},{"location":"preCourse/dataTypesAndFunctions/#additional-resources","text":"Learn JavaScript in 12 Minutes","title":"Additional Resources"},{"location":"preCourse/es5%26es6/","text":"ES5 vs ES6 Coding languages are standardized and maintained by groups or councils of people that work with and listen to the developers that use the language. Therefore languages are updated and improved periodically. JavaScript is no different. In fact, it may be one of the most rapidly improved and frequently changed languages. The body of people that maintain JavaScript is called the ECMA-262 which is overseen by the the ECMA International . The ECMA-262 made its first edition in 1997 and its latest edition came out in June 2018: ES2018 (ES9). The reason we're talking about ES6 and not ES9 here is that ES6 was the biggest renovation of the language and is now the standard of the language used across multiple platforms. While there are newer features in the newer editions it is important to remember that the engines that run JavaScript, like Chrome V8 JS Engine , have to all be updated for these newer features, so each platform can talk back and forth to one another. This process takes time so the official edition of the language in use is always a few years behind where the latest edition actually is. Note on transpiling(sic) from Wikipedia : Since ES 2015, transpiling JavaScript has become very common. Transpilation is a source to source compilation in which the newer versions of JavaScript are used in the user's source code and the transpiler rewrites them so that they are compliant with the current specification. Usually, transpilers transpile down to ES3 to maintain compatibility with all versions of browsers. The settings to transpiling to a specific version can be configured according to need. Transpiling adds an extra step to the build process and is sometimes done to avoid needing polyfills. Polyfills allow adding extra functionalities by including another JavaScript file which adds those specific functionalities. That said you should keep abreast of the recent changes in the languages you write so that you can utilize the fun new features!! So, as you learn in the course, watch videos and read blogs by other developers. They'll give you free information to use as you want. NOTE: The image below describes another reason we use Chrome as our default browser. Notice the conformance percentage for later versions of JS (ECMA). ES5 vs ES6: How The code snippets below both declare a function called imAFunction and take in a argument called content ES2011 (ES5): 1 2 3 4 // hold a function as the value of a variable. Takes one argument: `parameter` var imAFunction = function ( parameter ) { // Do stuff here } ES2015 (ES6): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // same thing, taking one argument const imAFunction = parameter => { // Do stuff here } // function taking two arguments const imAFunction2 = ( parameter , parameter2 ) => { // Do stuff here } // function taking zero arguments const imAFunction3 = () => { // Do stuff here } The code snippets below all create the same variable, myVariable : Pre-ES2015 1 var myVariable = 10 ; ES2015 1 2 3 4 5 let myVariable = 10 const myVariable2 = 10 // use `let` if you expect the variable to change // use `const` if you expect the variable to be a constant value ES6 Why? Let, Const, Var Fat Arrow Syntax () => {} Additional Resources FunFunFunction - Fat Arrow Function NOTE: Don't get caught up on .filter() , .map() or .reduce() . These are really powerful built-in methods we will cover in-depth later on, together in class.","title":"ES5 vs ES6"},{"location":"preCourse/es5%26es6/#es5-vs-es6","text":"Coding languages are standardized and maintained by groups or councils of people that work with and listen to the developers that use the language. Therefore languages are updated and improved periodically. JavaScript is no different. In fact, it may be one of the most rapidly improved and frequently changed languages. The body of people that maintain JavaScript is called the ECMA-262 which is overseen by the the ECMA International . The ECMA-262 made its first edition in 1997 and its latest edition came out in June 2018: ES2018 (ES9). The reason we're talking about ES6 and not ES9 here is that ES6 was the biggest renovation of the language and is now the standard of the language used across multiple platforms. While there are newer features in the newer editions it is important to remember that the engines that run JavaScript, like Chrome V8 JS Engine , have to all be updated for these newer features, so each platform can talk back and forth to one another. This process takes time so the official edition of the language in use is always a few years behind where the latest edition actually is. Note on transpiling(sic) from Wikipedia : Since ES 2015, transpiling JavaScript has become very common. Transpilation is a source to source compilation in which the newer versions of JavaScript are used in the user's source code and the transpiler rewrites them so that they are compliant with the current specification. Usually, transpilers transpile down to ES3 to maintain compatibility with all versions of browsers. The settings to transpiling to a specific version can be configured according to need. Transpiling adds an extra step to the build process and is sometimes done to avoid needing polyfills. Polyfills allow adding extra functionalities by including another JavaScript file which adds those specific functionalities. That said you should keep abreast of the recent changes in the languages you write so that you can utilize the fun new features!! So, as you learn in the course, watch videos and read blogs by other developers. They'll give you free information to use as you want. NOTE: The image below describes another reason we use Chrome as our default browser. Notice the conformance percentage for later versions of JS (ECMA).","title":"ES5 vs ES6"},{"location":"preCourse/es5%26es6/#es5-vs-es6-how","text":"The code snippets below both declare a function called imAFunction and take in a argument called content ES2011 (ES5): 1 2 3 4 // hold a function as the value of a variable. Takes one argument: `parameter` var imAFunction = function ( parameter ) { // Do stuff here } ES2015 (ES6): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // same thing, taking one argument const imAFunction = parameter => { // Do stuff here } // function taking two arguments const imAFunction2 = ( parameter , parameter2 ) => { // Do stuff here } // function taking zero arguments const imAFunction3 = () => { // Do stuff here } The code snippets below all create the same variable, myVariable : Pre-ES2015 1 var myVariable = 10 ; ES2015 1 2 3 4 5 let myVariable = 10 const myVariable2 = 10 // use `let` if you expect the variable to change // use `const` if you expect the variable to be a constant value","title":"ES5 vs ES6: How"},{"location":"preCourse/es5%26es6/#es6-why","text":"","title":"ES6 Why?"},{"location":"preCourse/es5%26es6/#let-const-var","text":"","title":"Let, Const, Var"},{"location":"preCourse/es5%26es6/#fat-arrow-syntax","text":"","title":"Fat Arrow Syntax () =&gt; {}"},{"location":"preCourse/es5%26es6/#additional-resources","text":"FunFunFunction - Fat Arrow Function NOTE: Don't get caught up on .filter() , .map() or .reduce() . These are really powerful built-in methods we will cover in-depth later on, together in class.","title":"Additional Resources"},{"location":"preCourse/firstRepo/","text":"Date & Time Repo Try as hard as you can to complete this assignment so you can bring it to class for review. This will be your first assignment in JS211. Go to your devFolder or create a new folder to work in like JS211-Projects or something: mkdir JS211-Projects Fork this repo Clone it: git clone https://github.com/AustinCodingAcademy/JS211_CurrentDateTimeProject.git C hange D irectories into this new folder cd JS211_CurrentDateTimeProject You can check to make sure you're in the right directory by running one of the following commands: > Apple - pwd (print working directory) > Windows - echo %cd% > After hitting enter you should see \"JS211_CurrentDateTimeProject\" return on your command-line. I nstall dependencies: npm i This N ode P ackage M anager tool came with the Node software you downloaded earlier. Now open the folder up in VS Code by typing code . + Enter Tutorial to setup Path shortcut in Macs Go to the README.md and follow the directions Optional: you can first start building your solutions in a new Repl.it before adding them to the main.js file. This sometimes make for faster development time Additional Resources","title":"Date & Time Repo"},{"location":"preCourse/firstRepo/#date-time-repo","text":"Try as hard as you can to complete this assignment so you can bring it to class for review. This will be your first assignment in JS211. Go to your devFolder or create a new folder to work in like JS211-Projects or something: mkdir JS211-Projects Fork this repo Clone it: git clone https://github.com/AustinCodingAcademy/JS211_CurrentDateTimeProject.git C hange D irectories into this new folder cd JS211_CurrentDateTimeProject You can check to make sure you're in the right directory by running one of the following commands: > Apple - pwd (print working directory) > Windows - echo %cd% > After hitting enter you should see \"JS211_CurrentDateTimeProject\" return on your command-line. I nstall dependencies: npm i This N ode P ackage M anager tool came with the Node software you downloaded earlier. Now open the folder up in VS Code by typing code . + Enter Tutorial to setup Path shortcut in Macs Go to the README.md and follow the directions Optional: you can first start building your solutions in a new Repl.it before adding them to the main.js file. This sometimes make for faster development time","title":"Date &amp; Time Repo"},{"location":"preCourse/firstRepo/#additional-resources","text":"","title":"Additional Resources"},{"location":"preCourse/functionSignatures/","text":"Function Signatures What's Next Now that you have a few data types to use\u2014operators, variables, and methods\u2014you'll need to have a way to run each of those code blocks . You'll see your first assignment, CurrentDate & Time , asks for you to \"Write a JavaScript program that...\". This means you need to write a program that can be executed , or called , or what we like to say: invoked . These programs can be complex with many functions that call each other or they can be incredibly simple like the ones this assignment asks for. Today we'll focus on the very simplest of programs/functions. What are Functions Functions are executable blocks of code. They are used to performed predetermined tasks and return a value that can be captured and used by other functions. Think of a function as a recipe. Specifically let's think of it as a cocktail recipe so our bartender can call upon it and make us an old fashioned when we order one. From across the bar top we can call our bartender and order/ invoke an oldFashioned(). Then the bartender ( JavaScript Engine/Web Browser ) can find the recipe/ function , read the recipe/ function and then perform the predetermined tasks specified in the function. Let's see how that could work. Read the lines of code to see how a function's syntax is written, as well as the comments to see what is happening: 1 2 3 4 5 6 7 8 9 10 11 // create a function called gatherIngredients which takes a cocktail name as a parameter const gatherIngredients = ( typeOfCocktail ) = { return typeOfCocktail . listOfIngredients } // invoke the function and pass in oldFashioned as an argument and save that to a variable named oldFashionedIngredients const oldFashionedIngredients = gatherIngredients ( oldFashioned ) // this will return a list of ingredients so oldFashionedIngredients now equals a list/array of recipes. const oldFashionedIngredients = [{ 1 1 / 2 oz Bourbon }, { Angostura bitters }, { A Sugar cube }, { Water }, { Ice Cubes }, { Old Fashioned glass }, { Cocktail cherry }] Obviously the words above are not real words in JavaScript, but they get the idea through if you really read through them. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // Hold the ingredients needed to build an old fashioned const oldFashionedIngredients = [ { 1 1 / 2 oz Bourbon }, { Angostura bitters }, { A Sugar cube }, { Water }, { Ice Cubes }, { Old Fashioned glass }, { Cocktail cherry } ] // then create the instructions to build an old fashioned which takes a list of ingredients as a parameter const buildAnOldFashioned = (... ingredients ) => { Place sugar cube in old fashioned glass (); then (); saturate with bitters (); then (); add a dash of plain water (); then (); Muddle until dissolved (); then (); Fill the glass with ice cubes (); then (); pour 1.5 ounce whiskey in to Old Fashioned glass (); finally (); Garnish with cocktail cherry (); return cocktail to guest (); } // pass the ingredients as an argument into the function to invoke the function buildAnOldFashioned ( oldFashionedIngredients ); You see, a function is just a recipe, written somewhere in a file, held in the memory of the computer, so it can be called/executed/invoked with certain ingredients/ arguments to return a desired result. Put another way, functions provide a way for us to perform the same task with any set of parameters , over and over. Think of a calculator which has a few simple functions (+, -, /, *) that are used over and over again with different arguments/numbers (0, 1, 2, 3, 4, 5, 6, 7, 8, 9). All other functions work this same way!! Rules About Functions Functions must FIRST be declared before they can be invoked . Function declaration: const myFunc = (arg1) => { return arg1 + 2} Function invocations: myFunc(15), myFunc(10), myFunc(20) The returns of these functions would be: 17, 12 and 22 Functions must return something. Functions are camelCased just like variables. Functions should be named descriptively for their purposes and the data types that they return, i.e. isValidInput(input1) would be a function that evaluates if a value is true or false and it would return a Boolean type value. sumOfTwoNumbers(num1, num2) would be a function that takes two numbers and returns their sum. You can recognize when a function is being used by recognizing the () , examples: sumOfTwoNumbers(3, 4) - is a function that is being invoked/called/executed const divideTwoNumbers = (num1, num2) => { num1/num2} - is a function that is being declared/defined More Examples Below is a JavaScript program called sumOfTwoNumbers that returns the sum of two numbers and is being called twice with different arguments. 1 2 3 4 5 6 7 8 // declaration with two parameters const sumOfTwoNumbers = ( num1 , num2 ) => { return num1 + num2 ; } // invocation with two arguments sumOfTwoNumbers ( 7 , 9 ) // => 16 sumOfTwoNumbers ( 300 , 400000 ); // => 400300 In the example below we see that function declarations have parameters but when we invoke a function we \"pass in\" arguments . 1 2 3 4 5 6 7 8 9 // Declare the function with parameters: a and b const productOfTwoNumbers = ( a , b ) => { const product = a * b ; return product + \" Yay! You returned something!\" ; } // Invoke the function with two arguments: 2 and 8 productOfTwoNumbers ( 2 , 8 ); Below, loadContent is a function, written in an o= older version of JavaScript that is being declared. Notice the function keyword. 1 2 3 4 function loadContent ( user ) { return \"content loaded\" } And this example is written the same way and also being invoked. 1 2 3 4 5 6 7 // the function declaration comes first function ourFunFunc () { return \"Thanks for putting me above where you invoked me\" ; } // Invoke the function below it ourFunFunc (); STOP !!! There's something that must be discussed! So far you've seen function signatures as: 1 const ourFunFunc = () => { } But just now you saw: 1 2 function ourFunFunc () { } What gives? Well, the one with the const is the newer and more preferred way of writing a function signature . Under the hood it provides better scope but that's not something you should worry about right now. We need you to be familiar with both because you will see both in the wild. However, get comfortable with using const functionName instead of the keyword function . Know Your Docs MDN Docs - Function Declarations Additional Resources Intro to Functions in JS CAUTION: In this video he does a great job explaining function syntax, he uses a different keyword and syntax to declare constants and functions. He shouldn't be using let but instead should be using const for the function declarations.","title":"Function Signatures"},{"location":"preCourse/functionSignatures/#function-signatures","text":"","title":"Function Signatures"},{"location":"preCourse/functionSignatures/#whats-next","text":"Now that you have a few data types to use\u2014operators, variables, and methods\u2014you'll need to have a way to run each of those code blocks . You'll see your first assignment, CurrentDate & Time , asks for you to \"Write a JavaScript program that...\". This means you need to write a program that can be executed , or called , or what we like to say: invoked . These programs can be complex with many functions that call each other or they can be incredibly simple like the ones this assignment asks for. Today we'll focus on the very simplest of programs/functions.","title":"What's Next"},{"location":"preCourse/functionSignatures/#what-are-functions","text":"Functions are executable blocks of code. They are used to performed predetermined tasks and return a value that can be captured and used by other functions. Think of a function as a recipe. Specifically let's think of it as a cocktail recipe so our bartender can call upon it and make us an old fashioned when we order one. From across the bar top we can call our bartender and order/ invoke an oldFashioned(). Then the bartender ( JavaScript Engine/Web Browser ) can find the recipe/ function , read the recipe/ function and then perform the predetermined tasks specified in the function. Let's see how that could work. Read the lines of code to see how a function's syntax is written, as well as the comments to see what is happening: 1 2 3 4 5 6 7 8 9 10 11 // create a function called gatherIngredients which takes a cocktail name as a parameter const gatherIngredients = ( typeOfCocktail ) = { return typeOfCocktail . listOfIngredients } // invoke the function and pass in oldFashioned as an argument and save that to a variable named oldFashionedIngredients const oldFashionedIngredients = gatherIngredients ( oldFashioned ) // this will return a list of ingredients so oldFashionedIngredients now equals a list/array of recipes. const oldFashionedIngredients = [{ 1 1 / 2 oz Bourbon }, { Angostura bitters }, { A Sugar cube }, { Water }, { Ice Cubes }, { Old Fashioned glass }, { Cocktail cherry }] Obviously the words above are not real words in JavaScript, but they get the idea through if you really read through them. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 // Hold the ingredients needed to build an old fashioned const oldFashionedIngredients = [ { 1 1 / 2 oz Bourbon }, { Angostura bitters }, { A Sugar cube }, { Water }, { Ice Cubes }, { Old Fashioned glass }, { Cocktail cherry } ] // then create the instructions to build an old fashioned which takes a list of ingredients as a parameter const buildAnOldFashioned = (... ingredients ) => { Place sugar cube in old fashioned glass (); then (); saturate with bitters (); then (); add a dash of plain water (); then (); Muddle until dissolved (); then (); Fill the glass with ice cubes (); then (); pour 1.5 ounce whiskey in to Old Fashioned glass (); finally (); Garnish with cocktail cherry (); return cocktail to guest (); } // pass the ingredients as an argument into the function to invoke the function buildAnOldFashioned ( oldFashionedIngredients ); You see, a function is just a recipe, written somewhere in a file, held in the memory of the computer, so it can be called/executed/invoked with certain ingredients/ arguments to return a desired result. Put another way, functions provide a way for us to perform the same task with any set of parameters , over and over. Think of a calculator which has a few simple functions (+, -, /, *) that are used over and over again with different arguments/numbers (0, 1, 2, 3, 4, 5, 6, 7, 8, 9). All other functions work this same way!!","title":"What are Functions"},{"location":"preCourse/functionSignatures/#rules-about-functions","text":"Functions must FIRST be declared before they can be invoked . Function declaration: const myFunc = (arg1) => { return arg1 + 2} Function invocations: myFunc(15), myFunc(10), myFunc(20) The returns of these functions would be: 17, 12 and 22 Functions must return something. Functions are camelCased just like variables. Functions should be named descriptively for their purposes and the data types that they return, i.e. isValidInput(input1) would be a function that evaluates if a value is true or false and it would return a Boolean type value. sumOfTwoNumbers(num1, num2) would be a function that takes two numbers and returns their sum. You can recognize when a function is being used by recognizing the () , examples: sumOfTwoNumbers(3, 4) - is a function that is being invoked/called/executed const divideTwoNumbers = (num1, num2) => { num1/num2} - is a function that is being declared/defined","title":"Rules About Functions"},{"location":"preCourse/functionSignatures/#more-examples","text":"Below is a JavaScript program called sumOfTwoNumbers that returns the sum of two numbers and is being called twice with different arguments. 1 2 3 4 5 6 7 8 // declaration with two parameters const sumOfTwoNumbers = ( num1 , num2 ) => { return num1 + num2 ; } // invocation with two arguments sumOfTwoNumbers ( 7 , 9 ) // => 16 sumOfTwoNumbers ( 300 , 400000 ); // => 400300 In the example below we see that function declarations have parameters but when we invoke a function we \"pass in\" arguments . 1 2 3 4 5 6 7 8 9 // Declare the function with parameters: a and b const productOfTwoNumbers = ( a , b ) => { const product = a * b ; return product + \" Yay! You returned something!\" ; } // Invoke the function with two arguments: 2 and 8 productOfTwoNumbers ( 2 , 8 ); Below, loadContent is a function, written in an o= older version of JavaScript that is being declared. Notice the function keyword. 1 2 3 4 function loadContent ( user ) { return \"content loaded\" } And this example is written the same way and also being invoked. 1 2 3 4 5 6 7 // the function declaration comes first function ourFunFunc () { return \"Thanks for putting me above where you invoked me\" ; } // Invoke the function below it ourFunFunc (); STOP !!! There's something that must be discussed! So far you've seen function signatures as: 1 const ourFunFunc = () => { } But just now you saw: 1 2 function ourFunFunc () { } What gives? Well, the one with the const is the newer and more preferred way of writing a function signature . Under the hood it provides better scope but that's not something you should worry about right now. We need you to be familiar with both because you will see both in the wild. However, get comfortable with using const functionName instead of the keyword function .","title":"More Examples"},{"location":"preCourse/functionSignatures/#know-your-docs","text":"MDN Docs - Function Declarations","title":"Know Your Docs"},{"location":"preCourse/functionSignatures/#additional-resources","text":"Intro to Functions in JS CAUTION: In this video he does a great job explaining function syntax, he uses a different keyword and syntax to declare constants and functions. He shouldn't be using let but instead should be using const for the function declarations.","title":"Additional Resources"},{"location":"preCourse/historyOfJavaScript/","text":"A VERY Brief History of JavaScript Taken from A Brief History of JavaScript written by Sebastian Peyrott at Auth0. Be sure to read the bullet points, they could help you in an interview someday... May-Dec 1995 Netscape Communicator and NCSA Mosaic were the first popular web browsers. Netscape was founded by the same people that built Mosaic, but now had money and time to build it better. Marc Andreessen, founder of Netscape Communications wanted the web to become more dynamic. Animations, interaction and other forms of small automation should be part of the web of the future. To do that they would need a small scripting language that could interact with the Document Object Model (DOM) (which was not set in stone as it is right now). And it should be accessible to non-developers, better yet for designers the way HTML already was. And so the idea of Mocha was born. Mocha was to become a scripting language for the web. Simple, dynamic, and accessible to non-developers. Brendan Eich , father of JavaScript, was contracted by Netscape Communications to develop a \"Scheme for the browser\". This Scheme was to be dynamic, powerful, and functional in nature, easy to grasp syntactically and to reduce verbosity and speed up development. There was a lot of pressure to come up with a working prototype as soon as possible. The Java (not JS!) language was starting to get traction. Sun Microsystems was making a big push for it and Netscape Communications was about to close a deal with them to make Java available in the browser. Enter a new language, Mocha. The idea at the time was that Java was not suited for the type of audience that would consume Mocha: Scripters, amateurs, designers. Java was just too big, too enterprisy (sic) for the role. There was a lot of internal pressure to pick one language as soon as possible. Python , Tcl and Scheme itself were all possible candidates. So Eich had to work fast. May 1995 - Eich had the luxury to choose features but had little time to build the language. In a matter of weeks, a working prototype was integrated into Netscape Communicator in May 1995. In the end, a Java-like syntax was required, and familiar semantics for many common idioms was also adopted. So Mocha was not like Scheme at all. It looked like a dynamic Java, but underneath it was a very different beast: a premature lovechild of Scheme and Self , with Java looks. Mocha was renamed to LiveScript . And later when Sun and Netscape closed the deal it was renamed JavaScript, a scripting language for small client-side tasks. Java would be promoted as a bigger, professional tool to develop rich web components. This first version of JavaScript set in stone many of the traits the language is known for today. In particular, its object-model , and its functional features were already present in this first version. August 1996 - At the moment (and for a very long time), web standards were not strong. So Microsoft implemented its own version of JavaScript, called JScript. JScript was different in more than just name. Slight differences in implementation, in particular with regards to certain DOM functions, caused ripples that would still be felt many years into the future. JavaScript wars were fought in more fronts than just names and timelines and many of its quirks are just the wounds of these wars. The first version of JScript was included with Internet Explorer 3.0, released in August 1996. In the fall of 1996, Eich rewrote most of Mocha into a cleaner implementation to pay off for the technical debt caused by rushing it out of the door. This new version of Netscape's JavaScript engine was called SpiderMonkey . SpiderMonkey is still the name of the JavaScript engine found in Firefox, Netscape Navigator's grandson. For the full article, that link again is A Brief History of JavaScript .","title":"History of JavaScript"},{"location":"preCourse/historyOfJavaScript/#a-very-brief-history-of-javascript","text":"Taken from A Brief History of JavaScript written by Sebastian Peyrott at Auth0. Be sure to read the bullet points, they could help you in an interview someday... May-Dec 1995 Netscape Communicator and NCSA Mosaic were the first popular web browsers. Netscape was founded by the same people that built Mosaic, but now had money and time to build it better. Marc Andreessen, founder of Netscape Communications wanted the web to become more dynamic. Animations, interaction and other forms of small automation should be part of the web of the future. To do that they would need a small scripting language that could interact with the Document Object Model (DOM) (which was not set in stone as it is right now). And it should be accessible to non-developers, better yet for designers the way HTML already was. And so the idea of Mocha was born. Mocha was to become a scripting language for the web. Simple, dynamic, and accessible to non-developers. Brendan Eich , father of JavaScript, was contracted by Netscape Communications to develop a \"Scheme for the browser\". This Scheme was to be dynamic, powerful, and functional in nature, easy to grasp syntactically and to reduce verbosity and speed up development. There was a lot of pressure to come up with a working prototype as soon as possible. The Java (not JS!) language was starting to get traction. Sun Microsystems was making a big push for it and Netscape Communications was about to close a deal with them to make Java available in the browser. Enter a new language, Mocha. The idea at the time was that Java was not suited for the type of audience that would consume Mocha: Scripters, amateurs, designers. Java was just too big, too enterprisy (sic) for the role. There was a lot of internal pressure to pick one language as soon as possible. Python , Tcl and Scheme itself were all possible candidates. So Eich had to work fast. May 1995 - Eich had the luxury to choose features but had little time to build the language. In a matter of weeks, a working prototype was integrated into Netscape Communicator in May 1995. In the end, a Java-like syntax was required, and familiar semantics for many common idioms was also adopted. So Mocha was not like Scheme at all. It looked like a dynamic Java, but underneath it was a very different beast: a premature lovechild of Scheme and Self , with Java looks. Mocha was renamed to LiveScript . And later when Sun and Netscape closed the deal it was renamed JavaScript, a scripting language for small client-side tasks. Java would be promoted as a bigger, professional tool to develop rich web components. This first version of JavaScript set in stone many of the traits the language is known for today. In particular, its object-model , and its functional features were already present in this first version. August 1996 - At the moment (and for a very long time), web standards were not strong. So Microsoft implemented its own version of JavaScript, called JScript. JScript was different in more than just name. Slight differences in implementation, in particular with regards to certain DOM functions, caused ripples that would still be felt many years into the future. JavaScript wars were fought in more fronts than just names and timelines and many of its quirks are just the wounds of these wars. The first version of JScript was included with Internet Explorer 3.0, released in August 1996. In the fall of 1996, Eich rewrote most of Mocha into a cleaner implementation to pay off for the technical debt caused by rushing it out of the door. This new version of Netscape's JavaScript engine was called SpiderMonkey . SpiderMonkey is still the name of the JavaScript engine found in Firefox, Netscape Navigator's grandson. For the full article, that link again is A Brief History of JavaScript .","title":"A VERY Brief History of JavaScript"},{"location":"preCourse/preClassChecklist/","text":"Pre-Class Checklist Before coming into class make sure you have all of the things you need to make your class time the most productive and successful possible! Bring the following items to class with you Growth Mindset Growth Mindset vs Fixed Mindset The Power of Believing - Carol Dweck Laptop Laptop charger Chrome installed VS Code installed GitHub account CodePen account Repl.it account (This will become a journal of code for you!!) Zollege profile RocketChat login info HackOverflow login info Medium account info Journal or writing pad (for notes and drawing) Pencils or pens Completely read and finished all the steps in the Pre-Course work Complete the CurrentDate and Time repos Make final payment Congratulations!! You're all set for class! We'll send you a final reminder email before day one but until then, \"We look forward to seeing you!\"","title":"Day 1 Checklist"},{"location":"preCourse/preClassChecklist/#pre-class-checklist","text":"Before coming into class make sure you have all of the things you need to make your class time the most productive and successful possible! Bring the following items to class with you Growth Mindset Growth Mindset vs Fixed Mindset The Power of Believing - Carol Dweck Laptop Laptop charger Chrome installed VS Code installed GitHub account CodePen account Repl.it account (This will become a journal of code for you!!) Zollege profile RocketChat login info HackOverflow login info Medium account info Journal or writing pad (for notes and drawing) Pencils or pens Completely read and finished all the steps in the Pre-Course work Complete the CurrentDate and Time repos Make final payment Congratulations!! You're all set for class! We'll send you a final reminder email before day one but until then, \"We look forward to seeing you!\"","title":"Pre-Class Checklist"},{"location":"preCourse/setupInstructions/","text":"Prepare Your Machine(Setup Your Computer) To work in the course you'll need four essential tools on your machine (computer): a web browser , a text editor , a terminal or terminal emulator (a.k.a. command line interface or CLI) and the Node.js runtime environment . The short checklist looks like this: Download Chrome Download VS Code Terminal: MacOS has a built-in terminal Windows 10+ has Command Prompt Windows <=9 will need to download GitBash Download Node See It Chrome When consuming content through the internet, users/we need a program that can render the streams of data sent to our computer (laptop or phone) from other computers (the cloud) through the internet. The general name for this type of program is called a browser. Yes, you can surf the internet with other browsers like Internet Explore, Edge, Opera, Firefox or Safari, but Chrome undoubtedly has the strongest built-in dev tools of any browser. In this course and all the following courses we\u2019ll be using Chrome. Be sure to download Chrome. After that: Master Bookmark Management Organized Your Bookmarks Shortcut Practice: Cmd + T = open new tab Shortcut Practice: Cmd + Shift + T = reopen last closed tab Shortcut Practice: Cmd + R = refresh the current tab Shortcut Practice: Cmd + W = close the current tab NOTE: For Windows machines use Ctrl instead of Cmd . VS Code A text editor is simply a tool used to edit your code and organize it into files before it is executed. There are plenty of text editors or IDEs including Atom, SublimeText, IntelliJ, Brackets, WebStorm, VIM, TextWrangler, RubyMine and even NotePad. Some are paid, others are free, but for our use-case and to get the most powerful text editor for the buck we're going to use the free and well-supported Visual Studio Code . Be sure to download it and then continue to read up on other text editors as you grow as a developer. IDEs and TextEditors Why VS Code Learn & Practice More Keyboard Shortcuts NOTE: VS Code, Visual Studio and VS Community are all different text editors . Think of the terminal or CLI (command line interface) as a shortcut to the computer. Normally we access our computer's programs and files through a GUI (graphical user interface, pronounced: \"gooey\"). A GUI is nice and pretty, but sometimes we need to access the computer more directly and in a more efficient way. We can do this using the command line interface, or command line for short. Terminal or Terminal Emulator A terminal or Command Line Interface(CLI) is a way for you to interact with your computer's core functionality without building a GUI. GUI are what we give to people that don't know how to work with computers. We learn to work in terminals because later on we'll be interacting with remote servers and the only way we can talk to them is sending them messages through a CLI command. Macs Mac users have a built in terminal. To access it, simply hold Cmd + Space A Spotlight search bar should appear. Type in \"terminal\" then hit Enter . But you'll need homebrew so run this in your terminal: /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" and say yes to XCode . [Learn how to work through your Mac terminal with a few short commands(https://youtu.be/5XgBd6rjuDQ)]. Windows 10+ Windows 10 comes built with Command Prompt , a command line interpreter. It acts the same way as the command line and is in this way a command line emulator. Open Command Prompt via the Command Prompt shortcut located in the Start menu or on the Apps screen, depending on your version of Windows. Learn how to use the Windows command line . Windows < 10 If you are using a pre-Windows 10 machine then you will need to download GitBash to work as your terminal emulator. Learn GitBash commands . NOTE: We'll use these terminals or terminal emulators throughout this course and each one afterward, so make sure you can access them for now. Node Node.js is a runtime environment that allows us to build applications(apps) in JavaScript and run them outside of a browser(the native place for JavaScript). With Node downloaded on our computer we'll be able to build terminal apps in 211, servers in 311 and web apps in 411! Go ahead and download Node but don't do anything with it until the Node Lesson later on. Node.js for Mac Node.js for Windows","title":"Prepare Your Machine"},{"location":"preCourse/setupInstructions/#prepare-your-machinesetup-your-computer","text":"To work in the course you'll need four essential tools on your machine (computer): a web browser , a text editor , a terminal or terminal emulator (a.k.a. command line interface or CLI) and the Node.js runtime environment . The short checklist looks like this: Download Chrome Download VS Code Terminal: MacOS has a built-in terminal Windows 10+ has Command Prompt Windows <=9 will need to download GitBash Download Node","title":"Prepare Your Machine(Setup Your Computer)"},{"location":"preCourse/setupInstructions/#see-it","text":"","title":"See It"},{"location":"preCourse/setupInstructions/#chrome","text":"When consuming content through the internet, users/we need a program that can render the streams of data sent to our computer (laptop or phone) from other computers (the cloud) through the internet. The general name for this type of program is called a browser. Yes, you can surf the internet with other browsers like Internet Explore, Edge, Opera, Firefox or Safari, but Chrome undoubtedly has the strongest built-in dev tools of any browser. In this course and all the following courses we\u2019ll be using Chrome. Be sure to download Chrome. After that: Master Bookmark Management Organized Your Bookmarks Shortcut Practice: Cmd + T = open new tab Shortcut Practice: Cmd + Shift + T = reopen last closed tab Shortcut Practice: Cmd + R = refresh the current tab Shortcut Practice: Cmd + W = close the current tab NOTE: For Windows machines use Ctrl instead of Cmd .","title":"Chrome"},{"location":"preCourse/setupInstructions/#vs-code","text":"A text editor is simply a tool used to edit your code and organize it into files before it is executed. There are plenty of text editors or IDEs including Atom, SublimeText, IntelliJ, Brackets, WebStorm, VIM, TextWrangler, RubyMine and even NotePad. Some are paid, others are free, but for our use-case and to get the most powerful text editor for the buck we're going to use the free and well-supported Visual Studio Code . Be sure to download it and then continue to read up on other text editors as you grow as a developer. IDEs and TextEditors Why VS Code Learn & Practice More Keyboard Shortcuts NOTE: VS Code, Visual Studio and VS Community are all different text editors . Think of the terminal or CLI (command line interface) as a shortcut to the computer. Normally we access our computer's programs and files through a GUI (graphical user interface, pronounced: \"gooey\"). A GUI is nice and pretty, but sometimes we need to access the computer more directly and in a more efficient way. We can do this using the command line interface, or command line for short.","title":"VS Code"},{"location":"preCourse/setupInstructions/#terminal-or-terminal-emulator","text":"A terminal or Command Line Interface(CLI) is a way for you to interact with your computer's core functionality without building a GUI. GUI are what we give to people that don't know how to work with computers. We learn to work in terminals because later on we'll be interacting with remote servers and the only way we can talk to them is sending them messages through a CLI command. Macs Mac users have a built in terminal. To access it, simply hold Cmd + Space A Spotlight search bar should appear. Type in \"terminal\" then hit Enter . But you'll need homebrew so run this in your terminal: /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" and say yes to XCode . [Learn how to work through your Mac terminal with a few short commands(https://youtu.be/5XgBd6rjuDQ)]. Windows 10+ Windows 10 comes built with Command Prompt , a command line interpreter. It acts the same way as the command line and is in this way a command line emulator. Open Command Prompt via the Command Prompt shortcut located in the Start menu or on the Apps screen, depending on your version of Windows. Learn how to use the Windows command line . Windows < 10 If you are using a pre-Windows 10 machine then you will need to download GitBash to work as your terminal emulator. Learn GitBash commands . NOTE: We'll use these terminals or terminal emulators throughout this course and each one afterward, so make sure you can access them for now.","title":"Terminal or Terminal Emulator"},{"location":"preCourse/setupInstructions/#node","text":"Node.js is a runtime environment that allows us to build applications(apps) in JavaScript and run them outside of a browser(the native place for JavaScript). With Node downloaded on our computer we'll be able to build terminal apps in 211, servers in 311 and web apps in 411! Go ahead and download Node but don't do anything with it until the Node Lesson later on. Node.js for Mac Node.js for Windows","title":"Node"},{"location":"preCourse/submittingHomework/","text":"Submitting Coding Homework Create Your Development Folder For sanity and organization sake, you'll need a designated folder to keep all your coding projects together on your computer. This isn't a special folder just one that will be dedicated to keeping up with coding project. Open your terminal program and navigate to Documents: cd Documents Make a new folder named devFolder : mkdir devFolder Change into the new folder/directory you made in the last class: cd devFolder NOTE FOR WINDOWS MACHINES USING ONEDRIVE: If you use OneDrive to save your photos, music, and other files, you may run into problems using Git and GitHub to create and manage your repos. If you have any issues, please refer to How to Configure OneDrive to Sync Only Certain Folders in Windows 10 to unsync your devFolder . You will only need to create one folder for all of your coding projects to go into for the entirety of the program. When you graduate and get a job you will want to create a new folder to organize that work in. Create a Repo for Each Assignment Open your web browser and sign in to your GitHub account. Click the New button in the top-right corner of the window. Enter ACA_web101_yourFirstName_yourLastName in the Repository name field. NOTE: Change firstName for your actual first name and lastName for your actual last name. Enter This is my ACA portfolio in the Description field. Leave the Public radio button selected. Check the Add a README file checkbox. (this will create a README.md file for you to take notes in.) Click the Create repository button. Once the repo is created, click the Code button and copy the link it provides in the drop-down menu by clicking on the icon that looks like a page with the arrow pointing left. Go back to your terminal. Type git clone and paste the link you copied from your repo on GitHub to clone the repo onto your computer: git clone paste-that-link-here-and-replace-me Press the Enter key and watch it work! You will need to create a repo for most assignments and every time you want to start a new project on your own, for a friend or whenever you want to build something new. Keep this instructions handy as they will be the same in the future. Move Your Project Files For the first assignment, you've already been working in a folder that is NOT a Git repo. And, you have a new repo with nothing but a README file in it. To continue, you need to move the files of myPortfolio folder into your ACA_web101_yourname folder so Git can move your project to GitHub. Navigate to your finder/file explorer on your computer and open two separate windows. Navigate to your ACA_web101_yourname folder in the first window. Navigate to your myPortfolio folder in the other window. Drag the files of myPortfolio folder into the ACA_web101_yourname folder in the first window. There is a way to turn a folder on your computer into a git repo using git init but that's an abstract lesson for where we are in your learning journey now. In the future, we will walk you through that method but for now, just copy/paste or drag and drop the files into the newly cloned folder/repo. Push to GitHub You've created a new repo, cloned it to your local machine, and moved your myPortfolio folder with your project files into the new repo. Now it's time to push your files to GitHub. Open your terminal, and cd (change directory) to your ACA_web101_yourname folder: Example: cd ACA_web101_yourname TIP: Type the first few letters of the folder and press Tab , and the terminal will fill in the rest of the folder name. You will see the full directory path with ( main ) or ( master ) at the end. This confirms you are in a Git repo and on the main / master branch. Type git status + Enter . You will see your myPortfolio folder (or a list of files) that have been changed in red. Type git add -A + Enter to add/ track all files to what will be committed . You won't get a message back. Type git status + Enter again and you will see the files you just staged to commit now in green. Type git commit -m \"moved files into repo\" + Enter to commit your changes (the files you just moved over) so they're ready( staged ) to be sent to GitHub. You will see a summary of changes about to be pushed in white. the commit command takes an argument -m for \"message\" followed by some plain text inside \" \" . This is for you to write a detailed message about the code changes you've made so your team can easily reference & understand the updates. Type git push + Enter to push your files to GitHub. You will see the a success messages in white. IF you get a DENIED error you may need to redo your Git Configurations with the proper email/username and password IF you get a fatal message: 1 2 fatal: The current branch example-branch has no upstream branch. To push the current branch and set the remote as upstream, use simply copy/paste the command it gives you: git push --set-upstream origin <example-branch> See Git & Terminal Commands for a full list of commands. NOTE: All over the web and in this ebook when you see <yourName> or <example-branch> this means you should type in the name of your file or folder WITHOUT the wrapping < and > . You will do this step over, and over and OVER throughout the rest of your career. So write it down now, ask questions, understand what's happening and remember, git status , git add , git commit , and git push . Over and over and over again. Host Your Webpage Before you can view your web page in a browser and turn in your assignment, you need to set your repository as a GitHub page. This tells GitHub you want to display this repo to the web. Go to your GitHub account and open your ACA_web101_yourname repo. Click the Settings icon in the top navigation menu. Scroll down almost to the bottom of the page to the GitHub Pages section. Click the Source dropdown and select the main or master branch (the first option). Click the Save button. The page will automatically refresh. Scroll back down to the GitHub Pages section, and you will see a message and link that says \u201cYour site is published at https://yourusername.github.io/ACA_web101_yourname.\" . Click the link. This is the Root of your live site. Always test your site to make sure everything is working. You can make and push changes as many times as you need. Bookmark this link so you can find it throughout the course. This will be the link you turn in for your assignments. You will only use GitHub pages when you want to host a page to the world. Most of our assignments won't require you to do this but it's a darn handy tool for when you want to get something up on the cheap. Turn in Your Assignment Follow these steps when you're ready to submit your assignment: Step 1. Click \"Assignments\" on the left hand nav Step 2. Click on the name of assignment you're submitting Step 3. Click \"Submit Assignment\" Step 4. Enter the URL for the website you're submitting Step 5. Click \"Submit Assignment\" And that's it! You can re-submit if for whatever reason you need to turn in a different URL.","title":"Submitting Homework"},{"location":"preCourse/submittingHomework/#submitting-coding-homework","text":"","title":"Submitting Coding Homework"},{"location":"preCourse/submittingHomework/#create-your-development-folder","text":"For sanity and organization sake, you'll need a designated folder to keep all your coding projects together on your computer. This isn't a special folder just one that will be dedicated to keeping up with coding project. Open your terminal program and navigate to Documents: cd Documents Make a new folder named devFolder : mkdir devFolder Change into the new folder/directory you made in the last class: cd devFolder NOTE FOR WINDOWS MACHINES USING ONEDRIVE: If you use OneDrive to save your photos, music, and other files, you may run into problems using Git and GitHub to create and manage your repos. If you have any issues, please refer to How to Configure OneDrive to Sync Only Certain Folders in Windows 10 to unsync your devFolder . You will only need to create one folder for all of your coding projects to go into for the entirety of the program. When you graduate and get a job you will want to create a new folder to organize that work in.","title":"Create Your Development Folder"},{"location":"preCourse/submittingHomework/#create-a-repo-for-each-assignment","text":"Open your web browser and sign in to your GitHub account. Click the New button in the top-right corner of the window. Enter ACA_web101_yourFirstName_yourLastName in the Repository name field. NOTE: Change firstName for your actual first name and lastName for your actual last name. Enter This is my ACA portfolio in the Description field. Leave the Public radio button selected. Check the Add a README file checkbox. (this will create a README.md file for you to take notes in.) Click the Create repository button. Once the repo is created, click the Code button and copy the link it provides in the drop-down menu by clicking on the icon that looks like a page with the arrow pointing left. Go back to your terminal. Type git clone and paste the link you copied from your repo on GitHub to clone the repo onto your computer: git clone paste-that-link-here-and-replace-me Press the Enter key and watch it work! You will need to create a repo for most assignments and every time you want to start a new project on your own, for a friend or whenever you want to build something new. Keep this instructions handy as they will be the same in the future.","title":"Create a Repo for Each Assignment"},{"location":"preCourse/submittingHomework/#move-your-project-files","text":"For the first assignment, you've already been working in a folder that is NOT a Git repo. And, you have a new repo with nothing but a README file in it. To continue, you need to move the files of myPortfolio folder into your ACA_web101_yourname folder so Git can move your project to GitHub. Navigate to your finder/file explorer on your computer and open two separate windows. Navigate to your ACA_web101_yourname folder in the first window. Navigate to your myPortfolio folder in the other window. Drag the files of myPortfolio folder into the ACA_web101_yourname folder in the first window. There is a way to turn a folder on your computer into a git repo using git init but that's an abstract lesson for where we are in your learning journey now. In the future, we will walk you through that method but for now, just copy/paste or drag and drop the files into the newly cloned folder/repo.","title":"Move Your Project Files"},{"location":"preCourse/submittingHomework/#push-to-github","text":"You've created a new repo, cloned it to your local machine, and moved your myPortfolio folder with your project files into the new repo. Now it's time to push your files to GitHub. Open your terminal, and cd (change directory) to your ACA_web101_yourname folder: Example: cd ACA_web101_yourname TIP: Type the first few letters of the folder and press Tab , and the terminal will fill in the rest of the folder name. You will see the full directory path with ( main ) or ( master ) at the end. This confirms you are in a Git repo and on the main / master branch. Type git status + Enter . You will see your myPortfolio folder (or a list of files) that have been changed in red. Type git add -A + Enter to add/ track all files to what will be committed . You won't get a message back. Type git status + Enter again and you will see the files you just staged to commit now in green. Type git commit -m \"moved files into repo\" + Enter to commit your changes (the files you just moved over) so they're ready( staged ) to be sent to GitHub. You will see a summary of changes about to be pushed in white. the commit command takes an argument -m for \"message\" followed by some plain text inside \" \" . This is for you to write a detailed message about the code changes you've made so your team can easily reference & understand the updates. Type git push + Enter to push your files to GitHub. You will see the a success messages in white. IF you get a DENIED error you may need to redo your Git Configurations with the proper email/username and password IF you get a fatal message: 1 2 fatal: The current branch example-branch has no upstream branch. To push the current branch and set the remote as upstream, use simply copy/paste the command it gives you: git push --set-upstream origin <example-branch> See Git & Terminal Commands for a full list of commands. NOTE: All over the web and in this ebook when you see <yourName> or <example-branch> this means you should type in the name of your file or folder WITHOUT the wrapping < and > . You will do this step over, and over and OVER throughout the rest of your career. So write it down now, ask questions, understand what's happening and remember, git status , git add , git commit , and git push . Over and over and over again.","title":"Push to GitHub"},{"location":"preCourse/submittingHomework/#host-your-webpage","text":"Before you can view your web page in a browser and turn in your assignment, you need to set your repository as a GitHub page. This tells GitHub you want to display this repo to the web. Go to your GitHub account and open your ACA_web101_yourname repo. Click the Settings icon in the top navigation menu. Scroll down almost to the bottom of the page to the GitHub Pages section. Click the Source dropdown and select the main or master branch (the first option). Click the Save button. The page will automatically refresh. Scroll back down to the GitHub Pages section, and you will see a message and link that says \u201cYour site is published at https://yourusername.github.io/ACA_web101_yourname.\" . Click the link. This is the Root of your live site. Always test your site to make sure everything is working. You can make and push changes as many times as you need. Bookmark this link so you can find it throughout the course. This will be the link you turn in for your assignments. You will only use GitHub pages when you want to host a page to the world. Most of our assignments won't require you to do this but it's a darn handy tool for when you want to get something up on the cheap.","title":"Host Your Webpage"},{"location":"preCourse/submittingHomework/#turn-in-your-assignment","text":"Follow these steps when you're ready to submit your assignment: Step 1. Click \"Assignments\" on the left hand nav Step 2. Click on the name of assignment you're submitting Step 3. Click \"Submit Assignment\" Step 4. Enter the URL for the website you're submitting Step 5. Click \"Submit Assignment\" And that's it! You can re-submit if for whatever reason you need to turn in a different URL.","title":"Turn in Your Assignment"},{"location":"preCourse/succeedInThisCourse/","text":"How to Succeed In This Course and This Career If you\u2019ve completed 101 you already know how important it is for you to complete all of the pre-lesson homeworks before coming into class. Why? Our instructors don\u2019t lecture in class. Instead, our instructors guide you through multiple challenges including logic problems, presentations, interview questions, and application programming challenges. To use the class time effectively you and all of your classmates must complete the assigned pre-homework. If you and your classmates do this you\u2019ll be able to get into class and really ask good questions, apply what you\u2019re learning at home and advance your skills more quickly. This program is built to accommodate full-time employment through part-time classes BUT you will not learn everything you need to learn in these 5 hours/week. YOU MUST READ, WATCH, PRACTICE, and RESEARCH on your own. Each of the sections in your pre-lesson homeworks have been honed in through years of training student-developers to focus on what they really need to learn in a very short amount of time. Trust the process, do the work, sacrifice time now for your future, and GSD ! Flipped Classroom: What The short? You read and study outside of class and apply that knowledge in class with the support of your classmates and instructor. No pride. No ego. No shame. A more academic definition can be found here . But the following videos do well to explain it well. Either way, this approach works and works well. The only challenge now is to shape your mindset around it. The Flipped Classroom: Why In the traditional classroom , the teacher is the central focus of a lesson. The teacher responds to questions while students defer directly to the teacher for guidance and feedback. In a classroom with a traditional style of instruction, individual lessons may be focused on an explanation of content utilizing a lecture-style. Typically, this pattern of teaching also involves giving students the task of reading from a textbook or practicing a concept by working on a problem set, for example, outside school. In a flipped classroom students are required to study the content of the lecture outside of class by reading, watching videos and fiddling with code. Class time with the instructor is then mostly reserved for questions over the content, small discussions of related topics and then dedicated guided practice time on each project. This way students get access to a professional programmer when they need it, during problems and struggles. This approach may feel difficult at first but this methodology has been proven to work and is well suited for both adult learners and part-time education. The Flipped Classroom: How WATCH, READ, PRACTICE, RESEARCH, AND WRITE Every Pre-Homework will have a video to WATCH. These videos are incredibly important to help build context for why you\u2019ll be learning the upcoming concept. Watch all videos that are given to you even if they\u2019re 30 mins, 60 mins or just 5 mins. Watch them all! They were built or chosen because they teach what we need you to learn. READ ALL of the pre-homework given to you. Each lesson has been carefully thought out and crafted to guide you through, sometimes, very complex or technically intricate processes. Make sure you understand the concepts by reading every article that\u2019s suggested. PRACTICE Most pre-homework will have Practice It sections where you can apply the lesson you\u2019ve just watched and read about. This section is where you actually learn! Don\u2019t cut yourself short. DO THE PRACTICE PROBLEM ! Put it in a Repl.it and don\u2019t stop fidgeting with it until you completely understand it. RESEARCH your questions! ALL questions can be answered on the internet. Don\u2019t wait until you get to class to answer low hanging fruit. Find it on the internet. Then you can use your class time to ask harder questions with deeper understanding. At the end of most pre-lesson homeworks you\u2019ll see a list of Terms to Know & Questions for Discussion . If you can\u2019t describe or answer them to another person you need to go look them up on Google, read or watch a video on them, then WRITE down your understanding of each one in your journal. WRITE your blogging questions every week. You\u2019ll see a lesson on creating your blog account on Medium.com in the Pre-Course Lessons, so you can publish your thoughts on multiple subjects. These questions are collected from various interviews from our graduates and online research to prepare you for the hardest interview you\u2019ve ever experienced , the one you\u2019ll go through for your first developer job. Today's Shortcut - YouTube Videos While watching YouTube videos, Type Shift + > to accelerate the play speed of a video. Shift + < to slow it down. Simply type L to jump ahead by 10 seconds. And J to go back 10 seconds. Type C to turn on/off captions.","title":"The Flipped Classroom"},{"location":"preCourse/succeedInThisCourse/#how-to-succeed-in-this-course-and-this-career","text":"If you\u2019ve completed 101 you already know how important it is for you to complete all of the pre-lesson homeworks before coming into class. Why? Our instructors don\u2019t lecture in class. Instead, our instructors guide you through multiple challenges including logic problems, presentations, interview questions, and application programming challenges. To use the class time effectively you and all of your classmates must complete the assigned pre-homework. If you and your classmates do this you\u2019ll be able to get into class and really ask good questions, apply what you\u2019re learning at home and advance your skills more quickly. This program is built to accommodate full-time employment through part-time classes BUT you will not learn everything you need to learn in these 5 hours/week. YOU MUST READ, WATCH, PRACTICE, and RESEARCH on your own. Each of the sections in your pre-lesson homeworks have been honed in through years of training student-developers to focus on what they really need to learn in a very short amount of time. Trust the process, do the work, sacrifice time now for your future, and GSD !","title":"How to Succeed In This Course and This Career"},{"location":"preCourse/succeedInThisCourse/#flipped-classroom-what","text":"The short? You read and study outside of class and apply that knowledge in class with the support of your classmates and instructor. No pride. No ego. No shame. A more academic definition can be found here . But the following videos do well to explain it well. Either way, this approach works and works well. The only challenge now is to shape your mindset around it.","title":"Flipped Classroom: What"},{"location":"preCourse/succeedInThisCourse/#the-flipped-classroom-why","text":"In the traditional classroom , the teacher is the central focus of a lesson. The teacher responds to questions while students defer directly to the teacher for guidance and feedback. In a classroom with a traditional style of instruction, individual lessons may be focused on an explanation of content utilizing a lecture-style. Typically, this pattern of teaching also involves giving students the task of reading from a textbook or practicing a concept by working on a problem set, for example, outside school. In a flipped classroom students are required to study the content of the lecture outside of class by reading, watching videos and fiddling with code. Class time with the instructor is then mostly reserved for questions over the content, small discussions of related topics and then dedicated guided practice time on each project. This way students get access to a professional programmer when they need it, during problems and struggles. This approach may feel difficult at first but this methodology has been proven to work and is well suited for both adult learners and part-time education.","title":"The Flipped Classroom: Why"},{"location":"preCourse/succeedInThisCourse/#the-flipped-classroom-how","text":"WATCH, READ, PRACTICE, RESEARCH, AND WRITE Every Pre-Homework will have a video to WATCH. These videos are incredibly important to help build context for why you\u2019ll be learning the upcoming concept. Watch all videos that are given to you even if they\u2019re 30 mins, 60 mins or just 5 mins. Watch them all! They were built or chosen because they teach what we need you to learn. READ ALL of the pre-homework given to you. Each lesson has been carefully thought out and crafted to guide you through, sometimes, very complex or technically intricate processes. Make sure you understand the concepts by reading every article that\u2019s suggested. PRACTICE Most pre-homework will have Practice It sections where you can apply the lesson you\u2019ve just watched and read about. This section is where you actually learn! Don\u2019t cut yourself short. DO THE PRACTICE PROBLEM ! Put it in a Repl.it and don\u2019t stop fidgeting with it until you completely understand it. RESEARCH your questions! ALL questions can be answered on the internet. Don\u2019t wait until you get to class to answer low hanging fruit. Find it on the internet. Then you can use your class time to ask harder questions with deeper understanding. At the end of most pre-lesson homeworks you\u2019ll see a list of Terms to Know & Questions for Discussion . If you can\u2019t describe or answer them to another person you need to go look them up on Google, read or watch a video on them, then WRITE down your understanding of each one in your journal. WRITE your blogging questions every week. You\u2019ll see a lesson on creating your blog account on Medium.com in the Pre-Course Lessons, so you can publish your thoughts on multiple subjects. These questions are collected from various interviews from our graduates and online research to prepare you for the hardest interview you\u2019ve ever experienced , the one you\u2019ll go through for your first developer job.","title":"The Flipped Classroom: How"},{"location":"preCourse/succeedInThisCourse/#todays-shortcut-youtube-videos","text":"While watching YouTube videos, Type Shift + > to accelerate the play speed of a video. Shift + < to slow it down. Simply type L to jump ahead by 10 seconds. And J to go back 10 seconds. Type C to turn on/off captions.","title":"Today's Shortcut - YouTube Videos"},{"location":"preCourse/testDriveDevelopmentIntro/","text":"TDD While you will be learning the basics of programming and coding in JavaScript/Node in this course it is important to understand bigger concepts that apply to software development teams. One of these includes test-driven development or TDD. TDD is an approach used by many companies, teams, and individuals that promotes development of software through the use of small tests that test for specific requirements of the software before any of the code is written for the software. This approach gives the team confidence to know that each line of code they write is useful and will get them closer to their end goal, a functional, non-buggy application. Of course, you are still learning and will not be able to implement these high level procedures right from the beginning. Take this pressure off of yourself right now, and just know that you will get to TDD when you can. In the meantime, know that throughout this course you will be using repos that have unit tests built into each application. These tests are meant to test your application against real-world and edge-case scenarios. You can use these tests as guides when building your applications but also as templates to learn and build more tests. In fact, you will be asked to write multiple tests throughout this course and it is highly encouraged that you learn as much about testing as possible as this is a highly in-demand skill that will set you apart from other candidates during your job hunt. Additional Resources TDD","title":"Intro to TDD"},{"location":"preCourse/testDriveDevelopmentIntro/#tdd","text":"While you will be learning the basics of programming and coding in JavaScript/Node in this course it is important to understand bigger concepts that apply to software development teams. One of these includes test-driven development or TDD. TDD is an approach used by many companies, teams, and individuals that promotes development of software through the use of small tests that test for specific requirements of the software before any of the code is written for the software. This approach gives the team confidence to know that each line of code they write is useful and will get them closer to their end goal, a functional, non-buggy application. Of course, you are still learning and will not be able to implement these high level procedures right from the beginning. Take this pressure off of yourself right now, and just know that you will get to TDD when you can. In the meantime, know that throughout this course you will be using repos that have unit tests built into each application. These tests are meant to test your application against real-world and edge-case scenarios. You can use these tests as guides when building your applications but also as templates to learn and build more tests. In fact, you will be asked to write multiple tests throughout this course and it is highly encouraged that you learn as much about testing as possible as this is a highly in-demand skill that will set you apart from other candidates during your job hunt.","title":"TDD"},{"location":"preCourse/testDriveDevelopmentIntro/#additional-resources","text":"TDD","title":"Additional Resources"},{"location":"preCourse/typeBoolean/","text":"Type Boolean The next easiest data type for us to begin learning with is, undoubtedly, Boolean. A Boolean is darn simple, it can only be one of two things: true or false! Let's say that again, a Boolean data type can only be true or false. That's it. It may sound simple, but really, Booleans are the most useful of the data types because they determine on/off, yes/no, do/do not so all other data types can be used. Take a look... What's False and What's True? All values in JavaScript can be summed up as having a true or false value. That is to say, all values can be evaluated as either having a true value or a false value. We often use the terms \"truthy\" or \"falsey\" to say this very thing. A 0 will evaluate to false while a 1 would be evaluated as true . However, a pure Boolean value just means it's either true or false . The code snippet below shows two variables that hold these two different values: 1 2 const myVariableOne = true const myVariableTwo = false But when we're asking if another value is \"truthy\" or \"falsey\" it just means what is the value of the value or is the value actually there (does it actually exist). Let's start with \"falsey\" values. Here is a complete list of ALL JavaScript values that will evaluate to \"falsey\": undefined , NaN , Null , 0 , -0 , false , '' or \"\" ( empty strings ) This means that LITERALLY every other value in JavaScript (literally everything else) will evaluate to \"truthy\". ie. true , 10 , \"name\" , '.'. The Power of Booleans in JavaScript Think about the process of signing into your favorite app. When you type your username and password in, the front-end app sends that information to the server which has to use your username to pull your info out of a database and compare your inputted password to your actual password that's saved in the database. If the two passwords match, this is a true evaluation and you can be logged into your account. If not, that would be a false value. While programming we will perform various evaluations on Boolean values , in order to produce some kind of result. When properly implemented, they're kind of like asking a \"yes or no\" question about some piece of data at a particular point in your application. When we get a \"yes/no\" answer we can then start performing \"if/else\" procedures. Do you see where this is going yet? Back to that sign-in process. We could write: 1 2 3 4 5 if ( inputtedPassword === actualPassword ) { return logUserIn () } else { return \"Wrong username or password. Please try again.\" } We'll talk about if/else statements, also known as conditional statements , in a few lessons, but by now you might be able to see why we need to have and to use Boolean values. The Comparison Operators As you learned in the last section the = is known as the assignment operator because it points, or assigns value to a variable. We still need to compare values so let's look at how we can do that. The Double-Equals \"==\" vs the Triple-Equals \"===\" If we want to compare values we'll need to use two variations of the equal sign: == , checks if two values are equal. === , first checks if two values are of the same type then checks if the values are equal. The two tokens/symbols above are doing two different things but also the same thing. One is checking if things are equal, ==. BUT, because JavaScript likes to coerce data types, we have to use the === on occasion to first check the type of data then to check the equality of the values. Check out the examples below: 1 2 3 4 5 6 7 8 64 == '64' // true 64 == 'sixty-four' // false // the string 'sixty-four' won't be coerced but '64' will be 64 === '64' // false // 64 is of type Number where '64' is of type String so they are not equal in the strictest sense Let's look at each a little more closely on an individual basis. Value Only Comparison, \"==\" The == is used to compare values. 1 2 3 'blue' == 'blue' // true // or 'blue' == 'black' // false Above we see that the string blue equals blue but does not equal black . Now that you have that down, check this craziness out. Below, the string '3' equals the number 3 : 1 3 == '3' // true If you use the == in a comparison like the one above, JavaScript will try to coerce the String type of '3' into a Number type 3 and then compare the two. Again, JavaScript will try to change the string of \"3\" to the number of 3 and will result in the comparison being true . There is a big problem here. JS is type switching the type of one of our pieces of data and we don't want that!! This can result in poor program behavior, or side-effects . Because of this problem, there was a patch to the JavaScript language which introduced the Identity Operator , or Strictly Equals (slang): === . Strictly Equals: \"===\" To fix this problem of type switching or type coercion we use the identity operator . It looks like this: === . And it not only evaluates equality but also evaluates type of data, first. That is, it won't perform an evaluation unless the data types first match each other. Therefore: 1 3 === '3' // false Strictly equals === is much safer, since each operand gets tested by its data type first . 1 2 1 === '1' // false 1 === 1 // true This doesn't mean you can't use == but you will hear most developers say that you can't. Word to the wise, always know what you're writing and what you intend it to do. If you feel a == works in the case do it. Otherwise, stay with the safer === . This will be a debate you'll have for years to come. Practice It Read the code below and try to guess what the console.log will be. In other words, what will each line log out? Copy the console logs below and paste them into your text-editor and run them. Why do you think line 9 and 10 logged out different values? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 console . log ( \"line 1 is: \" + ( 1 === 1 )); console . log ( 2 === 1 ); console . log ( \"yes\" === \"yes\" ); console . log ( \"yes\" === \"no\" ); console . log ( \"line 5 is: \" + ( true === true )); console . log ( true === false ); console . log ( 1.2 === 1.2 ); console . log ( 1.2 === 1.20 ); console . log ( \"line 9 is: \" + ( 12 === '12' )); console . log ( \"line 10 is: \" + ( 12 == '12' )); NOTE: console.log() - the console is your \"terminal\" object in your browser and .log() is a built-in method that prints information on it. NOTE 2: Now that you've downloaded Node.js you can use it to run scripts like this in your computer's terminal by running the command node + Enter . The press ++cntrl+c+ twice to exit. Know Your Docs MDN Docs - Type Boolean","title":"Type Boolean"},{"location":"preCourse/typeBoolean/#type-boolean","text":"The next easiest data type for us to begin learning with is, undoubtedly, Boolean. A Boolean is darn simple, it can only be one of two things: true or false! Let's say that again, a Boolean data type can only be true or false. That's it. It may sound simple, but really, Booleans are the most useful of the data types because they determine on/off, yes/no, do/do not so all other data types can be used. Take a look...","title":"Type Boolean"},{"location":"preCourse/typeBoolean/#whats-false-and-whats-true","text":"All values in JavaScript can be summed up as having a true or false value. That is to say, all values can be evaluated as either having a true value or a false value. We often use the terms \"truthy\" or \"falsey\" to say this very thing. A 0 will evaluate to false while a 1 would be evaluated as true . However, a pure Boolean value just means it's either true or false . The code snippet below shows two variables that hold these two different values: 1 2 const myVariableOne = true const myVariableTwo = false But when we're asking if another value is \"truthy\" or \"falsey\" it just means what is the value of the value or is the value actually there (does it actually exist). Let's start with \"falsey\" values. Here is a complete list of ALL JavaScript values that will evaluate to \"falsey\": undefined , NaN , Null , 0 , -0 , false , '' or \"\" ( empty strings ) This means that LITERALLY every other value in JavaScript (literally everything else) will evaluate to \"truthy\". ie. true , 10 , \"name\" , '.'.","title":"What's False and What's True?"},{"location":"preCourse/typeBoolean/#the-power-of-booleans-in-javascript","text":"Think about the process of signing into your favorite app. When you type your username and password in, the front-end app sends that information to the server which has to use your username to pull your info out of a database and compare your inputted password to your actual password that's saved in the database. If the two passwords match, this is a true evaluation and you can be logged into your account. If not, that would be a false value. While programming we will perform various evaluations on Boolean values , in order to produce some kind of result. When properly implemented, they're kind of like asking a \"yes or no\" question about some piece of data at a particular point in your application. When we get a \"yes/no\" answer we can then start performing \"if/else\" procedures. Do you see where this is going yet? Back to that sign-in process. We could write: 1 2 3 4 5 if ( inputtedPassword === actualPassword ) { return logUserIn () } else { return \"Wrong username or password. Please try again.\" } We'll talk about if/else statements, also known as conditional statements , in a few lessons, but by now you might be able to see why we need to have and to use Boolean values.","title":"The Power of Booleans in JavaScript"},{"location":"preCourse/typeBoolean/#the-comparison-operators","text":"As you learned in the last section the = is known as the assignment operator because it points, or assigns value to a variable. We still need to compare values so let's look at how we can do that.","title":"The Comparison Operators"},{"location":"preCourse/typeBoolean/#the-double-equals-vs-the-triple-equals","text":"If we want to compare values we'll need to use two variations of the equal sign: == , checks if two values are equal. === , first checks if two values are of the same type then checks if the values are equal. The two tokens/symbols above are doing two different things but also the same thing. One is checking if things are equal, ==. BUT, because JavaScript likes to coerce data types, we have to use the === on occasion to first check the type of data then to check the equality of the values. Check out the examples below: 1 2 3 4 5 6 7 8 64 == '64' // true 64 == 'sixty-four' // false // the string 'sixty-four' won't be coerced but '64' will be 64 === '64' // false // 64 is of type Number where '64' is of type String so they are not equal in the strictest sense Let's look at each a little more closely on an individual basis.","title":"The Double-Equals \"==\" vs the Triple-Equals \"===\""},{"location":"preCourse/typeBoolean/#value-only-comparison","text":"The == is used to compare values. 1 2 3 'blue' == 'blue' // true // or 'blue' == 'black' // false Above we see that the string blue equals blue but does not equal black . Now that you have that down, check this craziness out. Below, the string '3' equals the number 3 : 1 3 == '3' // true If you use the == in a comparison like the one above, JavaScript will try to coerce the String type of '3' into a Number type 3 and then compare the two. Again, JavaScript will try to change the string of \"3\" to the number of 3 and will result in the comparison being true . There is a big problem here. JS is type switching the type of one of our pieces of data and we don't want that!! This can result in poor program behavior, or side-effects . Because of this problem, there was a patch to the JavaScript language which introduced the Identity Operator , or Strictly Equals (slang): === .","title":"Value Only Comparison, \"==\""},{"location":"preCourse/typeBoolean/#strictly-equals","text":"To fix this problem of type switching or type coercion we use the identity operator . It looks like this: === . And it not only evaluates equality but also evaluates type of data, first. That is, it won't perform an evaluation unless the data types first match each other. Therefore: 1 3 === '3' // false Strictly equals === is much safer, since each operand gets tested by its data type first . 1 2 1 === '1' // false 1 === 1 // true This doesn't mean you can't use == but you will hear most developers say that you can't. Word to the wise, always know what you're writing and what you intend it to do. If you feel a == works in the case do it. Otherwise, stay with the safer === . This will be a debate you'll have for years to come.","title":"Strictly Equals: \"===\""},{"location":"preCourse/typeBoolean/#practice-it","text":"Read the code below and try to guess what the console.log will be. In other words, what will each line log out? Copy the console logs below and paste them into your text-editor and run them. Why do you think line 9 and 10 logged out different values? 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 console . log ( \"line 1 is: \" + ( 1 === 1 )); console . log ( 2 === 1 ); console . log ( \"yes\" === \"yes\" ); console . log ( \"yes\" === \"no\" ); console . log ( \"line 5 is: \" + ( true === true )); console . log ( true === false ); console . log ( 1.2 === 1.2 ); console . log ( 1.2 === 1.20 ); console . log ( \"line 9 is: \" + ( 12 === '12' )); console . log ( \"line 10 is: \" + ( 12 == '12' )); NOTE: console.log() - the console is your \"terminal\" object in your browser and .log() is a built-in method that prints information on it. NOTE 2: Now that you've downloaded Node.js you can use it to run scripts like this in your computer's terminal by running the command node + Enter . The press ++cntrl+c+ twice to exit.","title":"Practice It"},{"location":"preCourse/typeBoolean/#know-your-docs","text":"MDN Docs - Type Boolean","title":"Know Your Docs"},{"location":"preCourse/typeNumber/","text":"Type Number & Basic Mathematic Operators Obviously in a calculator we have the basic calculation: +, -, /, *. When we program we also have access to these operations. In JavaScript: + means add - means subtract * means multiply / means divide ** means exponent In JavaScript, however, when we use the = token, it means \"assign\" or \"point\" rather than equals. There for its called the Assignment Operator ...because it assigns value to a variable. In our calculator, to return the value of a calculation, we use the keyword return like so: 1 2 3 4 5 6 7 const addTwoNumbers = ( num1 , num2 ) => { return num1 + num2 } addTwoNumbers ( 7 , 54 ) //expected return value >>> 61 The Modulus Operator The last operator we might want to use on our Numbers is called modulus, as in 11%5 equals 1 . Try it in your console. When we want the remainder of a division operation we use the % operator. This just means that we can divide a number by another number and get the remainder . I.e. 5 divided by 2 has a remainder of 1 because 2 will go into it twice with one left over. That operation in JavaScript would look like this: 1 5 % 2 // expected return => 1 Perhaps the most useful purpose of this operator is to decide if a number is even or not. If the return of the modulus operation by 2 is 0 then the number must be even: 1 2 3 4 5 6 7 8 9 10 11 60 % 2 // => 0, even 61 % 2 // => 1, odd 100 % 2 // => 0, even 101 % 2 // => 1, odd 22 % 2 // => 0, even 23 % 2 // => 1, odd 10 % 2 // => 0, even 11 % 2 // => 1, odd Built-In Methods of Data Type: Number Those built-in functionalities we call methods are very useful, as you'll see later on, but for the type Number, there are actually not that many to talk about, which makes for a very easy entry into methods. The built-in methods for type Number are: toString() toExponential() toFixed() toPrecision() Additionally, we have 3 JavaScript Methods to help us to convert numbers: Number() - converts a string to a number parseInt() - converts a number to a string parseFloat() - converts a string to a decimal number 1 2 3 4 5 const x = 123 ; x . toString (); // returns 123 from variable x ( 125 ). toString (); // returns 123 from literal 125 ( 100 + 23 ). toString (); // returns 123 from expression 100 + 23 Know Your Docs MDN Docs - Type Number MDN Docs - JS Operators Additional Resources Terms of a Division Equation","title":"Type Number"},{"location":"preCourse/typeNumber/#type-number-basic-mathematic-operators","text":"Obviously in a calculator we have the basic calculation: +, -, /, *. When we program we also have access to these operations. In JavaScript: + means add - means subtract * means multiply / means divide ** means exponent In JavaScript, however, when we use the = token, it means \"assign\" or \"point\" rather than equals. There for its called the Assignment Operator ...because it assigns value to a variable. In our calculator, to return the value of a calculation, we use the keyword return like so: 1 2 3 4 5 6 7 const addTwoNumbers = ( num1 , num2 ) => { return num1 + num2 } addTwoNumbers ( 7 , 54 ) //expected return value >>> 61","title":"Type Number &amp; Basic Mathematic Operators"},{"location":"preCourse/typeNumber/#the-modulus-operator","text":"The last operator we might want to use on our Numbers is called modulus, as in 11%5 equals 1 . Try it in your console. When we want the remainder of a division operation we use the % operator. This just means that we can divide a number by another number and get the remainder . I.e. 5 divided by 2 has a remainder of 1 because 2 will go into it twice with one left over. That operation in JavaScript would look like this: 1 5 % 2 // expected return => 1 Perhaps the most useful purpose of this operator is to decide if a number is even or not. If the return of the modulus operation by 2 is 0 then the number must be even: 1 2 3 4 5 6 7 8 9 10 11 60 % 2 // => 0, even 61 % 2 // => 1, odd 100 % 2 // => 0, even 101 % 2 // => 1, odd 22 % 2 // => 0, even 23 % 2 // => 1, odd 10 % 2 // => 0, even 11 % 2 // => 1, odd","title":"The Modulus Operator"},{"location":"preCourse/typeNumber/#built-in-methods-of-data-type-number","text":"Those built-in functionalities we call methods are very useful, as you'll see later on, but for the type Number, there are actually not that many to talk about, which makes for a very easy entry into methods. The built-in methods for type Number are: toString() toExponential() toFixed() toPrecision() Additionally, we have 3 JavaScript Methods to help us to convert numbers: Number() - converts a string to a number parseInt() - converts a number to a string parseFloat() - converts a string to a decimal number 1 2 3 4 5 const x = 123 ; x . toString (); // returns 123 from variable x ( 125 ). toString (); // returns 123 from literal 125 ( 100 + 23 ). toString (); // returns 123 from expression 100 + 23","title":"Built-In Methods of Data Type: Number"},{"location":"preCourse/typeNumber/#know-your-docs","text":"MDN Docs - Type Number MDN Docs - JS Operators","title":"Know Your Docs"},{"location":"preCourse/typeNumber/#additional-resources","text":"Terms of a Division Equation","title":"Additional Resources"},{"location":"preCourse/typeofOperator/","text":"typeof Operator Although we haven't covered all of the data types in JavaScript yet, you'll need to know about this special operator to complete your first assignment: CurrentDate & Time . So let's get this short and easy one out of the way!! What's the Problem? To effectively work with data, we need to know the type of data we're working with. Often times we wouldn't know what type of data is coming back to us because, as front-end developers, we usually don't build the back-end that we pull the data from. So we don't always know what to expect in the returned data stream . This presents problems because if the object we're trying to access is of type Array it won't have the same methods built into it as a standard JS object, and vice versa. To tell us what type of data we're working with we use the typeof operator. How Does it Work? The typeof operator simply returns the data type of a variable or JavaScript object. Using typeof is just like asking the JavaScript engine: \"What type of data is this thing?\" It's really useful when you get into the end of this 211 course and all of 311 because you will be requesting \"things\" (objects) from a remote database and you won't know exactly what type of data you're getting back...maybe it's a string, ...maybe it's a number, ...maybe it's an object-literal! With the built-in tool, typeof , you won't have to guess! Check out the example below: 1 2 3 4 5 6 7 const variableOne = 0 const variableTwo = \"Peter\" const variableThree = { id : 350 , name : \"Peter\" } typeof variableOne // => of type Number typeof variableTwo // => of type String typeof variableThree // => of type Object Now run the code below in a Repl.it to see what each logs out for each line. 1 2 3 4 5 6 7 8 9 10 console . log ( 'typeof \"I love JS!\"' , typeof \"I love JS!\" ); console . log ( 'typeof 1.08' , typeof 1.08 ); console . log ( 'typeof NaN' , typeof NaN ); console . log ( 'typeof false' , typeof false ); console . log ( 'typeof [1, 2, 3, 4]' , typeof [ 1 , 2 , 3 , 4 ]); console . log ( 'typeof {name:' Victoria ', age:26}' ); console . log ( 'typeof new Date()' , typeof new Date ()); console . log ( 'typeof function () {}' , typeof function () {}); console . log ( 'typeof myCar' , typeof myCar ); console . log ( 'typeof null' , typeof null ); Try this yourself on another piece of data in a Repl.it. Play. Have fun! Write it down and remember to use it. Know Your Docs MDN Docs - typeof Operator","title":"typeof Operator"},{"location":"preCourse/typeofOperator/#typeof-operator","text":"Although we haven't covered all of the data types in JavaScript yet, you'll need to know about this special operator to complete your first assignment: CurrentDate & Time . So let's get this short and easy one out of the way!!","title":"typeof Operator"},{"location":"preCourse/typeofOperator/#whats-the-problem","text":"To effectively work with data, we need to know the type of data we're working with. Often times we wouldn't know what type of data is coming back to us because, as front-end developers, we usually don't build the back-end that we pull the data from. So we don't always know what to expect in the returned data stream . This presents problems because if the object we're trying to access is of type Array it won't have the same methods built into it as a standard JS object, and vice versa. To tell us what type of data we're working with we use the typeof operator.","title":"What's the Problem?"},{"location":"preCourse/typeofOperator/#how-does-it-work","text":"The typeof operator simply returns the data type of a variable or JavaScript object. Using typeof is just like asking the JavaScript engine: \"What type of data is this thing?\" It's really useful when you get into the end of this 211 course and all of 311 because you will be requesting \"things\" (objects) from a remote database and you won't know exactly what type of data you're getting back...maybe it's a string, ...maybe it's a number, ...maybe it's an object-literal! With the built-in tool, typeof , you won't have to guess! Check out the example below: 1 2 3 4 5 6 7 const variableOne = 0 const variableTwo = \"Peter\" const variableThree = { id : 350 , name : \"Peter\" } typeof variableOne // => of type Number typeof variableTwo // => of type String typeof variableThree // => of type Object Now run the code below in a Repl.it to see what each logs out for each line. 1 2 3 4 5 6 7 8 9 10 console . log ( 'typeof \"I love JS!\"' , typeof \"I love JS!\" ); console . log ( 'typeof 1.08' , typeof 1.08 ); console . log ( 'typeof NaN' , typeof NaN ); console . log ( 'typeof false' , typeof false ); console . log ( 'typeof [1, 2, 3, 4]' , typeof [ 1 , 2 , 3 , 4 ]); console . log ( 'typeof {name:' Victoria ', age:26}' ); console . log ( 'typeof new Date()' , typeof new Date ()); console . log ( 'typeof function () {}' , typeof function () {}); console . log ( 'typeof myCar' , typeof myCar ); console . log ( 'typeof null' , typeof null ); Try this yourself on another piece of data in a Repl.it. Play. Have fun! Write it down and remember to use it.","title":"How Does it Work?"},{"location":"preCourse/typeofOperator/#know-your-docs","text":"MDN Docs - typeof Operator","title":"Know Your Docs"},{"location":"preCourse/variablesAndFunctions/","text":"Practice Variables and Functions The mind is everything. What you think you become. \u2014Buddha What's a Variable A variable in JavaScript is just a \"bucket\" to put data inside. It's a means of storage for values we'll need to use, access, compare, or manipulate later as we're programming. In a variable we can store any type of data, from a person's name to a person's phone number from a list of a person's friends to a collection of a person's interests\u2014we can hold anything in this variable \"bucket\". Imagine you're holding two apples in either hand. You could compare the two pieces of data , \"apple A\" and \"apple B\", to one another with your two variables , your left hand and your right hand. In JavaScript, to use a variable you must: Declare the variables name let myVariable Assign it a value with the = operator And Define its value by putting the value after the = : let myProblems = 99 The name must start with a letter, not a number , and must not be a reserved word in JavaScript. JavaScript is a case sensitive language. const Score and const score would be treated as two different variables. Declare and name variables once and only once . Declare A Variable In older versions of JS you'll see the keyword var BUT DO NOT USE THIS WORD FOR ANYTHING YOU BUILD in the future! The var keyword is out of date/ deprecated . Instead use one of the two other keywords: let or const The simplest way to remember which to use is make all variables a const until you realize its value needs to dynamically change then make it a let . Remember: The Universal Const ant is the speed of light, but we can let all other things change. You can name your variables almost anything you want, i.e. myVariable , user , bonsaiTree , but there are some guidelines, see below : Descriptive Naming - remember: variables are for us humans to reference later. It's helpful for you and your team if you name a variable what you expect to be in the variable, i.e. const userPhoneNumber is better than const userNumber . camelCased - first letter is lower-cased, all other words will have their first letter upper-cased: const babyBoy , const greaterThan , const lessThanOtherNumber . Assign Simply use the token/symbol = to assign a value to a variable. The Assignment Operator , = , does not mean \"equal\". Instead it means \"this is set to the value of...\" i.e. in const userName = \"Joseph\" , \"userName\" is set to the value of \"Joseph\". Define The last step to creating a variable is to define its value. In the next lesson we'll learn what types of values you can place in a variable but for now here are examples of what values can go in a variable: 1 2 3 4 const myVariable = true const user = \"Pete Williams\" const bonsaiTree = { size : \"small\" , age : 404 } const score = 900 Know Your Docs From here on out, you'll see this section telling you to go to the linked website and BOOKMARK the page so you can easily reference it. It's not important that you memorize everything in JavaScript, only that you know how to find what you're looking for. Let's start by reading the syntax of a variable in JS and bookmarking it in a bookmark folder called \"JavaScript\". W3S Docs - JS Reserved Words W3S Docs - Syntax of a Variable in JS Practice It Go to the CodePen below, click the top-right corner \"Edit on CodePen\" Sign-in and Fork it to your account (button at the very bottom to the right). If not already collapsed, drag the HTML and CSS windows to the left so you're only looking at the JS file. If not open, click on the console button at the very bottom left to open the console. Then click the clear button at the top right of the console. Follow the instructions listed in the code comments after the // See the Pen Variable&DataTypesPractice by Austin Coding Academy ( @austincoding ) on CodePen .","title":"Variables & Functions"},{"location":"preCourse/variablesAndFunctions/#practice-variables-and-functions","text":"The mind is everything. What you think you become. \u2014Buddha","title":"Practice Variables and Functions"},{"location":"preCourse/variablesAndFunctions/#whats-a-variable","text":"A variable in JavaScript is just a \"bucket\" to put data inside. It's a means of storage for values we'll need to use, access, compare, or manipulate later as we're programming. In a variable we can store any type of data, from a person's name to a person's phone number from a list of a person's friends to a collection of a person's interests\u2014we can hold anything in this variable \"bucket\". Imagine you're holding two apples in either hand. You could compare the two pieces of data , \"apple A\" and \"apple B\", to one another with your two variables , your left hand and your right hand. In JavaScript, to use a variable you must: Declare the variables name let myVariable Assign it a value with the = operator And Define its value by putting the value after the = : let myProblems = 99 The name must start with a letter, not a number , and must not be a reserved word in JavaScript. JavaScript is a case sensitive language. const Score and const score would be treated as two different variables. Declare and name variables once and only once .","title":"What's a Variable"},{"location":"preCourse/variablesAndFunctions/#declare-a-variable","text":"In older versions of JS you'll see the keyword var BUT DO NOT USE THIS WORD FOR ANYTHING YOU BUILD in the future! The var keyword is out of date/ deprecated . Instead use one of the two other keywords: let or const The simplest way to remember which to use is make all variables a const until you realize its value needs to dynamically change then make it a let . Remember: The Universal Const ant is the speed of light, but we can let all other things change. You can name your variables almost anything you want, i.e. myVariable , user , bonsaiTree , but there are some guidelines, see below : Descriptive Naming - remember: variables are for us humans to reference later. It's helpful for you and your team if you name a variable what you expect to be in the variable, i.e. const userPhoneNumber is better than const userNumber . camelCased - first letter is lower-cased, all other words will have their first letter upper-cased: const babyBoy , const greaterThan , const lessThanOtherNumber .","title":"Declare A Variable"},{"location":"preCourse/variablesAndFunctions/#assign","text":"Simply use the token/symbol = to assign a value to a variable. The Assignment Operator , = , does not mean \"equal\". Instead it means \"this is set to the value of...\" i.e. in const userName = \"Joseph\" , \"userName\" is set to the value of \"Joseph\".","title":"Assign"},{"location":"preCourse/variablesAndFunctions/#define","text":"The last step to creating a variable is to define its value. In the next lesson we'll learn what types of values you can place in a variable but for now here are examples of what values can go in a variable: 1 2 3 4 const myVariable = true const user = \"Pete Williams\" const bonsaiTree = { size : \"small\" , age : 404 } const score = 900","title":"Define"},{"location":"preCourse/variablesAndFunctions/#know-your-docs","text":"From here on out, you'll see this section telling you to go to the linked website and BOOKMARK the page so you can easily reference it. It's not important that you memorize everything in JavaScript, only that you know how to find what you're looking for. Let's start by reading the syntax of a variable in JS and bookmarking it in a bookmark folder called \"JavaScript\". W3S Docs - JS Reserved Words W3S Docs - Syntax of a Variable in JS","title":"Know Your Docs"},{"location":"preCourse/variablesAndFunctions/#practice-it","text":"Go to the CodePen below, click the top-right corner \"Edit on CodePen\" Sign-in and Fork it to your account (button at the very bottom to the right). If not already collapsed, drag the HTML and CSS windows to the left so you're only looking at the JS file. If not open, click on the console button at the very bottom left to open the console. Then click the clear button at the top right of the console. Follow the instructions listed in the code comments after the // See the Pen Variable&DataTypesPractice by Austin Coding Academy ( @austincoding ) on CodePen .","title":"Practice It"},{"location":"preCourse/whatIsJavaScript/","text":"What is JavaScript First off, JavaScript is nothing even close to Java. Please do not confuse the two . The naming of JavaScript was a marketing tactic at the time of creation to make programmers feel comfortable with the new language and increase its popularity. In short, Java is to JavaScript as car is to carpet . Unlike HTML and CSS, JavaScript (JS) is a programming language. Instead of rendering content and telling it how it should look, JavaScript can decide what will be rendered, when it will be rendered, why it will be rendered, how it will be rendered and how much of it to be rendered on the screen. JS can control the flow of elements, information, and interactions. Think of it this way: If HTML is the bones of your web page and CSS is the meat and fat that fleshes it out, then JS is the brains that control the movement and flow of everything on the web page. At first, JS will seem daunting. In time you'll find it really isn't but because you've been working mostly in HTML and CSS it will feel overwhelming. I promise you it isn't and you will get it. But it will take a little bit of time and effort. Also, by learning JS you are simultaneously learning the fundamentals of programming which will make all other programming languages come easier later on. You're doing the hard work now! Strongly Suggested Additional Resources MDN Docs - What is JavaScript . Tutorial - \"Playing with browser objects\" Video - What Went Wrong? Troubleshooting JavaScript . Video - What Is JavaScript","title":"What is JavaScript"},{"location":"preCourse/whatIsJavaScript/#what-is-javascript","text":"First off, JavaScript is nothing even close to Java. Please do not confuse the two . The naming of JavaScript was a marketing tactic at the time of creation to make programmers feel comfortable with the new language and increase its popularity. In short, Java is to JavaScript as car is to carpet . Unlike HTML and CSS, JavaScript (JS) is a programming language. Instead of rendering content and telling it how it should look, JavaScript can decide what will be rendered, when it will be rendered, why it will be rendered, how it will be rendered and how much of it to be rendered on the screen. JS can control the flow of elements, information, and interactions. Think of it this way: If HTML is the bones of your web page and CSS is the meat and fat that fleshes it out, then JS is the brains that control the movement and flow of everything on the web page. At first, JS will seem daunting. In time you'll find it really isn't but because you've been working mostly in HTML and CSS it will feel overwhelming. I promise you it isn't and you will get it. But it will take a little bit of time and effort. Also, by learning JS you are simultaneously learning the fundamentals of programming which will make all other programming languages come easier later on. You're doing the hard work now!","title":"What is JavaScript"},{"location":"preCourse/whatIsJavaScript/#strongly-suggested-additional-resources","text":"MDN Docs - What is JavaScript . Tutorial - \"Playing with browser objects\" Video - What Went Wrong? Troubleshooting JavaScript . Video - What Is JavaScript","title":"Strongly Suggested Additional Resources"}]}